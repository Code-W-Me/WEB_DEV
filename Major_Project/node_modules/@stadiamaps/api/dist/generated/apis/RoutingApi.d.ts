import { IsochroneRequest, IsochroneResponse, LocateObject, MapMatchRequest, MapMatchRouteResponse, MatrixRequest, MatrixResponse, NearestRoadsRequest, OptimizedRouteRequest, Route200Response, RouteRequest, TraceAttributesRequest, TraceAttributesResponse } from '../models/index';
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 10.0.1
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
export interface IsochroneOperationRequest {
    isochroneRequest?: IsochroneRequest;
}
export interface MapMatchOperationRequest {
    mapMatchRequest?: MapMatchRequest;
}
export interface NearestRoadsOperationRequest {
    nearestRoadsRequest?: NearestRoadsRequest;
}
export interface OptimizedRouteOperationRequest {
    optimizedRouteRequest?: OptimizedRouteRequest;
}
export interface RouteOperationRequest {
    routeRequest?: RouteRequest;
}
export interface TimeDistanceMatrixRequest {
    matrixRequest?: MatrixRequest;
}
export interface TraceAttributesOperationRequest {
    traceAttributesRequest?: TraceAttributesRequest;
}
/**
 *
 */
export declare class RoutingApi extends runtime.BaseAPI {
    /**
     * The isochrone API computes reachable areas within a time or distance constraint. The resulting polygon can be rendered on a map and used for assessing urban mobility, planning, or as a search filter of places within a constrained range.
     * Calculate areas of equal travel time from a location.
     */
    isochroneRaw(requestParameters: IsochroneOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IsochroneResponse>>;
    /**
     * The isochrone API computes reachable areas within a time or distance constraint. The resulting polygon can be rendered on a map and used for assessing urban mobility, planning, or as a search filter of places within a constrained range.
     * Calculate areas of equal travel time from a location.
     */
    isochrone(requestParameters?: IsochroneOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IsochroneResponse>;
    /**
     * The map matching API transforms a recorded route into navigation instructions like you would get from the `route` endpoint. The input can be in the form of either an encoded polyline, or (optionally) timestamped coordinates.
     * Match a recorded route to the road network.
     */
    mapMatchRaw(requestParameters: MapMatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MapMatchRouteResponse>>;
    /**
     * The map matching API transforms a recorded route into navigation instructions like you would get from the `route` endpoint. The input can be in the form of either an encoded polyline, or (optionally) timestamped coordinates.
     * Match a recorded route to the road network.
     */
    mapMatch(requestParameters?: MapMatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MapMatchRouteResponse>;
    /**
     * The nearest roads API allows you query for detailed information about streets and intersections near the input locations.
     * Find the nearest roads to the set of input locations.
     */
    nearestRoadsRaw(requestParameters: NearestRoadsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocateObject>>>;
    /**
     * The nearest roads API allows you query for detailed information about streets and intersections near the input locations.
     * Find the nearest roads to the set of input locations.
     */
    nearestRoads(requestParameters?: NearestRoadsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocateObject>>;
    /**
     * The optimized route API is a mix of the matrix and normal route API. For an optimized route, the start and end point are fixed, but the intermediate points will be re-ordered to form an optimal route visiting all nodes once.
     * Calculate an optimized route between a known start and end point.
     */
    optimizedRouteRaw(requestParameters: OptimizedRouteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Route200Response>>;
    /**
     * The optimized route API is a mix of the matrix and normal route API. For an optimized route, the start and end point are fixed, but the intermediate points will be re-ordered to form an optimal route visiting all nodes once.
     * Calculate an optimized route between a known start and end point.
     */
    optimizedRoute(requestParameters?: OptimizedRouteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Route200Response>;
    /**
     * The route (turn-by-turn) API computes routes between two or more locations. It supports a variety of tunable costing methods, and supports routing through intermediate waypoints and discontinuous multi-leg routes.
     * Get turn by turn routing instructions between two or more locations.
     */
    routeRaw(requestParameters: RouteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Route200Response>>;
    /**
     * The route (turn-by-turn) API computes routes between two or more locations. It supports a variety of tunable costing methods, and supports routing through intermediate waypoints and discontinuous multi-leg routes.
     * Get turn by turn routing instructions between two or more locations.
     */
    route(requestParameters?: RouteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Route200Response>;
    /**
     * The time distance matrix API lets you compare travel times between a set of possible start and end points. See https://docs.stadiamaps.com/limits/ for documentation of our latest limits.
     * Calculate a time distance matrix for use in an optimizer.
     */
    timeDistanceMatrixRaw(requestParameters: TimeDistanceMatrixRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MatrixResponse>>;
    /**
     * The time distance matrix API lets you compare travel times between a set of possible start and end points. See https://docs.stadiamaps.com/limits/ for documentation of our latest limits.
     * Calculate a time distance matrix for use in an optimizer.
     */
    timeDistanceMatrix(requestParameters?: TimeDistanceMatrixRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MatrixResponse>;
    /**
     * The trace attributes endpoint retrieves detailed information along a route, returning details for each section along the path, as well as any intersections encountered. In addition to tracing a recording route, this is great for providing just-in-time info to navigation applications, enabling them to conserve resources by omitting info like speed limits upfront that may be irrelevant if the user goes off-route.
     * Trace the attributes of roads visited on a route.
     */
    traceAttributesRaw(requestParameters: TraceAttributesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TraceAttributesResponse>>;
    /**
     * The trace attributes endpoint retrieves detailed information along a route, returning details for each section along the path, as well as any intersections encountered. In addition to tracing a recording route, this is great for providing just-in-time info to navigation applications, enabling them to conserve resources by omitting info like speed limits upfront that may be irrelevant if the user goes off-route.
     * Trace the attributes of roads visited on a route.
     */
    traceAttributes(requestParameters?: TraceAttributesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TraceAttributesResponse>;
}
//# sourceMappingURL=RoutingApi.d.ts.map