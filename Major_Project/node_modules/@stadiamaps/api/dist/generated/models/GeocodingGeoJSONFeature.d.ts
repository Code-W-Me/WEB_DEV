import { GeoJSONPoint } from './GeoJSONPoint';
import { GeocodingGeoJSONProperties } from './GeocodingGeoJSONProperties';
/**
 *
 * @export
 * @interface GeocodingGeoJSONFeature
 */
export interface GeocodingGeoJSONFeature {
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONFeature
     */
    type: GeocodingGeoJSONFeatureTypeEnum;
    /**
     *
     * @type {GeoJSONPoint}
     * @memberof GeocodingGeoJSONFeature
     */
    geometry: GeoJSONPoint;
    /**
     *
     * @type {GeocodingGeoJSONProperties}
     * @memberof GeocodingGeoJSONFeature
     */
    properties?: GeocodingGeoJSONProperties;
    /**
     * An array of 4 floating point numbers representing the (W, S, E, N) extremes of the features found.
     * @type {Array<number>}
     * @memberof GeocodingGeoJSONFeature
     */
    bbox?: Array<number>;
}
/**
 * @export
 */
export declare const GeocodingGeoJSONFeatureTypeEnum: {
    readonly Feature: "Feature";
};
export type GeocodingGeoJSONFeatureTypeEnum = (typeof GeocodingGeoJSONFeatureTypeEnum)[keyof typeof GeocodingGeoJSONFeatureTypeEnum];
/**
 * Check if a given object implements the GeocodingGeoJSONFeature interface.
 */
export declare function instanceOfGeocodingGeoJSONFeature(value: object): value is GeocodingGeoJSONFeature;
export declare function GeocodingGeoJSONFeatureFromJSON(json: any): GeocodingGeoJSONFeature;
export declare function GeocodingGeoJSONFeatureFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeocodingGeoJSONFeature;
export declare function GeocodingGeoJSONFeatureToJSON(json: any): GeocodingGeoJSONFeature;
export declare function GeocodingGeoJSONFeatureToJSONTyped(value?: GeocodingGeoJSONFeature | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=GeocodingGeoJSONFeature.d.ts.map