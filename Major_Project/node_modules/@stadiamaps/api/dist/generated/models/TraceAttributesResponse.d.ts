import { TraceEdge } from './TraceEdge';
import { RoutingLongUnits } from './RoutingLongUnits';
import { MatchedPoint } from './MatchedPoint';
import { AdminRegion } from './AdminRegion';
import { TraceAttributesBaseResponse } from './TraceAttributesBaseResponse';
/**
 *
 * @export
 * @interface TraceAttributesResponse
 */
export interface TraceAttributesResponse {
    /**
     * The list of edges matched along the path.
     * @type {Array<TraceEdge>}
     * @memberof TraceAttributesResponse
     */
    edges?: Array<TraceEdge>;
    /**
     * The set of administrative regions matched along the path. Rather than repeating this information for every end node, the admins in this list are referenced by index.
     * @type {Array<AdminRegion>}
     * @memberof TraceAttributesResponse
     */
    admins?: Array<AdminRegion>;
    /**
     * List of match results when using the map_snap shape match algorithm. There is a one-to-one correspondence with the input set of latitude, longitude coordinates and this list of match results.
     * @type {Array<MatchedPoint>}
     * @memberof TraceAttributesResponse
     */
    matchedPoints?: Array<MatchedPoint>;
    /**
     *
     * @type {number}
     * @memberof TraceAttributesResponse
     */
    osmChangeset?: number;
    /**
     * The encoded polyline (https://developers.google.com/maps/documentation/utilities/polylinealgorithm) of the matched path.
     * @type {string}
     * @memberof TraceAttributesResponse
     */
    shape?: string;
    /**
     *
     * @type {number}
     * @memberof TraceAttributesResponse
     */
    confidenceScore?: number;
    /**
     * An identifier to disambiguate requests (echoed by the server).
     * @type {string}
     * @memberof TraceAttributesResponse
     */
    id?: string;
    /**
     *
     * @type {RoutingLongUnits}
     * @memberof TraceAttributesResponse
     */
    units?: RoutingLongUnits;
    /**
     * Alternate paths, if any, that were not classified as the best match.
     * @type {Array<TraceAttributesBaseResponse>}
     * @memberof TraceAttributesResponse
     */
    alternatePaths?: Array<TraceAttributesBaseResponse>;
}
/**
 * Check if a given object implements the TraceAttributesResponse interface.
 */
export declare function instanceOfTraceAttributesResponse(value: object): value is TraceAttributesResponse;
export declare function TraceAttributesResponseFromJSON(json: any): TraceAttributesResponse;
export declare function TraceAttributesResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TraceAttributesResponse;
export declare function TraceAttributesResponseToJSON(json: any): TraceAttributesResponse;
export declare function TraceAttributesResponseToJSONTyped(value?: TraceAttributesResponse | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=TraceAttributesResponse.d.ts.map