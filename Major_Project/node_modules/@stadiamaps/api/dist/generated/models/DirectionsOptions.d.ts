import { DistanceUnit } from './DistanceUnit';
import { RoutingLanguages } from './RoutingLanguages';
/**
 *
 * @export
 * @interface DirectionsOptions
 */
export interface DirectionsOptions {
    /**
     *
     * @type {DistanceUnit}
     * @memberof DirectionsOptions
     */
    units?: DistanceUnit;
    /**
     *
     * @type {RoutingLanguages}
     * @memberof DirectionsOptions
     */
    language?: RoutingLanguages;
    /**
     * The level of directional narrative to include. Locations and times will always be returned, but narrative generation verbosity can be controlled with this parameter.
     * @type {string}
     * @memberof DirectionsOptions
     */
    directionsType?: DirectionsOptionsDirectionsTypeEnum;
}
/**
 * @export
 */
export declare const DirectionsOptionsDirectionsTypeEnum: {
    readonly None: "none";
    readonly Maneuvers: "maneuvers";
    readonly Instructions: "instructions";
};
export type DirectionsOptionsDirectionsTypeEnum = (typeof DirectionsOptionsDirectionsTypeEnum)[keyof typeof DirectionsOptionsDirectionsTypeEnum];
/**
 * Check if a given object implements the DirectionsOptions interface.
 */
export declare function instanceOfDirectionsOptions(value: object): value is DirectionsOptions;
export declare function DirectionsOptionsFromJSON(json: any): DirectionsOptions;
export declare function DirectionsOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): DirectionsOptions;
export declare function DirectionsOptionsToJSON(json: any): DirectionsOptions;
export declare function DirectionsOptionsToJSONTyped(value?: DirectionsOptions | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=DirectionsOptions.d.ts.map