import { Speeds } from './Speeds';
import { NodeId } from './NodeId';
import { HighwayClassification } from './HighwayClassification';
import { GeoAttributes } from './GeoAttributes';
import { Restrictions } from './Restrictions';
/**
 *
 * @export
 * @interface LocateDetailedEdge
 */
export interface LocateDetailedEdge {
    /**
     * Is there a sidewalk to the left of the edge?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    sidewalkLeft?: boolean;
    /**
     * Is there a sidewalk to the right of the edge?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    sidewalkRight?: boolean;
    /**
     *
     * @type {number}
     * @memberof LocateDetailedEdge
     */
    laneCount?: number;
    /**
     * Is there a stop sign at end of the directed edge?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    stopSign?: boolean;
    /**
     *
     * @type {string}
     * @memberof LocateDetailedEdge
     */
    sacScale?: LocateDetailedEdgeSacScaleEnum;
    /**
     * Is there a yield sign at end of the directed edge?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    yieldSign?: boolean;
    /**
     * Does the edge lead to a "no-through" region?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    notThru?: boolean;
    /**
     * Is the edge info forward? If false, then reverse is implied.
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    forward?: boolean;
    /**
     *
     * @type {NodeId}
     * @memberof LocateDetailedEdge
     */
    endNode?: NodeId;
    /**
     * Is the edge part of a truck route/network?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    truckRoute?: boolean;
    /**
     *
     * @type {Speeds}
     * @memberof LocateDetailedEdge
     */
    speeds?: Speeds;
    /**
     * Is the edge part of a bicycle network?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    bikeNetwork?: boolean;
    /**
     * Is the edge part of a roundabout?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    roundAbout?: boolean;
    /**
     * Is there a traffic signal at the end of the directed edge?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    trafficSignal?: boolean;
    /**
     * Is there a general restriction or access condition?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    accessRestriction?: boolean;
    /**
     * Is the edge destination only? If so, it will not be routed through.
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    destinationOnly?: boolean;
    /**
     *
     * @type {GeoAttributes}
     * @memberof LocateDetailedEdge
     */
    geoAttributes?: GeoAttributes;
    /**
     *
     * @type {Restrictions}
     * @memberof LocateDetailedEdge
     */
    startRestriction?: Restrictions;
    /**
     * Indication of the type of cycle lane (if any) present along an edge.
     * @type {string}
     * @memberof LocateDetailedEdge
     */
    cycleLane?: LocateDetailedEdgeCycleLaneEnum;
    /**
     *
     * @type {Restrictions}
     * @memberof LocateDetailedEdge
     */
    endRestriction?: Restrictions;
    /**
     * Is access seasonal (ex. no access in winter)?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    seasonal?: boolean;
    /**
     * Does the edge cross into a new country?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    countryCrossing?: boolean;
    /**
     * Is the edge part of a complex restriction?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    partOfComplexRestriction?: boolean;
    /**
     * Do exit signs exist for the edge?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    hasSign?: boolean;
    /**
     *
     * @type {Restrictions}
     * @memberof LocateDetailedEdge
     */
    access?: Restrictions;
    /**
     * Is the edge part of a bridge?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    bridge?: boolean;
    /**
     *
     * @type {HighwayClassification}
     * @memberof LocateDetailedEdge
     */
    classification?: HighwayClassification;
    /**
     * Is the edge a toll road?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    toll?: boolean;
    /**
     * Is the edge a tunnel?
     * @type {boolean}
     * @memberof LocateDetailedEdge
     */
    tunnel?: boolean;
}
/**
 * @export
 */
export declare const LocateDetailedEdgeSacScaleEnum: {
    readonly None: "none";
    readonly Hiking: "hiking";
    readonly MountainHiking: "mountain hiking";
    readonly DemandingMountainHiking: "demanding mountain hiking";
    readonly AlpineHiking: "alpine hiking";
    readonly DemandingAlpineHiking: "demanding alpine hiking";
    readonly DifficultAlpineHiking: "difficult alpine hiking";
};
export type LocateDetailedEdgeSacScaleEnum = (typeof LocateDetailedEdgeSacScaleEnum)[keyof typeof LocateDetailedEdgeSacScaleEnum];
/**
 * @export
 */
export declare const LocateDetailedEdgeCycleLaneEnum: {
    readonly None: "none";
    readonly Shared: "shared";
    readonly Dedicated: "dedicated";
    readonly Separated: "separated";
};
export type LocateDetailedEdgeCycleLaneEnum = (typeof LocateDetailedEdgeCycleLaneEnum)[keyof typeof LocateDetailedEdgeCycleLaneEnum];
/**
 * Check if a given object implements the LocateDetailedEdge interface.
 */
export declare function instanceOfLocateDetailedEdge(value: object): value is LocateDetailedEdge;
export declare function LocateDetailedEdgeFromJSON(json: any): LocateDetailedEdge;
export declare function LocateDetailedEdgeFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocateDetailedEdge;
export declare function LocateDetailedEdgeToJSON(json: any): LocateDetailedEdge;
export declare function LocateDetailedEdgeToJSONTyped(value?: LocateDetailedEdge | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=LocateDetailedEdge.d.ts.map