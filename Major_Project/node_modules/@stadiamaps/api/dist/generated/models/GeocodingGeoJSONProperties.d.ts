import { GeocodingGeoJSONPropertiesAddendum } from './GeocodingGeoJSONPropertiesAddendum';
/**
 *
 * @export
 * @interface GeocodingGeoJSONProperties
 */
export interface GeocodingGeoJSONProperties {
    [key: string]: any | any;
    /**
     * A scoped GID for this result. This can be passed to the place endpoint. Note that these are not always stable long-term.
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    gid?: string;
    /**
     * An ID referencing the original data source (specified via source) for the result. These IDs are specific to the source that they originated from. For example, in the case of OSM, these typically look like way/123 or point/123.
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    sourceId?: string;
    /**
     * A full, human-readable label. However, you may not necessarily want to use this; be sure to read the docs for name, locality, and region before making a decision. This field is mostly localized. The order of components is generally locally correct (ex: for an address in South Korea, the house number appears after the street name). However, components will use a request language equivalent if one exists (ex: Seoul instead of 서울 if lang=en).
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    label?: string;
    /**
     * The data layer containing the place (e.g. "address" or "venue").
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    layer?: string;
    /**
     * The ID of the data source that the result came from.
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    source?: string;
    /**
     * The name of the place, the street address including house number, or label of similar relevance. If your app is localized to a specific region, you may get better display results by combining name, locality OR region (or neither?), and postal code together in the local format. Experiment with what works best for your use case.
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    name?: string;
    /**
     * The accuracy of the geographic coordinates in the result. This value is a property of the result itself and won't change based on the query.
     * A point result means that the record can reasonably be represented by a single geographic point. Addresses, venues, or interpolated addresses usually have point accuracy.
     * Larger areas, such as a city or country, cannot be represented by a single point, so a centroid is given instead.
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    accuracy?: GeocodingGeoJSONPropertiesAccuracyEnum;
    /**
     *
     * @type {GeocodingGeoJSONPropertiesAddendum}
     * @memberof GeocodingGeoJSONProperties
     */
    addendum?: GeocodingGeoJSONPropertiesAddendum;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    continent?: string;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    continentGid?: string;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    country?: string;
    /**
     * The ISO 3166-1 alpha-3 code for the country the place is located in.
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    countryA?: string;
    /**
     * The ISO 3166-1 alpha-2 code for the country the place is located in.
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    countryCode?: string;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    countryGid?: string;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    neighbourhood?: string;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    neighbourhoodGid?: string;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    borough?: string;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    boroughGid?: string;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    postalcode?: string;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    street?: string;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    housenumber?: string;
    /**
     * The city, village, town, etc. that the place / address is part of. Note that values may not always match postal or local conventions perfectly.
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    locality?: string;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    localityGid?: string;
    /**
     * Administrative divisions between localities and regions. Useful for disambiguating nearby results with similar names.
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    county?: string;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    countyGid?: string;
    /**
     * Typically the first administrative division within a country. For example, a US state or a Canadian province.
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    region?: string;
    /**
     * The abbreviation for the region (e.g. PA for the US state of Pennsylvania).
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    regionA?: string;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    regionGid?: string;
    /**
     * In many countries, this is the lowest level of government. Sometimes interchangeable with locality.
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    localadmin?: string;
    /**
     *
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    localadminGid?: string;
    /**
     * For search and structured search results, the type of match.
     * @type {string}
     * @memberof GeocodingGeoJSONProperties
     */
    matchType?: GeocodingGeoJSONPropertiesMatchTypeEnum;
    /**
     * The level of confidence that the result matches what the user searched for. Only available on forward geocoding endpoints.
     * @type {number}
     * @memberof GeocodingGeoJSONProperties
     */
    confidence?: number;
}
/**
 * @export
 */
export declare const GeocodingGeoJSONPropertiesAccuracyEnum: {
    readonly Point: "point";
    readonly Centroid: "centroid";
};
export type GeocodingGeoJSONPropertiesAccuracyEnum = (typeof GeocodingGeoJSONPropertiesAccuracyEnum)[keyof typeof GeocodingGeoJSONPropertiesAccuracyEnum];
/**
 * @export
 */
export declare const GeocodingGeoJSONPropertiesMatchTypeEnum: {
    readonly Exact: "exact";
    readonly Interpolated: "interpolated";
    readonly Fallback: "fallback";
};
export type GeocodingGeoJSONPropertiesMatchTypeEnum = (typeof GeocodingGeoJSONPropertiesMatchTypeEnum)[keyof typeof GeocodingGeoJSONPropertiesMatchTypeEnum];
/**
 * Check if a given object implements the GeocodingGeoJSONProperties interface.
 */
export declare function instanceOfGeocodingGeoJSONProperties(value: object): value is GeocodingGeoJSONProperties;
export declare function GeocodingGeoJSONPropertiesFromJSON(json: any): GeocodingGeoJSONProperties;
export declare function GeocodingGeoJSONPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeocodingGeoJSONProperties;
export declare function GeocodingGeoJSONPropertiesToJSON(json: any): GeocodingGeoJSONProperties;
export declare function GeocodingGeoJSONPropertiesToJSONTyped(value?: GeocodingGeoJSONProperties | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=GeocodingGeoJSONProperties.d.ts.map