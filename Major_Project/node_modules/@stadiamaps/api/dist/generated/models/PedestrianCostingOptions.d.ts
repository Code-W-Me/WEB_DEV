import { PedestrianType } from './PedestrianType';
/**
 *
 * @export
 * @interface PedestrianCostingOptions
 */
export interface PedestrianCostingOptions {
    /**
     * Walking speed in kph.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    walkingSpeed?: number;
    /**
     * A factor that multiplies the cost when walkways are encountered.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    walkwayFactor?: number;
    /**
     * A factor that multiplies the cost when sidewalks are encountered.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    sidewalkFactor?: number;
    /**
     * A factor that multiplies the cost when alleys are encountered.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    alleyFactor?: number;
    /**
     * A factor that multiplies the cost when driveways are encountered.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    drivewayFactor?: number;
    /**
     * A penalty (in seconds) added to each transition onto a path with steps or stairs.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    stepPenalty?: number;
    /**
     * A measure of willingness to take ferries. Values near 0 attempt to avoid ferries, and values near 1 will favour them. Note that as some routes may be impossible without ferries, 0 does not guarantee avoidance of them.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    useFerry?: number;
    /**
     * A measure of willingness to take living streets. Values near 0 attempt to avoid them, and values near 1 will favour them. Note that as some routes may be impossible without living streets, 0 does not guarantee avoidance of them. The default value is 0 for trucks; 0.1 for other motor vehicles; 0.5 for bicycles; and 0.6 for pedestrians.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    useLivingStreets?: number;
    /**
     * A measure of willingness to take track roads. Values near 0 attempt to avoid them, and values near 1 will favour them. Note that as some routes may be impossible without track roads, 0 does not guarantee avoidance of them. The default value is 0 for automobiles, busses, and trucks; and 0.5 for all other costing modes.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    useTracks?: number;
    /**
     * A measure of willingness to take tackle hills. Values near 0 attempt to avoid hills and steeper grades even if it means a longer route, and values near 1 indicates that the user does not fear them. Note that as some routes may be impossible without hills, 0 does not guarantee avoidance of them.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    useHills?: number;
    /**
     * A measure of preference for streets that are lit. 0 indicates indifference toward lit streets, and 1 indicates that unlit streets should be avoided. Note that even with values near 1, there is no guarantee that the returned route will include lit segments.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    useLit?: number;
    /**
     * A penalty applied to transitions to service roads. This penalty can be used to reduce the likelihood of suggesting a route with service roads unless absolutely necessary. The default penalty is 15 for cars, busses, motor scooters, and motorcycles; and zero for others.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    servicePenalty?: number;
    /**
     * A factor that multiplies the cost when service roads are encountered. The default is 1.2 for cars and busses, and 1 for trucks, motor scooters, and motorcycles.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    serviceFactor?: number;
    /**
     * The maximum difficulty of hiking trails allowed. This corresponds to the OSM `sac_scale`.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    maxHikingDifficulty?: number;
    /**
     * The estimated cost (in seconds) to rent a bicycle from a sharing station in `bikeshare` mode.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    bssRentCost?: number;
    /**
     * A penalty (in seconds) to rent a bicycle in `bikeshare` mode.
     * @type {number}
     * @memberof PedestrianCostingOptions
     */
    bssRentPenalty?: number;
    /**
     *
     * @type {PedestrianType}
     * @memberof PedestrianCostingOptions
     */
    type?: PedestrianType;
}
/**
 * Check if a given object implements the PedestrianCostingOptions interface.
 */
export declare function instanceOfPedestrianCostingOptions(value: object): value is PedestrianCostingOptions;
export declare function PedestrianCostingOptionsFromJSON(json: any): PedestrianCostingOptions;
export declare function PedestrianCostingOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PedestrianCostingOptions;
export declare function PedestrianCostingOptionsToJSON(json: any): PedestrianCostingOptions;
export declare function PedestrianCostingOptionsToJSONTyped(value?: PedestrianCostingOptions | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=PedestrianCostingOptions.d.ts.map