import { IntersectingEdge } from './IntersectingEdge';
import { NodeType } from './NodeType';
/**
 * The node at the end of this edge
 * @export
 * @interface EndNode
 */
export interface EndNode {
    /**
     * A set of edges intersecting this node.
     * @type {Array<IntersectingEdge>}
     * @memberof EndNode
     */
    intersectingEdges?: Array<IntersectingEdge>;
    /**
     * The elapsed time along the path to arrive at this node.
     * @type {number}
     * @memberof EndNode
     */
    elapsedTime?: number;
    /**
     * The index into the `admins` list in which this node lies.
     * @type {number}
     * @memberof EndNode
     */
    adminIndex?: number;
    /**
     *
     * @type {NodeType}
     * @memberof EndNode
     */
    type?: NodeType;
    /**
     * True if this node is a fork.
     * @type {boolean}
     * @memberof EndNode
     */
    fork?: boolean;
    /**
     * The canonical TZDB identifier for the node's time zone.
     * @type {string}
     * @memberof EndNode
     */
    timeZone?: string;
}
/**
 * Check if a given object implements the EndNode interface.
 */
export declare function instanceOfEndNode(value: object): value is EndNode;
export declare function EndNodeFromJSON(json: any): EndNode;
export declare function EndNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EndNode;
export declare function EndNodeToJSON(json: any): EndNode;
export declare function EndNodeToJSONTyped(value?: EndNode | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=EndNode.d.ts.map