/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 10.0.1
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface MapMatchWaypoint
 */
export interface MapMatchWaypoint {
    /**
     * The latitude of a point in the shape.
     * @type {number}
     * @memberof MapMatchWaypoint
     */
    lat: number;
    /**
     * The longitude of a point in the shape.
     * @type {number}
     * @memberof MapMatchWaypoint
     */
    lon: number;
    /**
     * A `break` represents the start or end of a leg, and allows reversals. A `through` location is an intermediate waypoint that must be visited between `break`s, but at which reversals are not allowed. A `via` is similar to a `through` except that reversals are allowed. A `break_through` is similar to a `break` in that it can be the start/end of a leg, but does not allow reversals. Defaults to `break`.
     * @type {string}
     * @memberof MapMatchWaypoint
     */
    type?: MapMatchWaypointTypeEnum;
    /**
     * The timestamp of the waypoint, in seconds. This can inform the map matching algorithm about when the point was measured. A UNIX timestamp, or any increasing integer sequence measuring seconds from some reference point can be used.
     * @type {number}
     * @memberof MapMatchWaypoint
     */
    time?: number;
}
/**
 * @export
 */
export declare const MapMatchWaypointTypeEnum: {
    readonly Break: "break";
    readonly Through: "through";
    readonly Via: "via";
    readonly BreakThrough: "break_through";
};
export type MapMatchWaypointTypeEnum = (typeof MapMatchWaypointTypeEnum)[keyof typeof MapMatchWaypointTypeEnum];
/**
 * Check if a given object implements the MapMatchWaypoint interface.
 */
export declare function instanceOfMapMatchWaypoint(value: object): value is MapMatchWaypoint;
export declare function MapMatchWaypointFromJSON(json: any): MapMatchWaypoint;
export declare function MapMatchWaypointFromJSONTyped(json: any, ignoreDiscriminator: boolean): MapMatchWaypoint;
export declare function MapMatchWaypointToJSON(json: any): MapMatchWaypoint;
export declare function MapMatchWaypointToJSONTyped(value?: MapMatchWaypoint | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=MapMatchWaypoint.d.ts.map