import { WofContext } from './WofContext';
/**
 * The geographic context for a feature.
 *
 * Note that while data sources and country codes are listed,
 * this does not *necessarily* mean that the view is a specific hierarchy endorsed by that source.
 * We generally attempt to present the same view as OpenStreetMap.
 * Contact us if your use case requires a specific political view of the world.
 * @export
 * @interface Context
 */
export interface Context {
    /**
     * The ISO 3166-1 alpha-2 country code in which the feature is located.
     * @type {string}
     * @memberof Context
     */
    iso3166A2?: string | null;
    /**
     * The ISO 3166-1 alpha-3 country code in which the feature is located.
     * @type {string}
     * @memberof Context
     */
    iso3166A3?: string | null;
    /**
     * The geographic context, with administrative hierarchy modeled using the Who's on First taxonomy.
     * @type {WofContext}
     * @memberof Context
     */
    whosonfirst: WofContext;
}
/**
 * Check if a given object implements the Context interface.
 */
export declare function instanceOfContext(value: object): value is Context;
export declare function ContextFromJSON(json: any): Context;
export declare function ContextFromJSONTyped(json: any, ignoreDiscriminator: boolean): Context;
export declare function ContextToJSON(json: any): Context;
export declare function ContextToJSONTyped(value?: Context | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=Context.d.ts.map