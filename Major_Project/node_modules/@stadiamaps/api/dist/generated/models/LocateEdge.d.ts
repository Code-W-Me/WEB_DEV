import { LocateEdgeInfo } from './LocateEdgeInfo';
import { LocateDetailedEdge } from './LocateDetailedEdge';
import { NodeId } from './NodeId';
/**
 *
 * @export
 * @interface LocateEdge
 */
export interface LocateEdge {
    /**
     *
     * @type {NodeId}
     * @memberof LocateEdge
     */
    edgeId?: NodeId;
    /**
     * The OSM way ID associated with this edge (absent in verbose response; see the edge info).
     * @type {number}
     * @memberof LocateEdge
     */
    wayId?: number;
    /**
     *
     * @type {number}
     * @memberof LocateEdge
     */
    correlatedLat: number;
    /**
     *
     * @type {number}
     * @memberof LocateEdge
     */
    correlatedLon: number;
    /**
     *
     * @type {number}
     * @memberof LocateEdge
     */
    percentAlong: number;
    /**
     *
     * @type {string}
     * @memberof LocateEdge
     */
    sideOfStreet: LocateEdgeSideOfStreetEnum;
    /**
     * A base64-encoded [OpenLR location reference](https://www.openlr-association.com/fileadmin/user_upload/openlr-whitepaper_v1.5.pdf), for a graph edge of the road network matched by the query.
     * @type {string}
     * @memberof LocateEdge
     */
    linearReference?: string;
    /**
     *
     * @type {number}
     * @memberof LocateEdge
     */
    outboundReach?: number;
    /**
     *
     * @type {number}
     * @memberof LocateEdge
     */
    heading?: number;
    /**
     *
     * @type {number}
     * @memberof LocateEdge
     */
    inboundReach?: number;
    /**
     *
     * @type {number}
     * @memberof LocateEdge
     */
    distance?: number;
    /**
     * Predicted speed information based on historical data. If available, this will include 2016 entries. Each entry represents 5 minutes, where the first entry represents midnight on Monday, the second entry represents 00:05 on Monday, etc.
     * @type {Array<number>}
     * @memberof LocateEdge
     */
    predictedSpeeds?: Array<number>;
    /**
     *
     * @type {LocateEdgeInfo}
     * @memberof LocateEdge
     */
    edgeInfo?: LocateEdgeInfo;
    /**
     *
     * @type {LocateDetailedEdge}
     * @memberof LocateEdge
     */
    edge?: LocateDetailedEdge;
    /**
     *
     * @type {Array<string>}
     * @memberof LocateEdge
     */
    warnings?: Array<string>;
}
/**
 * @export
 */
export declare const LocateEdgeSideOfStreetEnum: {
    readonly Left: "left";
    readonly Right: "right";
    readonly Neither: "neither";
};
export type LocateEdgeSideOfStreetEnum = (typeof LocateEdgeSideOfStreetEnum)[keyof typeof LocateEdgeSideOfStreetEnum];
/**
 * Check if a given object implements the LocateEdge interface.
 */
export declare function instanceOfLocateEdge(value: object): value is LocateEdge;
export declare function LocateEdgeFromJSON(json: any): LocateEdge;
export declare function LocateEdgeFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocateEdge;
export declare function LocateEdgeToJSON(json: any): LocateEdge;
export declare function LocateEdgeToJSONTyped(value?: LocateEdge | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=LocateEdge.d.ts.map