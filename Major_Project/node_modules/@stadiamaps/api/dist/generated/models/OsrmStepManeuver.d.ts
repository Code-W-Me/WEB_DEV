import { OsrmGuidanceModifier } from './OsrmGuidanceModifier';
/**
 *
 * @export
 * @interface OsrmStepManeuver
 */
export interface OsrmStepManeuver {
    /**
     * A (longitude, latitude) coordinate pair.
     * @type {Array<number>}
     * @memberof OsrmStepManeuver
     */
    location: Array<number>;
    /**
     * A human-readable instruction for the maneuver.
     * @type {string}
     * @memberof OsrmStepManeuver
     */
    instruction?: string;
    /**
     * The clockwise angle from true north to the direction of travel immediately before the maneuver.
     * @type {number}
     * @memberof OsrmStepManeuver
     */
    bearingBefore: number;
    /**
     * The clockwise angle from true north to the direction of travel immediately after the maneuver.
     * @type {number}
     * @memberof OsrmStepManeuver
     */
    bearingAfter: number;
    /**
     *
     * @type {string}
     * @memberof OsrmStepManeuver
     */
    type: OsrmStepManeuverTypeEnum;
    /**
     *
     * @type {OsrmGuidanceModifier}
     * @memberof OsrmStepManeuver
     */
    modifier?: OsrmGuidanceModifier | null;
    /**
     * The exit number to take (for roundabouts, rotaries, and number of intersections).
     * @type {number}
     * @memberof OsrmStepManeuver
     */
    exit?: number;
}
/**
 * @export
 */
export declare const OsrmStepManeuverTypeEnum: {
    readonly Turn: "turn";
    readonly NewName: "new name";
    readonly Depart: "depart";
    readonly Arrive: "arrive";
    readonly Merge: "merge";
    readonly Ramp: "ramp";
    readonly OnRamp: "on ramp";
    readonly OffRamp: "off ramp";
    readonly Fork: "fork";
    readonly EndOfRoad: "end of road";
    readonly UseLane: "use lane";
    readonly Continue: "continue";
    readonly Roundabout: "roundabout";
    readonly Rotary: "rotary";
    readonly RoundaboutTurn: "roundabout turn";
    readonly Notification: "notification";
    readonly ExitRoundabout: "exit roundabout";
    readonly ExitRotary: "exit rotary";
};
export type OsrmStepManeuverTypeEnum = (typeof OsrmStepManeuverTypeEnum)[keyof typeof OsrmStepManeuverTypeEnum];
/**
 * Check if a given object implements the OsrmStepManeuver interface.
 */
export declare function instanceOfOsrmStepManeuver(value: object): value is OsrmStepManeuver;
export declare function OsrmStepManeuverFromJSON(json: any): OsrmStepManeuver;
export declare function OsrmStepManeuverFromJSONTyped(json: any, ignoreDiscriminator: boolean): OsrmStepManeuver;
export declare function OsrmStepManeuverToJSON(json: any): OsrmStepManeuver;
export declare function OsrmStepManeuverToJSONTyped(value?: OsrmStepManeuver | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=OsrmStepManeuver.d.ts.map