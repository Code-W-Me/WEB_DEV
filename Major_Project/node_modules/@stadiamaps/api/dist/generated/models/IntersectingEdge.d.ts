import { Traversability } from './Traversability';
import { EdgeUse } from './EdgeUse';
import { RoadClass } from './RoadClass';
/**
 *
 * @export
 * @interface IntersectingEdge
 */
export interface IntersectingEdge {
    /**
     * The direction at the beginning of an edge. The units are degrees clockwise from north.
     * @type {number}
     * @memberof IntersectingEdge
     */
    beginHeading?: number;
    /**
     * True if this intersecting edge at the end node has consistent names with the path from the other edge.
     * @type {boolean}
     * @memberof IntersectingEdge
     */
    fromEdgeNameConsistency?: boolean;
    /**
     * True if this intersecting edge at the end node has consistent names with the path to the other edge.
     * @type {boolean}
     * @memberof IntersectingEdge
     */
    toEdgeNameConsistency?: boolean;
    /**
     *
     * @type {Traversability}
     * @memberof IntersectingEdge
     */
    driveability?: Traversability;
    /**
     *
     * @type {Traversability}
     * @memberof IntersectingEdge
     */
    cyclability?: Traversability;
    /**
     *
     * @type {Traversability}
     * @memberof IntersectingEdge
     */
    walkability?: Traversability;
    /**
     *
     * @type {EdgeUse}
     * @memberof IntersectingEdge
     */
    use?: EdgeUse;
    /**
     *
     * @type {RoadClass}
     * @memberof IntersectingEdge
     */
    roadClass?: RoadClass;
}
/**
 * Check if a given object implements the IntersectingEdge interface.
 */
export declare function instanceOfIntersectingEdge(value: object): value is IntersectingEdge;
export declare function IntersectingEdgeFromJSON(json: any): IntersectingEdge;
export declare function IntersectingEdgeFromJSONTyped(json: any, ignoreDiscriminator: boolean): IntersectingEdge;
export declare function IntersectingEdgeToJSON(json: any): IntersectingEdge;
export declare function IntersectingEdgeToJSONTyped(value?: IntersectingEdge | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=IntersectingEdge.d.ts.map