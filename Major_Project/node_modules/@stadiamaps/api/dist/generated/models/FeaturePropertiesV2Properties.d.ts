import { Context } from './Context';
import { MatchType } from './MatchType';
import { SourceAttribution } from './SourceAttribution';
import { Precision } from './Precision';
import { AddendumV2 } from './AddendumV2';
import { AddressComponentsV2 } from './AddressComponentsV2';
/**
 * The GeoJSON properties object.
 * @export
 * @interface FeaturePropertiesV2Properties
 */
export interface FeaturePropertiesV2Properties {
    /**
     *
     * @type {AddendumV2}
     * @memberof FeaturePropertiesV2Properties
     */
    addendum?: AddendumV2 | null;
    /**
     *
     * @type {AddressComponentsV2}
     * @memberof FeaturePropertiesV2Properties
     */
    addressComponents?: AddressComponentsV2 | null;
    /**
     * The coarse-grained location of the place (e.g. Seoul, South Korea).
     *
     * In search experiences, this is typically the second line of a result cell.
     * @type {string}
     * @memberof FeaturePropertiesV2Properties
     */
    coarseLocation?: string | null;
    /**
     * The level of confidence (0.0 - 1.0) that the result is what you actually searched for.
     *
     * This is not necessarily the same as relevance (results are returned sorted by relevance already),
     * but rather how closely the explicit or inferred components match the result.
     * This is only present for forward geocoding responses (not autocomplete or place details).
     * @type {number}
     * @memberof FeaturePropertiesV2Properties
     */
    confidence?: number | null;
    /**
     *
     * @type {Context}
     * @memberof FeaturePropertiesV2Properties
     */
    context?: Context | null;
    /**
     * The distance from the search focus point, in kilometers.
     * @type {number}
     * @memberof FeaturePropertiesV2Properties
     */
    distance?: number | null;
    /**
     * The address formatted as a single line,
     * following local postal conventions for ordering and separators.
     * @type {string}
     * @memberof FeaturePropertiesV2Properties
     */
    formattedAddressLine?: string;
    /**
     * Address components split up into lines,
     * following local postal conventions for ordering and separators.
     * @type {Array<string>}
     * @memberof FeaturePropertiesV2Properties
     */
    formattedAddressLines?: Array<string>;
    /**
     * The globally unique identifier for this result.
     *
     * You can use this to uniquely identify a place,
     * and to get the full details from the place details endpoint.
     *
     * NOTE: While GIDs are unique, they may not necessarily be stable in all datasets.
     * @type {string}
     * @memberof FeaturePropertiesV2Properties
     */
    gid: string;
    /**
     * The data layer containing the place (e.g. "address" or "poi").
     * @type {string}
     * @memberof FeaturePropertiesV2Properties
     */
    layer: string;
    /**
     * The type of match (forward geocoding endpoints only).
     * @type {MatchType}
     * @memberof FeaturePropertiesV2Properties
     */
    matchType?: MatchType | null;
    /**
     * The best name for the place, accounting for request language preferences.
     *
     * When building an autocomplete search experience, this is the primary display string.
     * @type {string}
     * @memberof FeaturePropertiesV2Properties
     */
    name: string;
    /**
     *
     * @type {Precision}
     * @memberof FeaturePropertiesV2Properties
     */
    precision: Precision;
    /**
     * A list of sources from which the result is derived.
     * @type {Array<SourceAttribution>}
     * @memberof FeaturePropertiesV2Properties
     */
    sources?: Array<SourceAttribution>;
}
/**
 * Check if a given object implements the FeaturePropertiesV2Properties interface.
 */
export declare function instanceOfFeaturePropertiesV2Properties(value: object): value is FeaturePropertiesV2Properties;
export declare function FeaturePropertiesV2PropertiesFromJSON(json: any): FeaturePropertiesV2Properties;
export declare function FeaturePropertiesV2PropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeaturePropertiesV2Properties;
export declare function FeaturePropertiesV2PropertiesToJSON(json: any): FeaturePropertiesV2Properties;
export declare function FeaturePropertiesV2PropertiesToJSONTyped(value?: FeaturePropertiesV2Properties | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=FeaturePropertiesV2Properties.d.ts.map