import { CostingOptions } from './CostingOptions';
import { MatrixWaypoint } from './MatrixWaypoint';
import { MatrixCostingModel } from './MatrixCostingModel';
import { DistanceUnit } from './DistanceUnit';
import { RoutingLanguages } from './RoutingLanguages';
/**
 *
 * @export
 * @interface MatrixRequest
 */
export interface MatrixRequest {
    /**
     *
     * @type {DistanceUnit}
     * @memberof MatrixRequest
     */
    units?: DistanceUnit;
    /**
     *
     * @type {RoutingLanguages}
     * @memberof MatrixRequest
     */
    language?: RoutingLanguages;
    /**
     * The level of directional narrative to include. Locations and times will always be returned, but narrative generation verbosity can be controlled with this parameter.
     * @type {string}
     * @memberof MatrixRequest
     */
    directionsType?: MatrixRequestDirectionsTypeEnum;
    /**
     * An identifier to disambiguate requests (echoed by the server).
     * @type {string}
     * @memberof MatrixRequest
     */
    id?: string;
    /**
     * The list of starting locations
     * @type {Array<MatrixWaypoint>}
     * @memberof MatrixRequest
     */
    sources: Array<MatrixWaypoint>;
    /**
     * The list of ending locations
     * @type {Array<MatrixWaypoint>}
     * @memberof MatrixRequest
     */
    targets: Array<MatrixWaypoint>;
    /**
     *
     * @type {MatrixCostingModel}
     * @memberof MatrixRequest
     */
    costing: MatrixCostingModel;
    /**
     *
     * @type {CostingOptions}
     * @memberof MatrixRequest
     */
    costingOptions?: CostingOptions;
    /**
     * Only applicable to one-to-many or many-to-one requests. This defaults to all locations. When specified explicitly, this option allows a partial result to be returned. This is basically equivalent to "find the closest/best locations out of the full set." This can have a dramatic improvement for large requests.
     * @type {number}
     * @memberof MatrixRequest
     */
    matrixLocations?: number;
}
/**
 * @export
 */
export declare const MatrixRequestDirectionsTypeEnum: {
    readonly None: "none";
    readonly Maneuvers: "maneuvers";
    readonly Instructions: "instructions";
};
export type MatrixRequestDirectionsTypeEnum = (typeof MatrixRequestDirectionsTypeEnum)[keyof typeof MatrixRequestDirectionsTypeEnum];
/**
 * Check if a given object implements the MatrixRequest interface.
 */
export declare function instanceOfMatrixRequest(value: object): value is MatrixRequest;
export declare function MatrixRequestFromJSON(json: any): MatrixRequest;
export declare function MatrixRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): MatrixRequest;
export declare function MatrixRequestToJSON(json: any): MatrixRequest;
export declare function MatrixRequestToJSONTyped(value?: MatrixRequest | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=MatrixRequest.d.ts.map