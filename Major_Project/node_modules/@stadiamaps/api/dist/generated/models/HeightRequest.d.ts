import { Coordinate } from './Coordinate';
/**
 *
 * @export
 * @interface HeightRequest
 */
export interface HeightRequest {
    /**
     * An identifier to disambiguate requests (echoed by the server).
     * @type {string}
     * @memberof HeightRequest
     */
    id?: string;
    /**
     * REQUIRED if `encoded_polyline` is not present.
     * @type {Array<Coordinate>}
     * @memberof HeightRequest
     */
    shape?: Array<Coordinate>;
    /**
     * REQUIRED if `shape` is not present. An encoded polyline (https://developers.google.com/maps/documentation/utilities/polylinealgorithm).
     * @type {string}
     * @memberof HeightRequest
     */
    encodedPolyline?: string;
    /**
     * Specifies whether the polyline is encoded with 6 digit precision (polyline6) or 5 digit precision (polyline5).
     * @type {string}
     * @memberof HeightRequest
     */
    shapeFormat?: HeightRequestShapeFormatEnum;
    /**
     * Controls whether the returned array is one-dimensional (height only) or two-dimensional (with a range and height). The range dimension can be used to generate a graph or steepness gradient along a route.
     * @type {boolean}
     * @memberof HeightRequest
     */
    range?: boolean;
    /**
     * The decimal precision (number of digits after the point) of the output. When 0, integer values are returned. Valid values are 0, 1, and 2.
     * @type {number}
     * @memberof HeightRequest
     */
    heightPrecision?: number;
    /**
     * The distance at which the input polyline should be sampled to provide uniform distances between points. If not set, the input shape will be used as-is.
     * @type {number}
     * @memberof HeightRequest
     */
    resampleDistance?: number;
}
/**
 * @export
 */
export declare const HeightRequestShapeFormatEnum: {
    readonly Polyline6: "polyline6";
    readonly Polyline5: "polyline5";
};
export type HeightRequestShapeFormatEnum = (typeof HeightRequestShapeFormatEnum)[keyof typeof HeightRequestShapeFormatEnum];
/**
 * Check if a given object implements the HeightRequest interface.
 */
export declare function instanceOfHeightRequest(value: object): value is HeightRequest;
export declare function HeightRequestFromJSON(json: any): HeightRequest;
export declare function HeightRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): HeightRequest;
export declare function HeightRequestToJSON(json: any): HeightRequest;
export declare function HeightRequestToJSONTyped(value?: HeightRequest | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=HeightRequest.d.ts.map