import { GeocodingSource } from './GeocodingSource';
import { GeocodingLayer } from './GeocodingLayer';
/**
 *
 * @export
 * @interface SearchQuery
 */
export interface SearchQuery {
    /**
     * The place name (address, venue name, etc.) to search for.
     * @type {string}
     * @memberof SearchQuery
     */
    text?: string;
    /**
     * The latitude of the point to focus the search on. This will bias results toward the focus point. Requires `focus.point.lon`.
     * @type {number}
     * @memberof SearchQuery
     */
    focusPointLat?: number;
    /**
     * The longitude of the point to focus the search on. This will bias results toward the focus point. Requires `focus.point.lat`.
     * @type {number}
     * @memberof SearchQuery
     */
    focusPointLon?: number;
    /**
     * Defines the min latitude component of a bounding box to limit the search to. Requires all other `boundary.rect` parameters to be specified.
     * @type {number}
     * @memberof SearchQuery
     */
    boundaryRectMinLat?: number;
    /**
     * Defines the max latitude component of a bounding box to limit the search to. Requires all other `boundary.rect` parameters to be specified.
     * @type {number}
     * @memberof SearchQuery
     */
    boundaryRectMaxLat?: number;
    /**
     * Defines the min longitude component of a bounding box to limit the search to. Requires all other `boundary.rect` parameters to be specified.
     * @type {number}
     * @memberof SearchQuery
     */
    boundaryRectMinLon?: number;
    /**
     * Defines the max longitude component of a bounding box to limit the search to. Requires all other `boundary.rect` parameters to be specified.
     * @type {number}
     * @memberof SearchQuery
     */
    boundaryRectMaxLon?: number;
    /**
     * The latitude of the center of a circle to limit the search to. Requires `boundary.circle.lon`.
     * @type {number}
     * @memberof SearchQuery
     */
    boundaryCircleLat?: number;
    /**
     * The longitude of the center of a circle to limit the search to. Requires `boundary.circle.lat`.
     * @type {number}
     * @memberof SearchQuery
     */
    boundaryCircleLon?: number;
    /**
     * The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified.
     * @type {number}
     * @memberof SearchQuery
     */
    boundaryCircleRadius?: number;
    /**
     * A list of country codes in ISO 3116-1 alpha-2 or alpha-3 format.
     * @type {Array<string>}
     * @memberof SearchQuery
     */
    boundaryCountry?: Array<string>;
    /**
     * The GID of an area to limit the search to.
     * @type {string}
     * @memberof SearchQuery
     */
    boundaryGid?: string;
    /**
     * A list of layers to limit the search to.
     * @type {Array<GeocodingLayer>}
     * @memberof SearchQuery
     */
    layers?: Array<GeocodingLayer>;
    /**
     * A list of sources to limit the search to.
     * @type {Array<GeocodingSource>}
     * @memberof SearchQuery
     */
    sources?: Array<GeocodingSource>;
    /**
     * The maximum number of results to return.
     * @type {number}
     * @memberof SearchQuery
     */
    size?: number;
    /**
     * A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a `langtag` (in RFC 5646 terms) can contain script, region, etc., only the `language` portion, an ISO 639 code, will be considered. So `en-US` and `en-GB` will both be treated as English.
     * @type {string}
     * @memberof SearchQuery
     */
    lang?: string;
}
/**
 * Check if a given object implements the SearchQuery interface.
 */
export declare function instanceOfSearchQuery(value: object): value is SearchQuery;
export declare function SearchQueryFromJSON(json: any): SearchQuery;
export declare function SearchQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchQuery;
export declare function SearchQueryToJSON(json: any): SearchQuery;
export declare function SearchQueryToJSONTyped(value?: SearchQuery | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=SearchQuery.d.ts.map