/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 10.0.1
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface AutoCostingOptions
 */
export interface AutoCostingOptions {
    /**
     * A penalty (in seconds) applied when transitioning between roads (determined by name).
     * @type {number}
     * @memberof AutoCostingOptions
     */
    maneuverPenalty?: number;
    /**
     * The estimated cost (in seconds) when a gate is encountered.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    gateCost?: number;
    /**
     * A penalty (in seconds) applied to the route cost when a gate is encountered. This penalty can be used to reduce the likelihood of suggesting a route with gates unless absolutely necessary.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    gatePenalty?: number;
    /**
     * The estimated cost (in seconds) when encountering an international border.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    countryCrossingCost?: number;
    /**
     * A penalty applied to transitions to international border crossings. This penalty can be used to reduce the likelihood of suggesting a route with border crossings unless absolutely necessary.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    countryCrossingPenalty?: number;
    /**
     * A penalty applied to transitions to service roads. This penalty can be used to reduce the likelihood of suggesting a route with service roads unless absolutely necessary. The default penalty is 15 for cars, busses, motor scooters, and motorcycles; and zero for others.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    servicePenalty?: number;
    /**
     * A factor that multiplies the cost when service roads are encountered. The default is 1.2 for cars and busses, and 1 for trucks, motor scooters, and motorcycles.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    serviceFactor?: number;
    /**
     * A measure of willingness to take living streets. Values near 0 attempt to avoid them, and values near 1 will favour them. Note that as some routes may be impossible without living streets, 0 does not guarantee avoidance of them. The default value is 0 for trucks; 0.1 for other motor vehicles; 0.5 for bicycles; and 0.6 for pedestrians.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    useLivingStreets?: number;
    /**
     * A measure of willingness to take ferries. Values near 0 attempt to avoid ferries, and values near 1 will favour them. Note that as some routes may be impossible without ferries, 0 does not guarantee avoidance of them.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    useFerry?: number;
    /**
     * If set to true, ignores any restrictions (eg: turn and conditional restrictions). Useful for matching GPS traces to the road network regardless of restrictions.
     * @type {boolean}
     * @memberof AutoCostingOptions
     */
    ignoreRestrictions?: boolean;
    /**
     * If set to true, ignores most restrictions (eg: turn and conditional restrictions), but still respects restrictions that impact vehicle safety such as weight and size.
     * @type {boolean}
     * @memberof AutoCostingOptions
     */
    ignoreNonVehicularRestrictions?: boolean;
    /**
     * If set to true, ignores directional restrictions on roads. Useful for matching GPS traces to the road network regardless of restrictions.
     * @type {boolean}
     * @memberof AutoCostingOptions
     */
    ignoreOneways?: boolean;
    /**
     * The height of the automobile (in meters).
     * @type {number}
     * @memberof AutoCostingOptions
     */
    height?: number;
    /**
     * The width of the automobile (in meters).
     * @type {number}
     * @memberof AutoCostingOptions
     */
    width?: number;
    /**
     * The estimated cost (in seconds) when a toll booth is encountered.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    tollBoothCost?: number;
    /**
     * A penalty (in seconds) applied to the route cost when a toll booth is encountered. This penalty can be used to reduce the likelihood of suggesting a route with toll booths unless absolutely necessary.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    tollBoothPenalty?: number;
    /**
     * The estimated cost (in seconds) when a ferry is encountered.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    ferryCost?: number;
    /**
     * A measure of willingness to take highways. Values near 0 attempt to avoid highways, and values near 1 will favour them. Note that as some routes may be impossible without highways, 0 does not guarantee avoidance of them.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    useHighways?: number;
    /**
     * A measure of willingness to take toll roads. Values near 0 attempt to avoid tolls, and values near 1 will favour them. Note that as some routes may be impossible without tolls, 0 does not guarantee avoidance of them.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    useTolls?: number;
    /**
     * A measure of willingness to take track roads. Values near 0 attempt to avoid them, and values near 1 will favour them. Note that as some routes may be impossible without track roads, 0 does not guarantee avoidance of them. The default value is 0 for automobiles, busses, and trucks; and 0.5 for all other costing modes.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    useTracks?: number;
    /**
     * The top speed (in kph) that the vehicle is capable of travelling.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    topSpeed?: number;
    /**
     * If true changes the cost metric to be quasi-shortest (pure distance-based) costing. This will disable ALL other costing factors.
     * @type {boolean}
     * @memberof AutoCostingOptions
     */
    shortest?: boolean;
    /**
     * If true, ignores all known closures. This option cannot be set if `location.search_filter.exclude_closures` is also specified.
     * @type {boolean}
     * @memberof AutoCostingOptions
     */
    ignoreClosures?: boolean;
    /**
     * If true, indicates the desire to include HOV roads with a 2-occupant requirement in the route when advantageous.
     * @type {boolean}
     * @memberof AutoCostingOptions
     */
    includeHov2?: boolean;
    /**
     * If true, indicates the desire to include HOV roads with a 3-occupant requirement in the route when advantageous.
     * @type {boolean}
     * @memberof AutoCostingOptions
     */
    includeHov3?: boolean;
    /**
     * If true, indicates the desire to include toll roads which require the driver to pay a toll if the occupant requirement isn't met
     * @type {boolean}
     * @memberof AutoCostingOptions
     */
    includeHot?: boolean;
    /**
     * A factor that multiplies the cost when alleys are encountered.
     * @type {number}
     * @memberof AutoCostingOptions
     */
    alleyFactor?: number;
}
/**
 * Check if a given object implements the AutoCostingOptions interface.
 */
export declare function instanceOfAutoCostingOptions(value: object): value is AutoCostingOptions;
export declare function AutoCostingOptionsFromJSON(json: any): AutoCostingOptions;
export declare function AutoCostingOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutoCostingOptions;
export declare function AutoCostingOptionsToJSON(json: any): AutoCostingOptions;
export declare function AutoCostingOptionsToJSONTyped(value?: AutoCostingOptions | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=AutoCostingOptions.d.ts.map