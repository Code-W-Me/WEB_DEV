import { TraceAttributeKey } from './TraceAttributeKey';
/**
 *
 * @export
 * @interface TraceAttributeFilterOptions
 */
export interface TraceAttributeFilterOptions {
    /**
     *
     * @type {Array<TraceAttributeKey>}
     * @memberof TraceAttributeFilterOptions
     */
    attributes: Array<TraceAttributeKey>;
    /**
     * Determines whether the list of attributes will be used as a whitelist or a blacklist.
     * @type {string}
     * @memberof TraceAttributeFilterOptions
     */
    action: TraceAttributeFilterOptionsActionEnum;
}
/**
 * @export
 */
export declare const TraceAttributeFilterOptionsActionEnum: {
    readonly Include: "include";
    readonly Exclude: "exclude";
};
export type TraceAttributeFilterOptionsActionEnum = (typeof TraceAttributeFilterOptionsActionEnum)[keyof typeof TraceAttributeFilterOptionsActionEnum];
/**
 * Check if a given object implements the TraceAttributeFilterOptions interface.
 */
export declare function instanceOfTraceAttributeFilterOptions(value: object): value is TraceAttributeFilterOptions;
export declare function TraceAttributeFilterOptionsFromJSON(json: any): TraceAttributeFilterOptions;
export declare function TraceAttributeFilterOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TraceAttributeFilterOptions;
export declare function TraceAttributeFilterOptionsToJSON(json: any): TraceAttributeFilterOptions;
export declare function TraceAttributeFilterOptionsToJSONTyped(value?: TraceAttributeFilterOptions | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=TraceAttributeFilterOptions.d.ts.map