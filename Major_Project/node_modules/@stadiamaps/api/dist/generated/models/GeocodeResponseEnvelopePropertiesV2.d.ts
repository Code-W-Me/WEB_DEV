import { GeocodingMeta } from './GeocodingMeta';
import { FeaturePropertiesV2 } from './FeaturePropertiesV2';
/**
 * The GeoJSON response envelope.
 *
 * This is parameterized over the feature properties type
 * to allow for changes between versions.
 * @export
 * @interface GeocodeResponseEnvelopePropertiesV2
 */
export interface GeocodeResponseEnvelopePropertiesV2 {
    /**
     * The geographic bounding box covering all features in the result set.
     *
     * This is empty for autocomplete results.
     * @type {Array<number>}
     * @memberof GeocodeResponseEnvelopePropertiesV2
     */
    bbox?: Array<number> | null;
    /**
     *
     * @type {Array<FeaturePropertiesV2>}
     * @memberof GeocodeResponseEnvelopePropertiesV2
     */
    features: Array<FeaturePropertiesV2>;
    /**
     *
     * @type {GeocodingMeta}
     * @memberof GeocodeResponseEnvelopePropertiesV2
     */
    geocoding: GeocodingMeta;
    /**
     * The GeoJSON object type as defined in RFC 7946.
     *
     * NOTE: This is always FeatureCollection, as the response envelope is designed to hold multiple results.
     * @type {string}
     * @memberof GeocodeResponseEnvelopePropertiesV2
     */
    type: string;
}
/**
 * Check if a given object implements the GeocodeResponseEnvelopePropertiesV2 interface.
 */
export declare function instanceOfGeocodeResponseEnvelopePropertiesV2(value: object): value is GeocodeResponseEnvelopePropertiesV2;
export declare function GeocodeResponseEnvelopePropertiesV2FromJSON(json: any): GeocodeResponseEnvelopePropertiesV2;
export declare function GeocodeResponseEnvelopePropertiesV2FromJSONTyped(json: any, ignoreDiscriminator: boolean): GeocodeResponseEnvelopePropertiesV2;
export declare function GeocodeResponseEnvelopePropertiesV2ToJSON(json: any): GeocodeResponseEnvelopePropertiesV2;
export declare function GeocodeResponseEnvelopePropertiesV2ToJSONTyped(value?: GeocodeResponseEnvelopePropertiesV2 | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=GeocodeResponseEnvelopePropertiesV2.d.ts.map