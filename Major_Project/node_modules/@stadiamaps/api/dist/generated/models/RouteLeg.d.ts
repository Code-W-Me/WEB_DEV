import { RouteSummary } from './RouteSummary';
import { RouteManeuver } from './RouteManeuver';
/**
 *
 * @export
 * @interface RouteLeg
 */
export interface RouteLeg {
    /**
     *
     * @type {Array<RouteManeuver>}
     * @memberof RouteLeg
     */
    maneuvers?: Array<RouteManeuver>;
    /**
     * An encoded polyline (https://developers.google.com/maps/documentation/utilities/polylinealgorithm) with 6 digits of decimal precision (NOTE: Most implementations default to 5!).
     * @type {string}
     * @memberof RouteLeg
     */
    shape: string;
    /**
     *
     * @type {RouteSummary}
     * @memberof RouteLeg
     */
    summary: RouteSummary;
    /**
     * The sampling distance between elevation values along the route. This echoes the request parameter having the same name (converted to `units` if necessary).
     * @type {number}
     * @memberof RouteLeg
     */
    elevationInterval?: number;
    /**
     * An array of elevation values sampled every `elevation_interval`. Units are either metric or imperial depending on the value of `units`.
     * @type {Array<number>}
     * @memberof RouteLeg
     */
    elevation?: Array<number>;
}
/**
 * Check if a given object implements the RouteLeg interface.
 */
export declare function instanceOfRouteLeg(value: object): value is RouteLeg;
export declare function RouteLegFromJSON(json: any): RouteLeg;
export declare function RouteLegFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteLeg;
export declare function RouteLegToJSON(json: any): RouteLeg;
export declare function RouteLegToJSONTyped(value?: RouteLeg | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=RouteLeg.d.ts.map