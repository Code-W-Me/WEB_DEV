/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 10.0.1
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 */
export declare const TraceAttributeKey: {
    readonly EdgeNames: "edge.names";
    readonly EdgeLength: "edge.length";
    readonly EdgeSpeed: "edge.speed";
    readonly EdgeRoadClass: "edge.road_class";
    readonly EdgeBeginHeading: "edge.begin_heading";
    readonly EdgeEndHeading: "edge.end_heading";
    readonly EdgeBeginShapeIndex: "edge.begin_shape_index";
    readonly EdgeEndShapeIndex: "edge.end_shape_index";
    readonly EdgeTraversability: "edge.traversability";
    readonly EdgeUse: "edge.use";
    readonly EdgeToll: "edge.toll";
    readonly EdgeUnpaved: "edge.unpaved";
    readonly EdgeTunnel: "edge.tunnel";
    readonly EdgeBridge: "edge.bridge";
    readonly EdgeRoundabout: "edge.roundabout";
    readonly EdgeInternalIntersection: "edge.internal_intersection";
    readonly EdgeDriveOnRight: "edge.drive_on_right";
    readonly EdgeSurface: "edge.surface";
    readonly EdgeSignExitNumber: "edge.sign.exit_number";
    readonly EdgeSignExitBranch: "edge.sign.exit_branch";
    readonly EdgeSignExitToward: "edge.sign.exit_toward";
    readonly EdgeSignExitName: "edge.sign.exit_name";
    readonly EdgeTravelMode: "edge.travel_mode";
    readonly EdgeVehicleType: "edge.vehicle_type";
    readonly EdgePedestrianType: "edge.pedestrian_type";
    readonly EdgeBicycleType: "edge.bicycle_type";
    readonly EdgeTransitType: "edge.transit_type";
    readonly EdgeId: "edge.id";
    readonly EdgeWayId: "edge.way_id";
    readonly EdgeWeightedGrade: "edge.weighted_grade";
    readonly EdgeMaxUpwardGrade: "edge.max_upward_grade";
    readonly EdgeMaxDownwardGrade: "edge.max_downward_grade";
    readonly EdgeMeanElevation: "edge.mean_elevation";
    readonly EdgeLaneCount: "edge.lane_count";
    readonly EdgeCycleLane: "edge.cycle_lane";
    readonly EdgeBicycleNetwork: "edge.bicycle_network";
    readonly EdgeSacScale: "edge.sac_scale";
    readonly EdgeSidewalk: "edge.sidewalk";
    readonly EdgeDensity: "edge.density";
    readonly EdgeSpeedLimit: "edge.speed_limit";
    readonly EdgeTruckSpeed: "edge.truck_speed";
    readonly EdgeTruckRoute: "edge.truck_route";
    readonly NodeIntersectingEdgeBeginHeading: "node.intersecting_edge.begin_heading";
    readonly NodeIntersectingEdgeFromEdgeNameConsistency: "node.intersecting_edge.from_edge_name_consistency";
    readonly NodeIntersectingEdgeToEdgeNameConsistency: "node.intersecting_edge.to_edge_name_consistency";
    readonly NodeIntersectingEdgeDriveability: "node.intersecting_edge.driveability";
    readonly NodeIntersectingEdgeCyclability: "node.intersecting_edge.cyclability";
    readonly NodeIntersectingEdgeWalkability: "node.intersecting_edge.walkability";
    readonly NodeIntersectingEdgeUse: "node.intersecting_edge.use";
    readonly NodeIntersectingEdgeRoadClass: "node.intersecting_edge.road_class";
    readonly NodeElapsedTime: "node.elapsed_time";
    readonly NodeAdminIndex: "node.admin_index";
    readonly NodeType: "node.type";
    readonly NodeFork: "node.fork";
    readonly NodeTimeZone: "node.time_zone";
    readonly OsmChangeset: "osm_changeset";
    readonly Shape: "shape";
    readonly AdminCountryCode: "admin.country_code";
    readonly AdminCountryText: "admin.country_text";
    readonly AdminStateCode: "admin.state_code";
    readonly AdminStateText: "admin.state_text";
    readonly MatchedPoint: "matched.point";
    readonly MatchedType: "matched.type";
    readonly MatchedEdgeIndex: "matched.edge_index";
    readonly MatchedBeginRouteDiscontinuity: "matched.begin_route_discontinuity";
    readonly MatchedEndRouteDiscontinuity: "matched.end_route_discontinuity";
    readonly MatchedDistanceAlongEdge: "matched.distance_along_edge";
    readonly MatchedDistanceFromTracePoint: "matched.distance_from_trace_point";
};
export type TraceAttributeKey = (typeof TraceAttributeKey)[keyof typeof TraceAttributeKey];
export declare function instanceOfTraceAttributeKey(value: any): boolean;
export declare function TraceAttributeKeyFromJSON(json: any): TraceAttributeKey;
export declare function TraceAttributeKeyFromJSONTyped(json: any, ignoreDiscriminator: boolean): TraceAttributeKey;
export declare function TraceAttributeKeyToJSON(value?: TraceAttributeKey | null): any;
export declare function TraceAttributeKeyToJSONTyped(value: any, ignoreDiscriminator: boolean): TraceAttributeKey;
//# sourceMappingURL=TraceAttributeKey.d.ts.map