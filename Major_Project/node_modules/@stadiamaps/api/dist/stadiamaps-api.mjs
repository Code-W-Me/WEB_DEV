const ti = "https://api.stadiamaps.com".replace(/\/+$/, "");
class ri {
  constructor(i = {}) {
    this.configuration = i;
  }
  set config(i) {
    this.configuration = i;
  }
  get basePath() {
    return this.configuration.basePath != null ? this.configuration.basePath : ti;
  }
  get fetchApi() {
    return this.configuration.fetchApi;
  }
  get middleware() {
    return this.configuration.middleware || [];
  }
  get queryParamsStringify() {
    return this.configuration.queryParamsStringify || _e;
  }
  get username() {
    return this.configuration.username;
  }
  get password() {
    return this.configuration.password;
  }
  get apiKey() {
    const i = this.configuration.apiKey;
    if (i)
      return typeof i == "function" ? i : () => i;
  }
  get accessToken() {
    const i = this.configuration.accessToken;
    if (i)
      return typeof i == "function" ? i : async () => i;
  }
  get headers() {
    return this.configuration.headers;
  }
  get credentials() {
    return this.configuration.credentials;
  }
}
const oi = new ri(), x = class x {
  constructor(i = oi) {
    this.configuration = i, this.fetchApi = async (t, n) => {
      let r = { url: t, init: n };
      for (const c of this.middleware)
        c.pre && (r = await c.pre({
          fetch: this.fetchApi,
          ...r
        }) || r);
      let o;
      try {
        o = await (this.configuration.fetchApi || fetch)(
          r.url,
          r.init
        );
      } catch (c) {
        for (const f of this.middleware)
          f.onError && (o = await f.onError({
            fetch: this.fetchApi,
            url: r.url,
            init: r.init,
            error: c,
            response: o ? o.clone() : void 0
          }) || o);
        if (o === void 0)
          throw c instanceof Error ? new di(
            c,
            "The request failed and the interceptors did not return an alternative response"
          ) : c;
      }
      for (const c of this.middleware)
        c.post && (o = await c.post({
          fetch: this.fetchApi,
          url: r.url,
          init: r.init,
          response: o.clone()
        }) || o);
      return o;
    }, this.middleware = i.middleware;
  }
  withMiddleware(...i) {
    const t = this.clone();
    return t.middleware = t.middleware.concat(...i), t;
  }
  withPreMiddleware(...i) {
    const t = i.map((n) => ({ pre: n }));
    return this.withMiddleware(...t);
  }
  withPostMiddleware(...i) {
    const t = i.map((n) => ({ post: n }));
    return this.withMiddleware(...t);
  }
  /**
   * Check if the given MIME is a JSON MIME.
   * JSON MIME examples:
   *   application/json
   *   application/json; charset=UTF8
   *   APPLICATION/JSON
   *   application/vnd.company+json
   * @param mime - MIME (Multipurpose Internet Mail Extensions)
   * @return True if the given MIME is JSON, false otherwise.
   */
  isJsonMime(i) {
    return i ? x.jsonRegex.test(i) : !1;
  }
  async request(i, t) {
    const { url: n, init: r } = await this.createFetchParams(i, t), o = await this.fetchApi(n, r);
    if (o && o.status >= 200 && o.status < 300)
      return o;
    throw new ui(o, "Response returned an error code");
  }
  async createFetchParams(i, t) {
    let n = this.configuration.basePath + i.path;
    i.query !== void 0 && Object.keys(i.query).length !== 0 && (n += "?" + this.configuration.queryParamsStringify(i.query));
    const r = Object.assign(
      {},
      this.configuration.headers,
      i.headers
    );
    Object.keys(r).forEach(
      (de) => r[de] === void 0 ? delete r[de] : {}
    );
    const o = typeof t == "function" ? t : async () => t, c = {
      method: i.method,
      headers: r,
      body: i.body,
      credentials: this.configuration.credentials
    }, f = {
      ...c,
      ...await o({
        init: c,
        context: i
      })
    };
    let S;
    ai(f.body) || f.body instanceof URLSearchParams || ci(f.body) ? S = f.body : this.isJsonMime(r["Content-Type"]) ? S = JSON.stringify(f.body) : S = f.body;
    const ni = {
      ...f,
      body: S
    };
    return { url: n, init: ni };
  }
  /**
   * Create a shallow clone of `this` by constructing a new instance
   * and then shallow cloning data members.
   */
  clone() {
    const i = this.constructor, t = new i(this.configuration);
    return t.middleware = this.middleware.slice(), t;
  }
};
x.jsonRegex = new RegExp(
  "^(:?application/json|[^;/ 	]+/[^;/ 	]+[+]json)[ 	]*(:?;.*)?$",
  "i"
);
let b = x;
function ci(e) {
  return typeof Blob < "u" && e instanceof Blob;
}
function ai(e) {
  return typeof FormData < "u" && e instanceof FormData;
}
class ui extends Error {
  constructor(i, t) {
    super(t), this.response = i, this.name = "ResponseError";
  }
}
class di extends Error {
  constructor(i, t) {
    super(t), this.cause = i, this.name = "FetchError";
  }
}
class s extends Error {
  constructor(i, t) {
    super(t), this.field = i, this.name = "RequiredError";
  }
}
const a = {
  csv: ",",
  ssv: " ",
  tsv: "	",
  pipes: "|"
};
function _e(e, i = "") {
  return Object.keys(e).map((t) => he(t, e[t], i)).filter((t) => t.length > 0).join("&");
}
function he(e, i, t = "") {
  const n = t + (t.length ? `[${e}]` : e);
  if (i instanceof Array) {
    const r = i.map((o) => encodeURIComponent(String(o))).join(`&${encodeURIComponent(n)}=`);
    return `${encodeURIComponent(n)}=${r}`;
  }
  if (i instanceof Set) {
    const r = Array.from(i);
    return he(e, r, t);
  }
  return i instanceof Date ? `${encodeURIComponent(n)}=${encodeURIComponent(i.toISOString())}` : i instanceof Object ? _e(i, n) : `${encodeURIComponent(n)}=${encodeURIComponent(String(i))}`;
}
function Du(e, i) {
  const t = e[i];
  return t != null;
}
function Mu(e, i) {
  const t = {};
  for (const n of Object.keys(e))
    t[n] = i(e[n]);
  return t;
}
function Lu(e) {
  for (const i of e)
    if (i.contentType === "multipart/form-data")
      return !0;
  return !1;
}
class u {
  constructor(i, t = (n) => n) {
    this.raw = i, this.transformer = t;
  }
  async value() {
    return this.transformer(await this.raw.json());
  }
}
class Iu {
  constructor(i) {
    this.raw = i;
  }
  async value() {
  }
}
class Eu {
  constructor(i) {
    this.raw = i;
  }
  async value() {
    return await this.raw.blob();
  }
}
class Au {
  constructor(i) {
    this.raw = i;
  }
  async value() {
    return await this.raw.text();
  }
}
function Gu(e) {
  return !0;
}
function li(e) {
  return si(e);
}
function si(e, i) {
  return e == null ? e : {
    golfCart: e.golf_cart == null ? void 0 : e.golf_cart,
    wheelchair: e.wheelchair == null ? void 0 : e.wheelchair,
    taxi: e.taxi == null ? void 0 : e.taxi,
    hOV: e.HOV == null ? void 0 : e.HOV,
    truck: e.truck == null ? void 0 : e.truck,
    emergency: e.emergency == null ? void 0 : e.emergency,
    pedestrian: e.pedestrian == null ? void 0 : e.pedestrian,
    car: e.car == null ? void 0 : e.car,
    bus: e.bus == null ? void 0 : e.bus,
    bicycle: e.bicycle == null ? void 0 : e.bicycle,
    motorcycle: e.motorcycle == null ? void 0 : e.motorcycle,
    moped: e.moped == null ? void 0 : e.moped
  };
}
function fi(e) {
  return pi(e, !1);
}
function pi(e, i = !1) {
  return e == null ? e : {
    golf_cart: e.golfCart,
    wheelchair: e.wheelchair,
    taxi: e.taxi,
    HOV: e.hOV,
    truck: e.truck,
    emergency: e.emergency,
    pedestrian: e.pedestrian,
    car: e.car,
    bus: e.bus,
    bicycle: e.bicycle,
    motorcycle: e.motorcycle,
    moped: e.moped
  };
}
function Bu(e) {
  return !0;
}
function gi(e) {
  return yi(e);
}
function yi(e, i) {
  return e == null ? e : {
    tel: e.tel == null ? void 0 : e.tel,
    website: e.website == null ? void 0 : e.website
  };
}
function mi(e) {
  return _i(e, !1);
}
function _i(e, i = !1) {
  return e == null ? e : {
    tel: e.tel,
    website: e.website
  };
}
function Pu(e) {
  return !0;
}
function hi(e) {
  return Oi(e);
}
function Oi(e, i) {
  return e == null ? e : {
    eurographicsGiscoId: e.eurographics_gisco_id == null ? void 0 : e.eurographics_gisco_id,
    faaCode: e.faa_code == null ? void 0 : e.faa_code,
    factualId: e.factual_id == null ? void 0 : e.factual_id,
    fifaId: e.fifa_id == null ? void 0 : e.fifa_id,
    fipsCode: e.fips_code == null ? void 0 : e.fips_code,
    frGovEpciCode: e.fr_gov_epci_code == null ? void 0 : e.fr_gov_epci_code,
    fraInseeCode: e.fra_insee_code == null ? void 0 : e.fra_insee_code,
    geonamesId: e.geonames_id == null ? void 0 : e.geonames_id,
    geoplanetId: e.geoplanet_id == null ? void 0 : e.geoplanet_id,
    hascId: e.hasc_id == null ? void 0 : e.hasc_id,
    iataCode: e.iata_code == null ? void 0 : e.iata_code,
    icaoCode: e.icao_code == null ? void 0 : e.icao_code,
    ituId: e.itu_id == null ? void 0 : e.itu_id,
    karmashapesId: e.karmashapes_id == null ? void 0 : e.karmashapes_id,
    naturalEarthId: e.natural_earth_id == null ? void 0 : e.natural_earth_id,
    nuts2021Id: e.nuts_2021_id == null ? void 0 : e.nuts_2021_id,
    quattroshapesId: e.quattroshapes_id == null ? void 0 : e.quattroshapes_id,
    quattroshapesPgId: e.quattroshapes_pg_id == null ? void 0 : e.quattroshapes_pg_id,
    usCensusGeoId: e.us_census_geo_id == null ? void 0 : e.us_census_geo_id,
    wikidataId: e.wikidata_id == null ? void 0 : e.wikidata_id,
    wikipediaPage: e.wikipedia_page == null ? void 0 : e.wikipedia_page
  };
}
function bi(e) {
  return Si(e, !1);
}
function Si(e, i = !1) {
  return e == null ? e : {
    eurographics_gisco_id: e.eurographicsGiscoId,
    faa_code: e.faaCode,
    factual_id: e.factualId,
    fifa_id: e.fifaId,
    fips_code: e.fipsCode,
    fr_gov_epci_code: e.frGovEpciCode,
    fra_insee_code: e.fraInseeCode,
    geonames_id: e.geonamesId,
    geoplanet_id: e.geoplanetId,
    hasc_id: e.hascId,
    iata_code: e.iataCode,
    icao_code: e.icaoCode,
    itu_id: e.ituId,
    karmashapes_id: e.karmashapesId,
    natural_earth_id: e.naturalEarthId,
    nuts_2021_id: e.nuts2021Id,
    quattroshapes_id: e.quattroshapesId,
    quattroshapes_pg_id: e.quattroshapesPgId,
    us_census_geo_id: e.usCensusGeoId,
    wikidata_id: e.wikidataId,
    wikipedia_page: e.wikipediaPage
  };
}
function Vu(e) {
  return !0;
}
function Ti(e) {
  return Ni(e);
}
function Ni(e, i) {
  return e == null ? e : {
    brand: e.brand == null ? void 0 : e.brand,
    iata: e.iata == null ? void 0 : e.iata,
    icao: e.icao == null ? void 0 : e.icao,
    openingHours: e.opening_hours == null ? void 0 : e.opening_hours,
    operator: e.operator == null ? void 0 : e.operator,
    phone: e.phone == null ? void 0 : e.phone,
    website: e.website == null ? void 0 : e.website,
    wheelchair: e.wheelchair == null ? void 0 : e.wheelchair,
    wikidata: e.wikidata == null ? void 0 : e.wikidata,
    wikipedia: e.wikipedia == null ? void 0 : e.wikipedia
  };
}
function wi(e) {
  return Ri(e, !1);
}
function Ri(e, i = !1) {
  return e == null ? e : {
    brand: e.brand,
    iata: e.iata,
    icao: e.icao,
    opening_hours: e.openingHours,
    operator: e.operator,
    phone: e.phone,
    website: e.website,
    wheelchair: e.wheelchair,
    wikidata: e.wikidata,
    wikipedia: e.wikipedia
  };
}
function Hu(e) {
  return !(!("featureCode" in e) || e.featureCode === void 0);
}
function Ji(e) {
  return xi(e);
}
function xi(e, i) {
  return e == null ? e : {
    featureCode: e.feature_code
  };
}
function Ci(e) {
  return Fi(e, !1);
}
function Fi(e, i = !1) {
  return e == null ? e : {
    feature_code: e.featureCode
  };
}
function Wu(e) {
  return !0;
}
function Oe(e) {
  return vi(e);
}
function vi(e, i) {
  return e == null ? e : {
    foursquare: e.foursquare == null ? void 0 : gi(e.foursquare),
    geonames: e.geonames == null ? void 0 : Ji(e.geonames),
    osm: e.osm == null ? void 0 : Ti(e.osm),
    whosonfirstConcordances: e.whosonfirst_concordances == null ? void 0 : hi(e.whosonfirst_concordances)
  };
}
function be(e) {
  return ki(e, !1);
}
function ki(e, i = !1) {
  return e == null ? e : {
    foursquare: mi(e.foursquare),
    geonames: Ci(e.geonames),
    osm: wi(e.osm),
    whosonfirst_concordances: bi(
      e.whosonfirstConcordances
    )
  };
}
function zu(e) {
  return !0;
}
function Se(e) {
  return Di(e);
}
function Di(e, i) {
  return e == null ? e : {
    crossStreet: e.cross_street == null ? void 0 : e.cross_street,
    number: e.number == null ? void 0 : e.number,
    postalCode: e.postal_code == null ? void 0 : e.postal_code,
    street: e.street == null ? void 0 : e.street,
    unit: e.unit == null ? void 0 : e.unit
  };
}
function Te(e) {
  return Mi(e, !1);
}
function Mi(e, i = !1) {
  return e == null ? e : {
    cross_street: e.crossStreet,
    number: e.number,
    postal_code: e.postalCode,
    street: e.street,
    unit: e.unit
  };
}
function Uu(e) {
  return !0;
}
function Ne(e) {
  return Li(e);
}
function Li(e, i) {
  return e == null ? e : {
    countryCode: e.country_code == null ? void 0 : e.country_code,
    countryText: e.country_text == null ? void 0 : e.country_text,
    stateCode: e.state_code == null ? void 0 : e.state_code,
    stateText: e.state_text == null ? void 0 : e.state_text
  };
}
function we(e) {
  return Ii(e, !1);
}
function Ii(e, i = !1) {
  return e == null ? e : {
    country_code: e.countryCode,
    country_text: e.countryText,
    state_code: e.stateCode,
    state_text: e.stateText
  };
}
function Ku(e) {
  return !0;
}
function Ei(e) {
  return Ai(e);
}
function Ai(e, i) {
  return e == null ? e : {
    iso31661: e["iso_3166-1"] == null ? void 0 : e["iso_3166-1"],
    country: e.country == null ? void 0 : e.country,
    iso31662: e["iso_3166-2"] == null ? void 0 : e["iso_3166-2"],
    state: e.state == null ? void 0 : e.state
  };
}
function Gi(e) {
  return Bi(e, !1);
}
function Bi(e, i = !1) {
  return e == null ? e : {
    "iso_3166-1": e.iso31661,
    country: e.country,
    "iso_3166-2": e.iso31662,
    state: e.state
  };
}
const Qu = {
  Include: "include",
  Exclude: "exclude"
}, $u = {
  ShapeAttributesSpeed: "shape_attributes.speed",
  ShapeAttributesSpeedLimit: "shape_attributes.speed_limit",
  ShapeAttributesTime: "shape_attributes.time",
  ShapeAttributesLength: "shape_attributes.length"
};
function Zu(e) {
  return !0;
}
function C(e) {
  return Pi(e);
}
function Pi(e, i) {
  return e == null ? e : {
    action: e.action == null ? void 0 : e.action,
    attributes: e.attributes == null ? void 0 : e.attributes
  };
}
function F(e) {
  return Vi(e, !1);
}
function Vi(e, i = !1) {
  return e == null ? e : {
    action: e.action,
    attributes: e.attributes
  };
}
function Xu(e) {
  return !0;
}
function v(e) {
  return Hi(e);
}
function Hi(e, i) {
  return e == null ? e : {
    maneuverPenalty: e.maneuver_penalty == null ? void 0 : e.maneuver_penalty,
    gateCost: e.gate_cost == null ? void 0 : e.gate_cost,
    gatePenalty: e.gate_penalty == null ? void 0 : e.gate_penalty,
    countryCrossingCost: e.country_crossing_cost == null ? void 0 : e.country_crossing_cost,
    countryCrossingPenalty: e.country_crossing_penalty == null ? void 0 : e.country_crossing_penalty,
    servicePenalty: e.service_penalty == null ? void 0 : e.service_penalty,
    serviceFactor: e.service_factor == null ? void 0 : e.service_factor,
    useLivingStreets: e.use_living_streets == null ? void 0 : e.use_living_streets,
    useFerry: e.use_ferry == null ? void 0 : e.use_ferry,
    ignoreRestrictions: e.ignore_restrictions == null ? void 0 : e.ignore_restrictions,
    ignoreNonVehicularRestrictions: e.ignore_non_vehicular_restrictions == null ? void 0 : e.ignore_non_vehicular_restrictions,
    ignoreOneways: e.ignore_oneways == null ? void 0 : e.ignore_oneways,
    height: e.height == null ? void 0 : e.height,
    width: e.width == null ? void 0 : e.width,
    tollBoothCost: e.toll_booth_cost == null ? void 0 : e.toll_booth_cost,
    tollBoothPenalty: e.toll_booth_penalty == null ? void 0 : e.toll_booth_penalty,
    ferryCost: e.ferry_cost == null ? void 0 : e.ferry_cost,
    useHighways: e.use_highways == null ? void 0 : e.use_highways,
    useTolls: e.use_tolls == null ? void 0 : e.use_tolls,
    useTracks: e.use_tracks == null ? void 0 : e.use_tracks,
    topSpeed: e.top_speed == null ? void 0 : e.top_speed,
    shortest: e.shortest == null ? void 0 : e.shortest,
    ignoreClosures: e.ignore_closures == null ? void 0 : e.ignore_closures,
    includeHov2: e.include_hov2 == null ? void 0 : e.include_hov2,
    includeHov3: e.include_hov3 == null ? void 0 : e.include_hov3,
    includeHot: e.include_hot == null ? void 0 : e.include_hot,
    alleyFactor: e.alley_factor == null ? void 0 : e.alley_factor
  };
}
function k(e) {
  return Wi(e, !1);
}
function Wi(e, i = !1) {
  return e == null ? e : {
    maneuver_penalty: e.maneuverPenalty,
    gate_cost: e.gateCost,
    gate_penalty: e.gatePenalty,
    country_crossing_cost: e.countryCrossingCost,
    country_crossing_penalty: e.countryCrossingPenalty,
    service_penalty: e.servicePenalty,
    service_factor: e.serviceFactor,
    use_living_streets: e.useLivingStreets,
    use_ferry: e.useFerry,
    ignore_restrictions: e.ignoreRestrictions,
    ignore_non_vehicular_restrictions: e.ignoreNonVehicularRestrictions,
    ignore_oneways: e.ignoreOneways,
    height: e.height,
    width: e.width,
    toll_booth_cost: e.tollBoothCost,
    toll_booth_penalty: e.tollBoothPenalty,
    ferry_cost: e.ferryCost,
    use_highways: e.useHighways,
    use_tolls: e.useTolls,
    use_tracks: e.useTracks,
    top_speed: e.topSpeed,
    shortest: e.shortest,
    ignore_closures: e.ignoreClosures,
    include_hov2: e.includeHov2,
    include_hov3: e.includeHov3,
    include_hot: e.includeHot,
    alley_factor: e.alleyFactor
  };
}
function Yu(e) {
  return !0;
}
function qu(e) {
  return zi(e);
}
function zi(e, i) {
  return e == null ? e : {
    maneuverPenalty: e.maneuver_penalty == null ? void 0 : e.maneuver_penalty,
    gateCost: e.gate_cost == null ? void 0 : e.gate_cost,
    gatePenalty: e.gate_penalty == null ? void 0 : e.gate_penalty,
    countryCrossingCost: e.country_crossing_cost == null ? void 0 : e.country_crossing_cost,
    countryCrossingPenalty: e.country_crossing_penalty == null ? void 0 : e.country_crossing_penalty,
    servicePenalty: e.service_penalty == null ? void 0 : e.service_penalty,
    serviceFactor: e.service_factor == null ? void 0 : e.service_factor,
    useLivingStreets: e.use_living_streets == null ? void 0 : e.use_living_streets,
    useFerry: e.use_ferry == null ? void 0 : e.use_ferry,
    ignoreRestrictions: e.ignore_restrictions == null ? void 0 : e.ignore_restrictions,
    ignoreNonVehicularRestrictions: e.ignore_non_vehicular_restrictions == null ? void 0 : e.ignore_non_vehicular_restrictions,
    ignoreOneways: e.ignore_oneways == null ? void 0 : e.ignore_oneways
  };
}
function ju(e) {
  return Ui(e, !1);
}
function Ui(e, i = !1) {
  return e == null ? e : {
    maneuver_penalty: e.maneuverPenalty,
    gate_cost: e.gateCost,
    gate_penalty: e.gatePenalty,
    country_crossing_cost: e.countryCrossingCost,
    country_crossing_penalty: e.countryCrossingPenalty,
    service_penalty: e.servicePenalty,
    service_factor: e.serviceFactor,
    use_living_streets: e.useLivingStreets,
    use_ferry: e.useFerry,
    ignore_restrictions: e.ignoreRestrictions,
    ignore_non_vehicular_restrictions: e.ignoreNonVehicularRestrictions,
    ignore_oneways: e.ignoreOneways
  };
}
function ed(e) {
  return !0;
}
function Ki(e) {
  return Qi(e);
}
function Qi(e, i) {
  return e == null ? e : {
    maneuverPenalty: e.maneuver_penalty == null ? void 0 : e.maneuver_penalty,
    gateCost: e.gate_cost == null ? void 0 : e.gate_cost,
    gatePenalty: e.gate_penalty == null ? void 0 : e.gate_penalty,
    countryCrossingCost: e.country_crossing_cost == null ? void 0 : e.country_crossing_cost,
    countryCrossingPenalty: e.country_crossing_penalty == null ? void 0 : e.country_crossing_penalty,
    servicePenalty: e.service_penalty == null ? void 0 : e.service_penalty,
    serviceFactor: e.service_factor == null ? void 0 : e.service_factor,
    useLivingStreets: e.use_living_streets == null ? void 0 : e.use_living_streets,
    useFerry: e.use_ferry == null ? void 0 : e.use_ferry,
    ignoreRestrictions: e.ignore_restrictions == null ? void 0 : e.ignore_restrictions,
    ignoreNonVehicularRestrictions: e.ignore_non_vehicular_restrictions == null ? void 0 : e.ignore_non_vehicular_restrictions,
    ignoreOneways: e.ignore_oneways == null ? void 0 : e.ignore_oneways,
    height: e.height == null ? void 0 : e.height,
    width: e.width == null ? void 0 : e.width,
    tollBoothCost: e.toll_booth_cost == null ? void 0 : e.toll_booth_cost,
    tollBoothPenalty: e.toll_booth_penalty == null ? void 0 : e.toll_booth_penalty,
    ferryCost: e.ferry_cost == null ? void 0 : e.ferry_cost,
    useHighways: e.use_highways == null ? void 0 : e.use_highways,
    useTolls: e.use_tolls == null ? void 0 : e.use_tolls,
    useTracks: e.use_tracks == null ? void 0 : e.use_tracks,
    topSpeed: e.top_speed == null ? void 0 : e.top_speed,
    shortest: e.shortest == null ? void 0 : e.shortest,
    ignoreClosures: e.ignore_closures == null ? void 0 : e.ignore_closures,
    includeHov2: e.include_hov2 == null ? void 0 : e.include_hov2,
    includeHov3: e.include_hov3 == null ? void 0 : e.include_hov3,
    includeHot: e.include_hot == null ? void 0 : e.include_hot,
    alleyFactor: e.alley_factor == null ? void 0 : e.alley_factor,
    usePrimary: e.use_primary == null ? void 0 : e.use_primary,
    useHills: e.use_hills == null ? void 0 : e.use_hills
  };
}
function $i(e) {
  return Zi(e, !1);
}
function Zi(e, i = !1) {
  return e == null ? e : {
    maneuver_penalty: e.maneuverPenalty,
    gate_cost: e.gateCost,
    gate_penalty: e.gatePenalty,
    country_crossing_cost: e.countryCrossingCost,
    country_crossing_penalty: e.countryCrossingPenalty,
    service_penalty: e.servicePenalty,
    service_factor: e.serviceFactor,
    use_living_streets: e.useLivingStreets,
    use_ferry: e.useFerry,
    ignore_restrictions: e.ignoreRestrictions,
    ignore_non_vehicular_restrictions: e.ignoreNonVehicularRestrictions,
    ignore_oneways: e.ignoreOneways,
    height: e.height,
    width: e.width,
    toll_booth_cost: e.tollBoothCost,
    toll_booth_penalty: e.tollBoothPenalty,
    ferry_cost: e.ferryCost,
    use_highways: e.useHighways,
    use_tolls: e.useTolls,
    use_tracks: e.useTracks,
    top_speed: e.topSpeed,
    shortest: e.shortest,
    ignore_closures: e.ignoreClosures,
    include_hov2: e.includeHov2,
    include_hov3: e.includeHov3,
    include_hot: e.includeHot,
    alley_factor: e.alleyFactor,
    use_primary: e.usePrimary,
    use_hills: e.useHills
  };
}
const D = {
  Foot: "foot",
  Blind: "blind",
  Wheelchair: "wheelchair"
};
function id(e) {
  for (const i in D)
    if (Object.prototype.hasOwnProperty.call(D, i) && D[i] === e)
      return !0;
  return !1;
}
function Xi(e) {
  return Yi(e);
}
function Yi(e, i) {
  return e;
}
function nd(e) {
  return e;
}
function td(e, i) {
  return e;
}
function rd(e) {
  return !0;
}
function qi(e) {
  return ji(e);
}
function ji(e, i) {
  return e == null ? e : {
    walkingSpeed: e.walking_speed == null ? void 0 : e.walking_speed,
    walkwayFactor: e.walkway_factor == null ? void 0 : e.walkway_factor,
    sidewalkFactor: e.sidewalk_factor == null ? void 0 : e.sidewalk_factor,
    alleyFactor: e.alley_factor == null ? void 0 : e.alley_factor,
    drivewayFactor: e.driveway_factor == null ? void 0 : e.driveway_factor,
    stepPenalty: e.step_penalty == null ? void 0 : e.step_penalty,
    useFerry: e.use_ferry == null ? void 0 : e.use_ferry,
    useLivingStreets: e.use_living_streets == null ? void 0 : e.use_living_streets,
    useTracks: e.use_tracks == null ? void 0 : e.use_tracks,
    useHills: e.use_hills == null ? void 0 : e.use_hills,
    useLit: e.use_lit == null ? void 0 : e.use_lit,
    servicePenalty: e.service_penalty == null ? void 0 : e.service_penalty,
    serviceFactor: e.service_factor == null ? void 0 : e.service_factor,
    maxHikingDifficulty: e.max_hiking_difficulty == null ? void 0 : e.max_hiking_difficulty,
    bssRentCost: e.bss_rent_cost == null ? void 0 : e.bss_rent_cost,
    bssRentPenalty: e.bss_rent_penalty == null ? void 0 : e.bss_rent_penalty,
    type: e.type == null ? void 0 : Xi(e.type)
  };
}
function en(e) {
  return nn(e, !1);
}
function nn(e, i = !1) {
  return e == null ? e : {
    walking_speed: e.walkingSpeed,
    walkway_factor: e.walkwayFactor,
    sidewalk_factor: e.sidewalkFactor,
    alley_factor: e.alleyFactor,
    driveway_factor: e.drivewayFactor,
    step_penalty: e.stepPenalty,
    use_ferry: e.useFerry,
    use_living_streets: e.useLivingStreets,
    use_tracks: e.useTracks,
    use_hills: e.useHills,
    use_lit: e.useLit,
    service_penalty: e.servicePenalty,
    service_factor: e.serviceFactor,
    max_hiking_difficulty: e.maxHikingDifficulty,
    bss_rent_cost: e.bssRentCost,
    bss_rent_penalty: e.bssRentPenalty,
    type: e.type
  };
}
function od(e) {
  return !0;
}
function tn(e) {
  return rn(e);
}
function rn(e, i) {
  return e == null ? e : {
    maneuverPenalty: e.maneuver_penalty == null ? void 0 : e.maneuver_penalty,
    gateCost: e.gate_cost == null ? void 0 : e.gate_cost,
    gatePenalty: e.gate_penalty == null ? void 0 : e.gate_penalty,
    countryCrossingCost: e.country_crossing_cost == null ? void 0 : e.country_crossing_cost,
    countryCrossingPenalty: e.country_crossing_penalty == null ? void 0 : e.country_crossing_penalty,
    servicePenalty: e.service_penalty == null ? void 0 : e.service_penalty,
    serviceFactor: e.service_factor == null ? void 0 : e.service_factor,
    useLivingStreets: e.use_living_streets == null ? void 0 : e.use_living_streets,
    useFerry: e.use_ferry == null ? void 0 : e.use_ferry,
    ignoreRestrictions: e.ignore_restrictions == null ? void 0 : e.ignore_restrictions,
    ignoreNonVehicularRestrictions: e.ignore_non_vehicular_restrictions == null ? void 0 : e.ignore_non_vehicular_restrictions,
    ignoreOneways: e.ignore_oneways == null ? void 0 : e.ignore_oneways,
    height: e.height == null ? void 0 : e.height,
    width: e.width == null ? void 0 : e.width,
    tollBoothCost: e.toll_booth_cost == null ? void 0 : e.toll_booth_cost,
    tollBoothPenalty: e.toll_booth_penalty == null ? void 0 : e.toll_booth_penalty,
    ferryCost: e.ferry_cost == null ? void 0 : e.ferry_cost,
    useHighways: e.use_highways == null ? void 0 : e.use_highways,
    useTolls: e.use_tolls == null ? void 0 : e.use_tolls,
    useTracks: e.use_tracks == null ? void 0 : e.use_tracks,
    topSpeed: e.top_speed == null ? void 0 : e.top_speed,
    shortest: e.shortest == null ? void 0 : e.shortest,
    ignoreClosures: e.ignore_closures == null ? void 0 : e.ignore_closures,
    includeHov2: e.include_hov2 == null ? void 0 : e.include_hov2,
    includeHov3: e.include_hov3 == null ? void 0 : e.include_hov3,
    includeHot: e.include_hot == null ? void 0 : e.include_hot,
    alleyFactor: e.alley_factor == null ? void 0 : e.alley_factor,
    length: e.length == null ? void 0 : e.length,
    weight: e.weight == null ? void 0 : e.weight,
    axleLoad: e.axle_load == null ? void 0 : e.axle_load,
    hazmat: e.hazmat == null ? void 0 : e.hazmat
  };
}
function on(e) {
  return cn(e, !1);
}
function cn(e, i = !1) {
  return e == null ? e : {
    maneuver_penalty: e.maneuverPenalty,
    gate_cost: e.gateCost,
    gate_penalty: e.gatePenalty,
    country_crossing_cost: e.countryCrossingCost,
    country_crossing_penalty: e.countryCrossingPenalty,
    service_penalty: e.servicePenalty,
    service_factor: e.serviceFactor,
    use_living_streets: e.useLivingStreets,
    use_ferry: e.useFerry,
    ignore_restrictions: e.ignoreRestrictions,
    ignore_non_vehicular_restrictions: e.ignoreNonVehicularRestrictions,
    ignore_oneways: e.ignoreOneways,
    height: e.height,
    width: e.width,
    toll_booth_cost: e.tollBoothCost,
    toll_booth_penalty: e.tollBoothPenalty,
    ferry_cost: e.ferryCost,
    use_highways: e.useHighways,
    use_tolls: e.useTolls,
    use_tracks: e.useTracks,
    top_speed: e.topSpeed,
    shortest: e.shortest,
    ignore_closures: e.ignoreClosures,
    include_hov2: e.includeHov2,
    include_hov3: e.includeHov3,
    include_hot: e.includeHot,
    alley_factor: e.alleyFactor,
    length: e.length,
    weight: e.weight,
    axle_load: e.axleLoad,
    hazmat: e.hazmat
  };
}
const cd = {
  Road: "Road",
  Hybrid: "Hybrid",
  Cross: "Cross",
  Mountain: "Mountain"
};
function ad(e) {
  return !0;
}
function an(e) {
  return un(e);
}
function un(e, i) {
  return e == null ? e : {
    maneuverPenalty: e.maneuver_penalty == null ? void 0 : e.maneuver_penalty,
    gateCost: e.gate_cost == null ? void 0 : e.gate_cost,
    gatePenalty: e.gate_penalty == null ? void 0 : e.gate_penalty,
    countryCrossingCost: e.country_crossing_cost == null ? void 0 : e.country_crossing_cost,
    countryCrossingPenalty: e.country_crossing_penalty == null ? void 0 : e.country_crossing_penalty,
    servicePenalty: e.service_penalty == null ? void 0 : e.service_penalty,
    serviceFactor: e.service_factor == null ? void 0 : e.service_factor,
    useLivingStreets: e.use_living_streets == null ? void 0 : e.use_living_streets,
    useFerry: e.use_ferry == null ? void 0 : e.use_ferry,
    ignoreRestrictions: e.ignore_restrictions == null ? void 0 : e.ignore_restrictions,
    ignoreNonVehicularRestrictions: e.ignore_non_vehicular_restrictions == null ? void 0 : e.ignore_non_vehicular_restrictions,
    ignoreOneways: e.ignore_oneways == null ? void 0 : e.ignore_oneways,
    bicycleType: e.bicycle_type == null ? void 0 : e.bicycle_type,
    cyclingSpeed: e.cycling_speed == null ? void 0 : e.cycling_speed,
    useRoads: e.use_roads == null ? void 0 : e.use_roads,
    useHills: e.use_hills == null ? void 0 : e.use_hills,
    avoidBadSurfaces: e.avoid_bad_surfaces == null ? void 0 : e.avoid_bad_surfaces,
    bssReturnCost: e.bss_return_cost == null ? void 0 : e.bss_return_cost,
    bssReturnPenalty: e.bss_return_penalty == null ? void 0 : e.bss_return_penalty
  };
}
function dn(e) {
  return ln(e, !1);
}
function ln(e, i = !1) {
  return e == null ? e : {
    maneuver_penalty: e.maneuverPenalty,
    gate_cost: e.gateCost,
    gate_penalty: e.gatePenalty,
    country_crossing_cost: e.countryCrossingCost,
    country_crossing_penalty: e.countryCrossingPenalty,
    service_penalty: e.servicePenalty,
    service_factor: e.serviceFactor,
    use_living_streets: e.useLivingStreets,
    use_ferry: e.useFerry,
    ignore_restrictions: e.ignoreRestrictions,
    ignore_non_vehicular_restrictions: e.ignoreNonVehicularRestrictions,
    ignore_oneways: e.ignoreOneways,
    bicycle_type: e.bicycleType,
    cycling_speed: e.cyclingSpeed,
    use_roads: e.useRoads,
    use_hills: e.useHills,
    avoid_bad_surfaces: e.avoidBadSurfaces,
    bss_return_cost: e.bssReturnCost,
    bss_return_penalty: e.bssReturnPenalty
  };
}
const ud = {
  LowSpeedVehicle: "low_speed_vehicle",
  GolfCart: "golf_cart"
};
function dd(e) {
  return !0;
}
function sn(e) {
  return fn(e);
}
function fn(e, i) {
  return e == null ? e : {
    maneuverPenalty: e.maneuver_penalty == null ? void 0 : e.maneuver_penalty,
    gateCost: e.gate_cost == null ? void 0 : e.gate_cost,
    gatePenalty: e.gate_penalty == null ? void 0 : e.gate_penalty,
    countryCrossingCost: e.country_crossing_cost == null ? void 0 : e.country_crossing_cost,
    countryCrossingPenalty: e.country_crossing_penalty == null ? void 0 : e.country_crossing_penalty,
    servicePenalty: e.service_penalty == null ? void 0 : e.service_penalty,
    serviceFactor: e.service_factor == null ? void 0 : e.service_factor,
    useLivingStreets: e.use_living_streets == null ? void 0 : e.use_living_streets,
    useFerry: e.use_ferry == null ? void 0 : e.use_ferry,
    ignoreRestrictions: e.ignore_restrictions == null ? void 0 : e.ignore_restrictions,
    ignoreNonVehicularRestrictions: e.ignore_non_vehicular_restrictions == null ? void 0 : e.ignore_non_vehicular_restrictions,
    ignoreOneways: e.ignore_oneways == null ? void 0 : e.ignore_oneways,
    vehicleType: e.vehicle_type == null ? void 0 : e.vehicle_type,
    topSpeed: e.top_speed == null ? void 0 : e.top_speed,
    maxAllowedSpeedLimit: e.max_allowed_speed_limit == null ? void 0 : e.max_allowed_speed_limit
  };
}
function pn(e) {
  return gn(e, !1);
}
function gn(e, i = !1) {
  return e == null ? e : {
    maneuver_penalty: e.maneuverPenalty,
    gate_cost: e.gateCost,
    gate_penalty: e.gatePenalty,
    country_crossing_cost: e.countryCrossingCost,
    country_crossing_penalty: e.countryCrossingPenalty,
    service_penalty: e.servicePenalty,
    service_factor: e.serviceFactor,
    use_living_streets: e.useLivingStreets,
    use_ferry: e.useFerry,
    ignore_restrictions: e.ignoreRestrictions,
    ignore_non_vehicular_restrictions: e.ignoreNonVehicularRestrictions,
    ignore_oneways: e.ignoreOneways,
    vehicle_type: e.vehicleType,
    top_speed: e.topSpeed,
    max_allowed_speed_limit: e.maxAllowedSpeedLimit
  };
}
function ld(e) {
  return !0;
}
function yn(e) {
  return mn(e);
}
function mn(e, i) {
  return e == null ? e : {
    maneuverPenalty: e.maneuver_penalty == null ? void 0 : e.maneuver_penalty,
    gateCost: e.gate_cost == null ? void 0 : e.gate_cost,
    gatePenalty: e.gate_penalty == null ? void 0 : e.gate_penalty,
    countryCrossingCost: e.country_crossing_cost == null ? void 0 : e.country_crossing_cost,
    countryCrossingPenalty: e.country_crossing_penalty == null ? void 0 : e.country_crossing_penalty,
    servicePenalty: e.service_penalty == null ? void 0 : e.service_penalty,
    serviceFactor: e.service_factor == null ? void 0 : e.service_factor,
    useLivingStreets: e.use_living_streets == null ? void 0 : e.use_living_streets,
    useFerry: e.use_ferry == null ? void 0 : e.use_ferry,
    ignoreRestrictions: e.ignore_restrictions == null ? void 0 : e.ignore_restrictions,
    ignoreNonVehicularRestrictions: e.ignore_non_vehicular_restrictions == null ? void 0 : e.ignore_non_vehicular_restrictions,
    ignoreOneways: e.ignore_oneways == null ? void 0 : e.ignore_oneways,
    height: e.height == null ? void 0 : e.height,
    width: e.width == null ? void 0 : e.width,
    tollBoothCost: e.toll_booth_cost == null ? void 0 : e.toll_booth_cost,
    tollBoothPenalty: e.toll_booth_penalty == null ? void 0 : e.toll_booth_penalty,
    ferryCost: e.ferry_cost == null ? void 0 : e.ferry_cost,
    useHighways: e.use_highways == null ? void 0 : e.use_highways,
    useTolls: e.use_tolls == null ? void 0 : e.use_tolls,
    useTracks: e.use_tracks == null ? void 0 : e.use_tracks,
    topSpeed: e.top_speed == null ? void 0 : e.top_speed,
    shortest: e.shortest == null ? void 0 : e.shortest,
    ignoreClosures: e.ignore_closures == null ? void 0 : e.ignore_closures,
    includeHov2: e.include_hov2 == null ? void 0 : e.include_hov2,
    includeHov3: e.include_hov3 == null ? void 0 : e.include_hov3,
    includeHot: e.include_hot == null ? void 0 : e.include_hot,
    alleyFactor: e.alley_factor == null ? void 0 : e.alley_factor,
    useTrails: e.use_trails == null ? void 0 : e.use_trails
  };
}
function _n(e) {
  return hn(e, !1);
}
function hn(e, i = !1) {
  return e == null ? e : {
    maneuver_penalty: e.maneuverPenalty,
    gate_cost: e.gateCost,
    gate_penalty: e.gatePenalty,
    country_crossing_cost: e.countryCrossingCost,
    country_crossing_penalty: e.countryCrossingPenalty,
    service_penalty: e.servicePenalty,
    service_factor: e.serviceFactor,
    use_living_streets: e.useLivingStreets,
    use_ferry: e.useFerry,
    ignore_restrictions: e.ignoreRestrictions,
    ignore_non_vehicular_restrictions: e.ignoreNonVehicularRestrictions,
    ignore_oneways: e.ignoreOneways,
    height: e.height,
    width: e.width,
    toll_booth_cost: e.tollBoothCost,
    toll_booth_penalty: e.tollBoothPenalty,
    ferry_cost: e.ferryCost,
    use_highways: e.useHighways,
    use_tolls: e.useTolls,
    use_tracks: e.useTracks,
    top_speed: e.topSpeed,
    shortest: e.shortest,
    ignore_closures: e.ignoreClosures,
    include_hov2: e.includeHov2,
    include_hov3: e.includeHov3,
    include_hot: e.includeHot,
    alley_factor: e.alleyFactor,
    use_trails: e.useTrails
  };
}
function sd(e) {
  return !0;
}
function g(e) {
  return On(e);
}
function On(e, i) {
  return e == null ? e : {
    auto: e.auto == null ? void 0 : v(e.auto),
    bus: e.bus == null ? void 0 : v(e.bus),
    taxi: e.taxi == null ? void 0 : v(e.taxi),
    truck: e.truck == null ? void 0 : tn(e.truck),
    bicycle: e.bicycle == null ? void 0 : an(e.bicycle),
    motorScooter: e.motor_scooter == null ? void 0 : Ki(e.motor_scooter),
    motorcycle: e.motorcycle == null ? void 0 : yn(e.motorcycle),
    pedestrian: e.pedestrian == null ? void 0 : qi(e.pedestrian),
    lowSpeedVehicle: e.low_speed_vehicle == null ? void 0 : sn(e.low_speed_vehicle)
  };
}
function y(e) {
  return bn(e, !1);
}
function bn(e, i = !1) {
  return e == null ? e : {
    auto: k(e.auto),
    bus: k(e.bus),
    taxi: k(e.taxi),
    truck: on(e.truck),
    bicycle: dn(e.bicycle),
    motor_scooter: $i(e.motorScooter),
    motorcycle: _n(e.motorcycle),
    pedestrian: en(e.pedestrian),
    low_speed_vehicle: pn(
      e.lowSpeedVehicle
    )
  };
}
const M = {
  Auto: "auto",
  Bus: "bus",
  Taxi: "taxi",
  Truck: "truck",
  Bicycle: "bicycle",
  Bikeshare: "bikeshare",
  MotorScooter: "motor_scooter",
  Motorcycle: "motorcycle",
  Pedestrian: "pedestrian",
  LowSpeedVehicle: "low_speed_vehicle"
};
function fd(e) {
  for (const i in M)
    if (Object.prototype.hasOwnProperty.call(M, i) && M[i] === e)
      return !0;
  return !1;
}
function ie(e) {
  return Sn(e);
}
function Sn(e, i) {
  return e;
}
function pd(e) {
  return e;
}
function gd(e, i) {
  return e;
}
const L = {
  Km: "km",
  Mi: "mi"
};
function yd(e) {
  for (const i in L)
    if (Object.prototype.hasOwnProperty.call(L, i) && L[i] === e)
      return !0;
  return !1;
}
function m(e) {
  return Tn(e);
}
function Tn(e, i) {
  return e;
}
function md(e) {
  return e;
}
function _d(e, i) {
  return e;
}
const I = {
  BgBg: "bg-BG",
  CaEs: "ca-ES",
  CsCz: "cs-CZ",
  DaDk: "da-DK",
  DeDe: "de-DE",
  ElGr: "el-GR",
  EnGb: "en-GB",
  EnUsXPirate: "en-US-x-pirate",
  EnUs: "en-US",
  EsEs: "es-ES",
  EtEe: "et-EE",
  FiFi: "fi-FI",
  FrFr: "fr-FR",
  HiIn: "hi-IN",
  HuHu: "hu-HU",
  ItIt: "it-IT",
  JaJp: "ja-JP",
  NbNo: "nb-NO",
  NlNl: "nl-NL",
  PlPl: "pl-PL",
  PtBr: "pt-BR",
  PtPt: "pt-PT",
  RoRo: "ro-RO",
  RuRu: "ru-RU",
  SkSk: "sk-SK",
  SlSi: "sl-SI",
  SvSe: "sv-SE",
  TrTr: "tr-TR",
  UkUa: "uk-UA"
};
function hd(e) {
  for (const i in I)
    if (Object.prototype.hasOwnProperty.call(I, i) && I[i] === e)
      return !0;
  return !1;
}
function p(e) {
  return Nn(e);
}
function Nn(e, i) {
  return e;
}
function Od(e) {
  return e;
}
function bd(e, i) {
  return e;
}
const Sd = {
  Break: "break",
  Through: "through",
  Via: "via",
  BreakThrough: "break_through"
};
function Td(e) {
  return !(!("lat" in e) || e.lat === void 0 || !("lon" in e) || e.lon === void 0);
}
function ne(e) {
  return wn(e);
}
function wn(e, i) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon,
    type: e.type == null ? void 0 : e.type,
    time: e.time == null ? void 0 : e.time
  };
}
function te(e) {
  return Rn(e, !1);
}
function Rn(e, i = !1) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon,
    type: e.type,
    time: e.time
  };
}
const Nd = {
  None: "none",
  Maneuvers: "maneuvers",
  Instructions: "instructions"
}, wd = {
  EdgeWalk: "edge_walk",
  MapSnap: "map_snap",
  WalkOrSnap: "walk_or_snap"
};
function Rd(e) {
  return !(!("costing" in e) || e.costing === void 0);
}
function Jd(e) {
  return Jn(e);
}
function Jn(e, i) {
  return e == null ? e : {
    units: e.units == null ? void 0 : m(e.units),
    language: e.language == null ? void 0 : p(e.language),
    directionsType: e.directions_type == null ? void 0 : e.directions_type,
    id: e.id == null ? void 0 : e.id,
    shape: e.shape == null ? void 0 : e.shape.map(ne),
    encodedPolyline: e.encoded_polyline == null ? void 0 : e.encoded_polyline,
    costing: ie(e.costing),
    costingOptions: e.costing_options == null ? void 0 : g(e.costing_options),
    shapeMatch: e.shape_match == null ? void 0 : e.shape_match
  };
}
function xd(e) {
  return xn(e, !1);
}
function xn(e, i = !1) {
  return e == null ? e : {
    units: e.units,
    language: e.language,
    directions_type: e.directionsType,
    id: e.id,
    shape: e.shape == null ? void 0 : e.shape.map(te),
    encoded_polyline: e.encodedPolyline,
    costing: e.costing,
    costing_options: y(e.costingOptions),
    shape_match: e.shapeMatch
  };
}
function Cd(e) {
  return !0;
}
function Cn(e) {
  return Fn(e);
}
function Fn(e, i) {
  return e == null ? e : {
    mountain: e.mountain == null ? void 0 : e.mountain,
    local: e.local == null ? void 0 : e.local,
    regional: e.regional == null ? void 0 : e.regional,
    national: e.national == null ? void 0 : e.national
  };
}
function vn(e) {
  return kn(e, !1);
}
function kn(e, i = !1) {
  return e == null ? e : {
    mountain: e.mountain,
    local: e.local,
    regional: e.regional,
    national: e.national
  };
}
const E = {
  Openstreetmap: "openstreetmap",
  Openaddresses: "openaddresses",
  Whosonfirst: "whosonfirst",
  Geonames: "geonames",
  Foursquare: "foursquare"
};
function Fd(e) {
  for (const i in E)
    if (Object.prototype.hasOwnProperty.call(E, i) && E[i] === e)
      return !0;
  return !1;
}
function Re(e) {
  return Dn(e);
}
function Dn(e, i) {
  return e;
}
function Je(e) {
  return e;
}
function vd(e, i) {
  return e;
}
const A = {
  Venue: "venue",
  Address: "address",
  Street: "street",
  Country: "country",
  Macroregion: "macroregion",
  Region: "region",
  Macrocounty: "macrocounty",
  County: "county",
  Locality: "locality",
  Localadmin: "localadmin",
  Borough: "borough",
  Neighbourhood: "neighbourhood",
  Postalcode: "postalcode",
  Coarse: "coarse",
  Dependency: "dependency",
  Macrohood: "macrohood",
  Marinearea: "marinearea",
  Disputed: "disputed",
  Empire: "empire",
  Continent: "continent",
  Ocean: "ocean"
};
function kd(e) {
  for (const i in A)
    if (Object.prototype.hasOwnProperty.call(A, i) && A[i] === e)
      return !0;
  return !1;
}
function xe(e) {
  return Mn(e);
}
function Mn(e, i) {
  return e;
}
function Ce(e) {
  return e;
}
function Dd(e, i) {
  return e;
}
function Fe(e) {
  return "text" in e;
}
function Md(e) {
  return ve(e);
}
function ve(e, i) {
  return e == null ? e : {
    text: e.text == null ? void 0 : e.text,
    focusPointLat: e["focus.point.lat"] == null ? void 0 : e["focus.point.lat"],
    focusPointLon: e["focus.point.lon"] == null ? void 0 : e["focus.point.lon"],
    boundaryRectMinLat: e["boundary.rect.min_lat"] == null ? void 0 : e["boundary.rect.min_lat"],
    boundaryRectMaxLat: e["boundary.rect.max_lat"] == null ? void 0 : e["boundary.rect.max_lat"],
    boundaryRectMinLon: e["boundary.rect.min_lon"] == null ? void 0 : e["boundary.rect.min_lon"],
    boundaryRectMaxLon: e["boundary.rect.max_lon"] == null ? void 0 : e["boundary.rect.max_lon"],
    boundaryCircleLat: e["boundary.circle.lat"] == null ? void 0 : e["boundary.circle.lat"],
    boundaryCircleLon: e["boundary.circle.lon"] == null ? void 0 : e["boundary.circle.lon"],
    boundaryCircleRadius: e["boundary.circle.radius"] == null ? void 0 : e["boundary.circle.radius"],
    boundaryCountry: e["boundary.country"] == null ? void 0 : e["boundary.country"],
    boundaryGid: e["boundary.gid"] == null ? void 0 : e["boundary.gid"],
    layers: e.layers == null ? void 0 : e.layers.map(xe),
    sources: e.sources == null ? void 0 : e.sources.map(Re),
    size: e.size == null ? void 0 : e.size,
    lang: e.lang == null ? void 0 : e.lang
  };
}
function Ln(e) {
  return In(e, !1);
}
function In(e, i = !1) {
  return e == null ? e : {
    text: e.text,
    "focus.point.lat": e.focusPointLat,
    "focus.point.lon": e.focusPointLon,
    "boundary.rect.min_lat": e.boundaryRectMinLat,
    "boundary.rect.max_lat": e.boundaryRectMaxLat,
    "boundary.rect.min_lon": e.boundaryRectMinLon,
    "boundary.rect.max_lon": e.boundaryRectMaxLon,
    "boundary.circle.lat": e.boundaryCircleLat,
    "boundary.circle.lon": e.boundaryCircleLon,
    "boundary.circle.radius": e.boundaryCircleRadius,
    "boundary.country": e.boundaryCountry,
    "boundary.gid": e.boundaryGid,
    layers: e.layers == null ? void 0 : e.layers.map(Ce),
    sources: e.sources == null ? void 0 : e.sources.map(Je),
    size: e.size,
    lang: e.lang
  };
}
function Ld(e) {
  return !0;
}
function Id(e) {
  return ke(e);
}
function ke(e, i) {
  return e == null ? e : {
    address: e.address == null ? void 0 : e.address,
    neighbourhood: e.neighbourhood == null ? void 0 : e.neighbourhood,
    borough: e.borough == null ? void 0 : e.borough,
    locality: e.locality == null ? void 0 : e.locality,
    county: e.county == null ? void 0 : e.county,
    region: e.region == null ? void 0 : e.region,
    postalcode: e.postalcode == null ? void 0 : e.postalcode,
    country: e.country == null ? void 0 : e.country,
    focusPointLat: e["focus.point.lat"] == null ? void 0 : e["focus.point.lat"],
    focusPointLon: e["focus.point.lon"] == null ? void 0 : e["focus.point.lon"],
    boundaryRectMinLat: e["boundary.rect.min_lat"] == null ? void 0 : e["boundary.rect.min_lat"],
    boundaryRectMaxLat: e["boundary.rect.max_lat"] == null ? void 0 : e["boundary.rect.max_lat"],
    boundaryRectMinLon: e["boundary.rect.min_lon"] == null ? void 0 : e["boundary.rect.min_lon"],
    boundaryRectMaxLon: e["boundary.rect.max_lon"] == null ? void 0 : e["boundary.rect.max_lon"],
    boundaryCircleLat: e["boundary.circle.lat"] == null ? void 0 : e["boundary.circle.lat"],
    boundaryCircleLon: e["boundary.circle.lon"] == null ? void 0 : e["boundary.circle.lon"],
    boundaryCircleRadius: e["boundary.circle.radius"] == null ? void 0 : e["boundary.circle.radius"],
    boundaryCountry: e["boundary.country"] == null ? void 0 : e["boundary.country"],
    boundaryGid: e["boundary.gid"] == null ? void 0 : e["boundary.gid"],
    layers: e.layers == null ? void 0 : e.layers.map(xe),
    sources: e.sources == null ? void 0 : e.sources.map(Re),
    size: e.size == null ? void 0 : e.size,
    lang: e.lang == null ? void 0 : e.lang
  };
}
function En(e) {
  return An(e, !1);
}
function An(e, i = !1) {
  return e == null ? e : {
    address: e.address,
    neighbourhood: e.neighbourhood,
    borough: e.borough,
    locality: e.locality,
    county: e.county,
    region: e.region,
    postalcode: e.postalcode,
    country: e.country,
    "focus.point.lat": e.focusPointLat,
    "focus.point.lon": e.focusPointLon,
    "boundary.rect.min_lat": e.boundaryRectMinLat,
    "boundary.rect.max_lat": e.boundaryRectMaxLat,
    "boundary.rect.min_lon": e.boundaryRectMinLon,
    "boundary.rect.max_lon": e.boundaryRectMaxLon,
    "boundary.circle.lat": e.boundaryCircleLat,
    "boundary.circle.lon": e.boundaryCircleLon,
    "boundary.circle.radius": e.boundaryCircleRadius,
    "boundary.country": e.boundaryCountry,
    "boundary.gid": e.boundaryGid,
    layers: e.layers == null ? void 0 : e.layers.map(Ce),
    sources: e.sources == null ? void 0 : e.sources.map(Je),
    size: e.size,
    lang: e.lang
  };
}
function Gn(e) {
  return Bn(e);
}
function Bn(e, i) {
  return e == null || typeof e != "object" ? e : Fe(e) ? ve(e) : ke(e);
}
function Pn(e) {
  return Vn(e, !1);
}
function Vn(e, i = !1) {
  return e == null || typeof e != "object" ? e : Fe(e) ? Ln(e) : En(e);
}
const Ed = {
  V1Search: "/v1/search",
  V1SearchStructured: "/v1/search/structured"
};
function Ad(e) {
  return !0;
}
function Gd(e) {
  return Hn(e);
}
function Hn(e, i) {
  return e == null ? e : {
    endpoint: e.endpoint == null ? void 0 : e.endpoint,
    query: e.query == null ? void 0 : Gn(e.query)
  };
}
function Wn(e) {
  return zn(e, !1);
}
function zn(e, i = !1) {
  return e == null ? e : {
    endpoint: e.endpoint,
    query: Pn(e.query)
  };
}
function Bd(e) {
  return !0;
}
function Un(e) {
  return Kn(e);
}
function Kn(e, i) {
  return e == null ? e : {
    attribution: e.attribution == null ? void 0 : e.attribution,
    query: e.query == null ? void 0 : e.query,
    warnings: e.warnings == null ? void 0 : e.warnings,
    errors: e.errors == null ? void 0 : e.errors
  };
}
function Qn(e) {
  return $n(e, !1);
}
function $n(e, i = !1) {
  return e == null ? e : {
    attribution: e.attribution,
    query: e.query,
    warnings: e.warnings,
    errors: e.errors
  };
}
const Pd = {
  Point: "Point",
  MultiPoint: "MultiPoint",
  LineString: "LineString",
  MultiLineString: "MultiLineString",
  Polygon: "Polygon",
  MultiPolygon: "MultiPolygon"
};
function Vd(e) {
  return !(!("type" in e) || e.type === void 0 || !("coordinates" in e) || e.coordinates === void 0);
}
function Zn(e) {
  return Xn(e);
}
function Xn(e, i) {
  return e == null ? e : {
    type: e.type,
    coordinates: e.coordinates
  };
}
function Yn(e) {
  return qn(e, !1);
}
function qn(e, i = !1) {
  return e == null ? e : {
    type: e.type,
    coordinates: e.coordinates
  };
}
function Hd(e) {
  return !0;
}
function jn(e) {
  return et(e);
}
function et(e, i) {
  return e == null ? e : {
    ...e,
    website: e.website == null ? void 0 : e.website,
    wikipedia: e.wikipedia == null ? void 0 : e.wikipedia,
    wikidata: e.wikidata == null ? void 0 : e.wikidata,
    phone: e.phone == null ? void 0 : e.phone
  };
}
function it(e) {
  return nt(e, !1);
}
function nt(e, i = !1) {
  return e == null ? e : {
    ...e,
    website: e.website,
    wikipedia: e.wikipedia,
    wikidata: e.wikidata,
    phone: e.phone
  };
}
function Wd(e) {
  return !0;
}
function tt(e) {
  return rt(e);
}
function rt(e, i) {
  return e == null ? e : {
    ...e,
    osm: e.osm == null ? void 0 : jn(e.osm)
  };
}
function ot(e) {
  return ct(e, !1);
}
function ct(e, i = !1) {
  return e == null ? e : {
    ...e,
    osm: it(e.osm)
  };
}
const zd = {
  Point: "point",
  Centroid: "centroid"
}, Ud = {
  Exact: "exact",
  Interpolated: "interpolated",
  Fallback: "fallback"
};
function Kd(e) {
  return !0;
}
function at(e) {
  return ut(e);
}
function ut(e, i) {
  return e == null ? e : {
    ...e,
    gid: e.gid == null ? void 0 : e.gid,
    sourceId: e.source_id == null ? void 0 : e.source_id,
    label: e.label == null ? void 0 : e.label,
    layer: e.layer == null ? void 0 : e.layer,
    source: e.source == null ? void 0 : e.source,
    name: e.name == null ? void 0 : e.name,
    accuracy: e.accuracy == null ? void 0 : e.accuracy,
    addendum: e.addendum == null ? void 0 : tt(e.addendum),
    continent: e.continent == null ? void 0 : e.continent,
    continentGid: e.continent_gid == null ? void 0 : e.continent_gid,
    country: e.country == null ? void 0 : e.country,
    countryA: e.country_a == null ? void 0 : e.country_a,
    countryCode: e.country_code == null ? void 0 : e.country_code,
    countryGid: e.country_gid == null ? void 0 : e.country_gid,
    neighbourhood: e.neighbourhood == null ? void 0 : e.neighbourhood,
    neighbourhoodGid: e.neighbourhood_gid == null ? void 0 : e.neighbourhood_gid,
    borough: e.borough == null ? void 0 : e.borough,
    boroughGid: e.borough_gid == null ? void 0 : e.borough_gid,
    postalcode: e.postalcode == null ? void 0 : e.postalcode,
    street: e.street == null ? void 0 : e.street,
    housenumber: e.housenumber == null ? void 0 : e.housenumber,
    locality: e.locality == null ? void 0 : e.locality,
    localityGid: e.locality_gid == null ? void 0 : e.locality_gid,
    county: e.county == null ? void 0 : e.county,
    countyGid: e.county_gid == null ? void 0 : e.county_gid,
    region: e.region == null ? void 0 : e.region,
    regionA: e.region_a == null ? void 0 : e.region_a,
    regionGid: e.region_gid == null ? void 0 : e.region_gid,
    localadmin: e.localadmin == null ? void 0 : e.localadmin,
    localadminGid: e.localadmin_gid == null ? void 0 : e.localadmin_gid,
    matchType: e.match_type == null ? void 0 : e.match_type,
    confidence: e.confidence == null ? void 0 : e.confidence
  };
}
function dt(e) {
  return lt(e, !1);
}
function lt(e, i = !1) {
  return e == null ? e : {
    ...e,
    gid: e.gid,
    source_id: e.sourceId,
    label: e.label,
    layer: e.layer,
    source: e.source,
    name: e.name,
    accuracy: e.accuracy,
    addendum: ot(e.addendum),
    continent: e.continent,
    continent_gid: e.continentGid,
    country: e.country,
    country_a: e.countryA,
    country_code: e.countryCode,
    country_gid: e.countryGid,
    neighbourhood: e.neighbourhood,
    neighbourhood_gid: e.neighbourhoodGid,
    borough: e.borough,
    borough_gid: e.boroughGid,
    postalcode: e.postalcode,
    street: e.street,
    housenumber: e.housenumber,
    locality: e.locality,
    locality_gid: e.localityGid,
    county: e.county,
    county_gid: e.countyGid,
    region: e.region,
    region_a: e.regionA,
    region_gid: e.regionGid,
    localadmin: e.localadmin,
    localadmin_gid: e.localadminGid,
    match_type: e.matchType,
    confidence: e.confidence
  };
}
const Qd = {
  Feature: "Feature"
};
function $d(e) {
  return !(!("type" in e) || e.type === void 0 || !("geometry" in e) || e.geometry === void 0);
}
function st(e) {
  return ft(e);
}
function ft(e, i) {
  return e == null ? e : {
    type: e.type,
    geometry: Zn(e.geometry),
    properties: e.properties == null ? void 0 : at(e.properties),
    bbox: e.bbox == null ? void 0 : e.bbox
  };
}
function pt(e) {
  return gt(e, !1);
}
function gt(e, i = !1) {
  return e == null ? e : {
    type: e.type,
    geometry: Yn(e.geometry),
    properties: dt(e.properties),
    bbox: e.bbox
  };
}
function Zd(e) {
  return !(!("geocoding" in e) || e.geocoding === void 0 || !("features" in e) || e.features === void 0);
}
function O(e) {
  return yt(e);
}
function yt(e, i) {
  return e == null ? e : {
    geocoding: Un(e.geocoding),
    bbox: e.bbox == null ? void 0 : e.bbox,
    features: e.features.map(
      st
    )
  };
}
function mt(e) {
  return _t(e, !1);
}
function _t(e, i = !1) {
  return e == null ? e : {
    geocoding: Qn(e.geocoding),
    bbox: e.bbox,
    features: e.features.map(
      pt
    )
  };
}
function Xd(e) {
  return !(!("status" in e) || e.status === void 0);
}
function ht(e) {
  return Ot(e);
}
function Ot(e, i) {
  return e == null ? e : {
    status: e.status,
    response: e.response == null ? void 0 : O(e.response),
    msg: e.msg == null ? void 0 : e.msg
  };
}
function Yd(e) {
  return bt(e, !1);
}
function bt(e, i = !1) {
  return e == null ? e : {
    status: e.status,
    response: mt(e.response),
    msg: e.msg
  };
}
function qd(e) {
  return !(!("gid" in e) || e.gid === void 0 || !("name" in e) || e.name === void 0);
}
function d(e) {
  return St(e);
}
function St(e, i) {
  return e == null ? e : {
    abbreviation: e.abbreviation == null ? void 0 : e.abbreviation,
    gid: e.gid,
    name: e.name
  };
}
function l(e) {
  return Tt(e, !1);
}
function Tt(e, i = !1) {
  return e == null ? e : {
    abbreviation: e.abbreviation,
    gid: e.gid,
    name: e.name
  };
}
function jd(e) {
  return !0;
}
function Nt(e) {
  return wt(e);
}
function wt(e, i) {
  return e == null ? e : {
    borough: e.borough == null ? void 0 : d(e.borough),
    continent: e.continent == null ? void 0 : d(e.continent),
    country: e.country == null ? void 0 : d(e.country),
    county: e.county == null ? void 0 : d(e.county),
    dependency: e.dependency == null ? void 0 : d(e.dependency),
    localadmin: e.localadmin == null ? void 0 : d(e.localadmin),
    locality: e.locality == null ? void 0 : d(e.locality),
    macrocounty: e.macrocounty == null ? void 0 : d(e.macrocounty),
    macroregion: e.macroregion == null ? void 0 : d(e.macroregion),
    marinearea: e.marinearea == null ? void 0 : d(e.marinearea),
    neighbourhood: e.neighbourhood == null ? void 0 : d(e.neighbourhood),
    ocean: e.ocean == null ? void 0 : d(e.ocean),
    region: e.region == null ? void 0 : d(e.region)
  };
}
function Rt(e) {
  return Jt(e, !1);
}
function Jt(e, i = !1) {
  return e == null ? e : {
    borough: l(e.borough),
    continent: l(e.continent),
    country: l(e.country),
    county: l(e.county),
    dependency: l(e.dependency),
    localadmin: l(e.localadmin),
    locality: l(e.locality),
    macrocounty: l(e.macrocounty),
    macroregion: l(e.macroregion),
    marinearea: l(e.marinearea),
    neighbourhood: l(e.neighbourhood),
    ocean: l(e.ocean),
    region: l(e.region)
  };
}
function el(e) {
  return !(!("whosonfirst" in e) || e.whosonfirst === void 0);
}
function De(e) {
  return xt(e);
}
function xt(e, i) {
  return e == null ? e : {
    iso3166A2: e.iso_3166_a2 == null ? void 0 : e.iso_3166_a2,
    iso3166A3: e.iso_3166_a3 == null ? void 0 : e.iso_3166_a3,
    whosonfirst: Nt(e.whosonfirst)
  };
}
function Me(e) {
  return Ct(e, !1);
}
function Ct(e, i = !1) {
  return e == null ? e : {
    iso_3166_a2: e.iso3166A2,
    iso_3166_a3: e.iso3166A3,
    whosonfirst: Rt(e.whosonfirst)
  };
}
function il(e) {
  return !0;
}
function Ft(e) {
  return vt(e);
}
function vt(e, i) {
  return e == null ? e : {
    time: e.time == null ? void 0 : e.time,
    distance: e.distance == null ? void 0 : e.distance,
    color: e.color == null ? void 0 : e.color
  };
}
function kt(e) {
  return Dt(e, !1);
}
function Dt(e, i = !1) {
  return e == null ? e : {
    time: e.time,
    distance: e.distance,
    color: e.color
  };
}
function nl(e) {
  return !(!("lat" in e) || e.lat === void 0 || !("lon" in e) || e.lon === void 0);
}
function _(e) {
  return Mt(e);
}
function Mt(e, i) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon
  };
}
function h(e) {
  return Lt(e, !1);
}
function Lt(e, i = !1) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon
  };
}
const G = {
  Auto: "auto",
  Bus: "bus",
  Taxi: "taxi",
  Truck: "truck",
  Bicycle: "bicycle",
  Bikeshare: "bikeshare",
  MotorScooter: "motor_scooter",
  Motorcycle: "motorcycle",
  Pedestrian: "pedestrian",
  LowSpeedVehicle: "low_speed_vehicle"
};
function tl(e) {
  for (const i in G)
    if (Object.prototype.hasOwnProperty.call(G, i) && G[i] === e)
      return !0;
  return !1;
}
function Le(e) {
  return It(e);
}
function It(e, i) {
  return e;
}
function rl(e) {
  return e;
}
function ol(e, i) {
  return e;
}
const cl = {
  None: "none",
  Maneuvers: "maneuvers",
  Instructions: "instructions"
};
function al(e) {
  return !0;
}
function ul(e) {
  return Et(e);
}
function Et(e, i) {
  return e == null ? e : {
    units: e.units == null ? void 0 : m(e.units),
    language: e.language == null ? void 0 : p(e.language),
    directionsType: e.directions_type == null ? void 0 : e.directions_type
  };
}
function dl(e) {
  return At(e, !1);
}
function At(e, i = !1) {
  return e == null ? e : {
    units: e.units,
    language: e.language,
    directions_type: e.directionsType
  };
}
function ll(e) {
  return !0;
}
function Gt(e) {
  return Bt(e);
}
function Bt(e, i) {
  return e == null ? e : {
    exitNumber: e.exit_number == null ? void 0 : e.exit_number,
    exitBranch: e.exit_branch == null ? void 0 : e.exit_branch,
    exitToward: e.exit_toward == null ? void 0 : e.exit_toward,
    exitName: e.exit_name == null ? void 0 : e.exit_name
  };
}
function Pt(e) {
  return Vt(e, !1);
}
function Vt(e, i = !1) {
  return e == null ? e : {
    exit_number: e.exitNumber,
    exit_branch: e.exitBranch,
    exit_toward: e.exitToward,
    exit_name: e.exitName
  };
}
const B = {
  Road: "road",
  Ramp: "ramp",
  TurnChannel: "turn_channel",
  Track: "track",
  Driveway: "driveway",
  Alley: "alley",
  ParkingAisle: "parking_aisle",
  EmergencyAccess: "emergency_access",
  DriveThrough: "drive_through",
  Culdesac: "culdesac",
  LivingStreet: "living_street",
  ServiceRoad: "service_road",
  Cycleway: "cycleway",
  MountainBike: "mountain_bike",
  Sidewalk: "sidewalk",
  Footway: "footway",
  Steps: "steps",
  Path: "path",
  Pedestrian: "pedestrian",
  PedestrianCrossing: "pedestrian_crossing",
  Bridleway: "bridleway",
  RestArea: "rest_area",
  ServiceArea: "service_area",
  Other: "other",
  Ferry: "ferry",
  RailFerry: "rail-ferry",
  Rail: "rail",
  Bus: "bus",
  EgressConnection: "egress_connection",
  PlatformConnection: "platform_connection",
  TransitConnection: "transit_connection"
};
function sl(e) {
  for (const i in B)
    if (Object.prototype.hasOwnProperty.call(B, i) && B[i] === e)
      return !0;
  return !1;
}
function Ie(e) {
  return Ht(e);
}
function Ht(e, i) {
  return e;
}
function fl(e) {
  return e;
}
function pl(e, i) {
  return e;
}
const P = {
  Forward: "forward",
  Backward: "backward",
  Both: "both"
};
function gl(e) {
  for (const i in P)
    if (Object.prototype.hasOwnProperty.call(P, i) && P[i] === e)
      return !0;
  return !1;
}
function R(e) {
  return Wt(e);
}
function Wt(e, i) {
  return e;
}
function yl(e) {
  return e;
}
function ml(e, i) {
  return e;
}
const V = {
  Motorway: "motorway",
  Trunk: "trunk",
  Primary: "primary",
  Secondary: "secondary",
  Tertiary: "tertiary",
  Unclassified: "unclassified",
  Residential: "residential",
  ServiceOther: "service_other"
};
function _l(e) {
  for (const i in V)
    if (Object.prototype.hasOwnProperty.call(V, i) && V[i] === e)
      return !0;
  return !1;
}
function J(e) {
  return zt(e);
}
function zt(e, i) {
  return e;
}
function hl(e) {
  return e;
}
function Ol(e, i) {
  return e;
}
function bl(e) {
  return !0;
}
function Ut(e) {
  return Kt(e);
}
function Kt(e, i) {
  return e == null ? e : {
    beginHeading: e.begin_heading == null ? void 0 : e.begin_heading,
    fromEdgeNameConsistency: e.from_edge_name_consistency == null ? void 0 : e.from_edge_name_consistency,
    toEdgeNameConsistency: e.to_edge_name_consistency == null ? void 0 : e.to_edge_name_consistency,
    driveability: e.driveability == null ? void 0 : R(e.driveability),
    cyclability: e.cyclability == null ? void 0 : R(e.cyclability),
    walkability: e.walkability == null ? void 0 : R(e.walkability),
    use: e.use == null ? void 0 : Ie(e.use),
    roadClass: e.road_class == null ? void 0 : J(e.road_class)
  };
}
function Qt(e) {
  return $t(e, !1);
}
function $t(e, i = !1) {
  return e == null ? e : {
    begin_heading: e.beginHeading,
    from_edge_name_consistency: e.fromEdgeNameConsistency,
    to_edge_name_consistency: e.toEdgeNameConsistency,
    driveability: e.driveability,
    cyclability: e.cyclability,
    walkability: e.walkability,
    use: e.use,
    road_class: e.roadClass
  };
}
const H = {
  StreetIntersection: "street_intersection",
  Gate: "gate",
  Bollard: "bollard",
  TollBooth: "toll_booth",
  MultiUseTransitStop: "multi_use_transit_stop",
  BikeShare: "bike_share",
  Parking: "parking",
  MotorWayJunction: "motor_way_junction",
  BorderControl: "border_control"
};
function Sl(e) {
  for (const i in H)
    if (Object.prototype.hasOwnProperty.call(H, i) && H[i] === e)
      return !0;
  return !1;
}
function Ee(e) {
  return Zt(e);
}
function Zt(e, i) {
  return e;
}
function Tl(e) {
  return e;
}
function Nl(e, i) {
  return e;
}
function wl(e) {
  return !0;
}
function Xt(e) {
  return Yt(e);
}
function Yt(e, i) {
  return e == null ? e : {
    intersectingEdges: e.intersecting_edges == null ? void 0 : e.intersecting_edges.map(
      Ut
    ),
    elapsedTime: e.elapsed_time == null ? void 0 : e.elapsed_time,
    adminIndex: e.admin_index == null ? void 0 : e.admin_index,
    type: e.type == null ? void 0 : Ee(e.type),
    fork: e.fork == null ? void 0 : e.fork,
    timeZone: e.time_zone == null ? void 0 : e.time_zone
  };
}
function qt(e) {
  return jt(e, !1);
}
function jt(e, i = !1) {
  return e == null ? e : {
    intersecting_edges: e.intersectingEdges == null ? void 0 : e.intersectingEdges.map(
      Qt
    ),
    elapsed_time: e.elapsedTime,
    admin_index: e.adminIndex,
    type: e.type,
    fork: e.fork,
    time_zone: e.timeZone
  };
}
const Rl = {
  Json: "json",
  Osrm: "osrm"
};
function Jl(e) {
  return !0;
}
function xl(e) {
  return er(e);
}
function er(e, i) {
  return e == null ? e : {
    format: e.format == null ? void 0 : e.format,
    bannerInstructions: e.banner_instructions == null ? void 0 : e.banner_instructions,
    voiceInstructions: e.voice_instructions == null ? void 0 : e.voice_instructions,
    filters: e.filters == null ? void 0 : C(e.filters)
  };
}
function Cl(e) {
  return ir(e, !1);
}
function ir(e, i = !1) {
  return e == null ? e : {
    format: e.format,
    banner_instructions: e.bannerInstructions,
    voice_instructions: e.voiceInstructions,
    filters: F(e.filters)
  };
}
function Fl(e) {
  return !(!("coordinates" in e) || e.coordinates === void 0 || !("type" in e) || e.type === void 0);
}
function nr(e) {
  return tr(e);
}
function tr(e, i) {
  return e == null ? e : {
    coordinates: e.coordinates,
    type: e.type
  };
}
function rr(e) {
  return or(e, !1);
}
function or(e, i = !1) {
  return e == null ? e : {
    coordinates: e.coordinates,
    type: e.type
  };
}
const W = {
  Match: "match",
  Interpolated: "interpolated",
  Fallback: "fallback"
};
function vl(e) {
  for (const i in W)
    if (Object.prototype.hasOwnProperty.call(W, i) && W[i] === e)
      return !0;
  return !1;
}
function Ae(e) {
  return cr(e);
}
function cr(e, i) {
  return e;
}
function kl(e) {
  return e;
}
function Dl(e, i) {
  return e;
}
function Ml(e) {
  return !(!("source" in e) || e.source === void 0 || !("sourceId" in e) || e.sourceId === void 0);
}
function Ge(e) {
  return ar(e);
}
function ar(e, i) {
  return e == null ? e : {
    fixitUrl: e.fixit_url == null ? void 0 : e.fixit_url,
    source: e.source,
    sourceId: e.source_id
  };
}
function Be(e) {
  return ur(e, !1);
}
function ur(e, i = !1) {
  return e == null ? e : {
    fixit_url: e.fixitUrl,
    source: e.source,
    source_id: e.sourceId
  };
}
const z = {
  Point: "point",
  Centroid: "centroid"
};
function Ll(e) {
  for (const i in z)
    if (Object.prototype.hasOwnProperty.call(z, i) && z[i] === e)
      return !0;
  return !1;
}
function Pe(e) {
  return dr(e);
}
function dr(e, i) {
  return e;
}
function Il(e) {
  return e;
}
function El(e, i) {
  return e;
}
function Al(e) {
  return !(!("gid" in e) || e.gid === void 0 || !("layer" in e) || e.layer === void 0 || !("name" in e) || e.name === void 0 || !("precision" in e) || e.precision === void 0);
}
function lr(e) {
  return sr(e);
}
function sr(e, i) {
  return e == null ? e : {
    addendum: e.addendum == null ? void 0 : Oe(e.addendum),
    addressComponents: e.address_components == null ? void 0 : Se(e.address_components),
    coarseLocation: e.coarse_location == null ? void 0 : e.coarse_location,
    confidence: e.confidence == null ? void 0 : e.confidence,
    context: e.context == null ? void 0 : De(e.context),
    distance: e.distance == null ? void 0 : e.distance,
    formattedAddressLine: e.formatted_address_line == null ? void 0 : e.formatted_address_line,
    formattedAddressLines: e.formatted_address_lines == null ? void 0 : e.formatted_address_lines,
    gid: e.gid,
    layer: e.layer,
    matchType: e.match_type == null ? void 0 : Ae(e.match_type),
    name: e.name,
    precision: Pe(e.precision),
    sources: e.sources == null ? void 0 : e.sources.map(Ge)
  };
}
function fr(e) {
  return pr(e, !1);
}
function pr(e, i = !1) {
  return e == null ? e : {
    addendum: be(e.addendum),
    address_components: Te(e.addressComponents),
    coarse_location: e.coarseLocation,
    confidence: e.confidence,
    context: Me(e.context),
    distance: e.distance,
    formatted_address_line: e.formattedAddressLine,
    formatted_address_lines: e.formattedAddressLines,
    gid: e.gid,
    layer: e.layer,
    match_type: e.matchType,
    name: e.name,
    precision: e.precision,
    sources: e.sources == null ? void 0 : e.sources.map(Be)
  };
}
function Gl(e) {
  return !(!("properties" in e) || e.properties === void 0);
}
function gr(e) {
  return yr(e);
}
function yr(e, i) {
  return e == null ? e : {
    bbox: e.bbox == null ? void 0 : e.bbox,
    geometry: e.geometry == null ? void 0 : nr(e.geometry),
    properties: lr(e.properties),
    type: e.type == null ? void 0 : e.type
  };
}
function mr(e) {
  return _r(e, !1);
}
function _r(e, i = !1) {
  return e == null ? e : {
    bbox: e.bbox,
    geometry: rr(e.geometry),
    properties: fr(e.properties),
    type: e.type
  };
}
function Bl(e) {
  return !0;
}
function hr(e) {
  return Or(e);
}
function Or(e, i) {
  return e == null ? e : {
    curvature: e.curvature == null ? void 0 : e.curvature,
    maxDownSlope: e.max_down_slope == null ? void 0 : e.max_down_slope,
    maxUpSlope: e.max_up_slope == null ? void 0 : e.max_up_slope,
    weightedGrade: e.weighted_grade == null ? void 0 : e.weighted_grade,
    length: e.length == null ? void 0 : e.length
  };
}
function br(e) {
  return Sr(e, !1);
}
function Sr(e, i = !1) {
  return e == null ? e : {
    curvature: e.curvature,
    max_down_slope: e.maxDownSlope,
    max_up_slope: e.maxUpSlope,
    weighted_grade: e.weightedGrade,
    length: e.length
  };
}
const Pl = {
  Point: "Point",
  MultiPoint: "MultiPoint",
  LineString: "LineString",
  MultiLineString: "MultiLineString",
  Polygon: "Polygon",
  MultiPolygon: "MultiPolygon"
};
function Vl(e) {
  return !(!("type" in e) || e.type === void 0);
}
function Hl(e) {
  return Tr(e);
}
function Tr(e, i) {
  return e == null ? e : {
    type: e.type
  };
}
function Wl(e) {
  return Nr(e, !1);
}
function Nr(e, i = !1) {
  return e == null ? e : {
    type: e.type
  };
}
function zl(e) {
  return !(!("attribution" in e) || e.attribution === void 0);
}
function wr(e) {
  return Rr(e);
}
function Rr(e, i) {
  return e == null ? e : {
    attribution: e.attribution,
    error: e.error == null ? void 0 : e.error,
    query: e.query == null ? void 0 : e.query
  };
}
function Jr(e) {
  return xr(e, !1);
}
function xr(e, i = !1) {
  return e == null ? e : {
    attribution: e.attribution,
    error: e.error,
    query: e.query
  };
}
function Ul(e) {
  return !(!("features" in e) || e.features === void 0 || !("geocoding" in e) || e.geocoding === void 0 || !("type" in e) || e.type === void 0);
}
function T(e) {
  return Cr(e);
}
function Cr(e, i) {
  return e == null ? e : {
    bbox: e.bbox == null ? void 0 : e.bbox,
    features: e.features.map(gr),
    geocoding: wr(e.geocoding),
    type: e.type
  };
}
function Kl(e) {
  return Fr(e, !1);
}
function Fr(e, i = !1) {
  return e == null ? e : {
    bbox: e.bbox,
    features: e.features.map(mr),
    geocoding: Jr(e.geocoding),
    type: e.type
  };
}
const Ql = {
  Polyline6: "polyline6",
  Polyline5: "polyline5"
};
function $l(e) {
  return !0;
}
function Zl(e) {
  return vr(e);
}
function vr(e, i) {
  return e == null ? e : {
    id: e.id == null ? void 0 : e.id,
    shape: e.shape == null ? void 0 : e.shape.map(_),
    encodedPolyline: e.encoded_polyline == null ? void 0 : e.encoded_polyline,
    shapeFormat: e.shape_format == null ? void 0 : e.shape_format,
    range: e.range == null ? void 0 : e.range,
    heightPrecision: e.height_precision == null ? void 0 : e.height_precision,
    resampleDistance: e.resample_distance == null ? void 0 : e.resample_distance
  };
}
function kr(e) {
  return Dr(e, !1);
}
function Dr(e, i = !1) {
  return e == null ? e : {
    id: e.id,
    shape: e.shape == null ? void 0 : e.shape.map(h),
    encoded_polyline: e.encodedPolyline,
    shape_format: e.shapeFormat,
    range: e.range,
    height_precision: e.heightPrecision,
    resample_distance: e.resampleDistance
  };
}
function Xl(e) {
  return !0;
}
function Mr(e) {
  return Lr(e);
}
function Lr(e, i) {
  return e == null ? e : {
    id: e.id == null ? void 0 : e.id,
    shape: e.shape == null ? void 0 : e.shape.map(_),
    encodedPolyline: e.encoded_polyline == null ? void 0 : e.encoded_polyline,
    height: e.height == null ? void 0 : e.height,
    rangeHeight: e.range_height == null ? void 0 : e.range_height
  };
}
function Yl(e) {
  return Ir(e, !1);
}
function Ir(e, i = !1) {
  return e == null ? e : {
    id: e.id,
    shape: e.shape == null ? void 0 : e.shape.map(h),
    encoded_polyline: e.encodedPolyline,
    height: e.height,
    range_height: e.rangeHeight
  };
}
const ql = {
  PavedSmooth: "paved_smooth",
  Paved: "paved",
  PavedRough: "paved_rough",
  Compacted: "compacted",
  Dirt: "dirt",
  Gravel: "gravel",
  Path: "path",
  Impassable: "impassable"
}, jl = {
  Road: "road",
  Ramp: "ramp",
  TurnChannel: "turn_channel",
  Track: "track",
  Driveway: "driveway",
  Alley: "alley",
  ParkingAisle: "parking_aisle",
  EmergencyAccess: "emergency_access",
  DriveThrough: "drive_through",
  Culdesac: "culdesac",
  LivingStreet: "living_street",
  ServiceRoad: "service_road",
  Cycleway: "cycleway",
  MountainBike: "mountain_bike",
  Sidewalk: "sidewalk",
  Footway: "footway",
  Elevator: "elevator",
  Steps: "steps",
  Escalator: "escalator",
  Path: "path",
  Pedestrian: "pedestrian",
  Bridleway: "bridleway",
  PedestrianCrossing: "pedestrian_crossing",
  RestArea: "rest_area",
  ServiceArea: "service_area",
  Other: "other",
  Rail: "rail",
  Ferry: "ferry",
  RailFerry: "rail-ferry",
  Bus: "bus",
  EgressConnection: "egress_connection",
  PlatformConnnection: "platform_connnection",
  TransitConnection: "transit_connection",
  Construction: "construction"
}, es = {
  Motorway: "motorway",
  Trunk: "trunk",
  Primary: "primary",
  Secondary: "secondary",
  Tertiary: "tertiary",
  Unclassified: "unclassified",
  Residential: "residential",
  ServiceOther: "service_other"
};
function is(e) {
  return !0;
}
function Er(e) {
  return Ar(e);
}
function Ar(e, i) {
  return e == null ? e : {
    internal: e.internal == null ? void 0 : e.internal,
    link: e.link == null ? void 0 : e.link,
    surface: e.surface == null ? void 0 : e.surface,
    use: e.use == null ? void 0 : e.use,
    classification: e.classification == null ? void 0 : e.classification
  };
}
function Gr(e) {
  return Br(e, !1);
}
function Br(e, i = !1) {
  return e == null ? e : {
    internal: e.internal,
    link: e.link,
    surface: e.surface,
    use: e.use,
    classification: e.classification
  };
}
const U = {
  Auto: "auto",
  Bus: "bus",
  Taxi: "taxi",
  Truck: "truck",
  Bicycle: "bicycle",
  Bikeshare: "bikeshare",
  MotorScooter: "motor_scooter",
  Motorcycle: "motorcycle",
  Pedestrian: "pedestrian",
  LowSpeedVehicle: "low_speed_vehicle"
};
function ns(e) {
  for (const i in U)
    if (Object.prototype.hasOwnProperty.call(U, i) && U[i] === e)
      return !0;
  return !1;
}
function Pr(e) {
  return Vr(e);
}
function Vr(e, i) {
  return e;
}
function ts(e) {
  return e;
}
function rs(e, i) {
  return e;
}
const os = {
  Time: "time",
  Distance: "distance"
};
function cs(e) {
  return !0;
}
function Hr(e) {
  return Wr(e);
}
function Wr(e, i) {
  return e == null ? e : {
    fillColor: e.fillColor == null ? void 0 : e.fillColor,
    opacity: e.opacity == null ? void 0 : e.opacity,
    fill: e.fill == null ? void 0 : e.fill,
    fillOpacity: e.fillOpacity == null ? void 0 : e.fillOpacity,
    color: e.color == null ? void 0 : e.color,
    contour: e.contour == null ? void 0 : e.contour,
    metric: e.metric == null ? void 0 : e.metric
  };
}
function zr(e) {
  return Ur(e, !1);
}
function Ur(e, i = !1) {
  return e == null ? e : {
    fillColor: e.fillColor,
    opacity: e.opacity,
    fill: e.fill,
    fillOpacity: e.fillOpacity,
    color: e.color,
    contour: e.contour,
    metric: e.metric
  };
}
const as = {
  Feature: "Feature"
};
function us(e) {
  return !0;
}
function Kr(e) {
  return Qr(e);
}
function Qr(e, i) {
  return e == null ? e : {
    properties: e.properties == null ? void 0 : Hr(e.properties),
    geometry: e.geometry == null ? void 0 : e.geometry,
    type: e.type == null ? void 0 : e.type
  };
}
function $r(e) {
  return Zr(e, !1);
}
function Zr(e, i = !1) {
  return e == null ? e : {
    properties: zr(e.properties),
    geometry: e.geometry,
    type: e.type
  };
}
function ds(e) {
  return !(!("locations" in e) || e.locations === void 0 || !("costing" in e) || e.costing === void 0 || !("contours" in e) || e.contours === void 0);
}
function ls(e) {
  return Xr(e);
}
function Xr(e, i) {
  return e == null ? e : {
    id: e.id == null ? void 0 : e.id,
    locations: e.locations.map(_),
    costing: Pr(e.costing),
    costingOptions: e.costing_options == null ? void 0 : g(e.costing_options),
    contours: e.contours.map(Ft),
    polygons: e.polygons == null ? void 0 : e.polygons,
    denoise: e.denoise == null ? void 0 : e.denoise,
    generalize: e.generalize == null ? void 0 : e.generalize,
    showLocations: e.show_locations == null ? void 0 : e.show_locations
  };
}
function Yr(e) {
  return qr(e, !1);
}
function qr(e, i = !1) {
  return e == null ? e : {
    id: e.id,
    locations: e.locations.map(h),
    costing: e.costing,
    costing_options: y(e.costingOptions),
    contours: e.contours.map(kt),
    polygons: e.polygons,
    denoise: e.denoise,
    generalize: e.generalize,
    show_locations: e.showLocations
  };
}
const ss = {
  FeatureCollection: "FeatureCollection"
};
function fs(e) {
  return !(!("features" in e) || e.features === void 0 || !("type" in e) || e.type === void 0);
}
function jr(e) {
  return eo(e);
}
function eo(e, i) {
  return e == null ? e : {
    id: e.id == null ? void 0 : e.id,
    features: e.features.map(Kr),
    type: e.type
  };
}
function ps(e) {
  return io(e, !1);
}
function io(e, i = !1) {
  return e == null ? e : {
    id: e.id,
    features: e.features.map($r),
    type: e.type
  };
}
const K = {
  Poi: "poi",
  Address: "address",
  Street: "street",
  Country: "country",
  Macroregion: "macroregion",
  Region: "region",
  Macrocounty: "macrocounty",
  County: "county",
  Locality: "locality",
  Localadmin: "localadmin",
  Borough: "borough",
  Neighbourhood: "neighbourhood",
  Postalcode: "postalcode",
  Dependency: "dependency",
  Macrohood: "macrohood",
  Marinearea: "marinearea",
  Disputed: "disputed",
  Empire: "empire",
  Continent: "continent",
  Ocean: "ocean",
  Coarse: "coarse"
};
function gs(e) {
  for (const i in K)
    if (Object.prototype.hasOwnProperty.call(K, i) && K[i] === e)
      return !0;
  return !1;
}
function ys(e) {
  return no(e);
}
function no(e, i) {
  return e;
}
function ms(e) {
  return e;
}
function _s(e, i) {
  return e;
}
const hs = {
  Classified: "classified",
  Tagged: "tagged"
};
function Os(e) {
  return !0;
}
function to(e) {
  return ro(e);
}
function ro(e, i) {
  return e == null ? e : {
    predicted: e.predicted == null ? void 0 : e.predicted,
    constrainedFlow: e.constrained_flow == null ? void 0 : e.constrained_flow,
    freeFlow: e.free_flow == null ? void 0 : e.free_flow,
    type: e.type == null ? void 0 : e.type,
    _default: e.default == null ? void 0 : e.default
  };
}
function oo(e) {
  return co(e, !1);
}
function co(e, i = !1) {
  return e == null ? e : {
    predicted: e.predicted,
    constrained_flow: e.constrainedFlow,
    free_flow: e.freeFlow,
    type: e.type,
    default: e._default
  };
}
function bs(e) {
  return !0;
}
function re(e) {
  return ao(e);
}
function ao(e, i) {
  return e == null ? e : {
    id: e.id == null ? void 0 : e.id,
    value: e.value == null ? void 0 : e.value,
    tileId: e.tile_id == null ? void 0 : e.tile_id,
    level: e.level == null ? void 0 : e.level
  };
}
function oe(e) {
  return uo(e, !1);
}
function uo(e, i = !1) {
  return e == null ? e : {
    id: e.id,
    value: e.value,
    tile_id: e.tileId,
    level: e.level
  };
}
function Ss(e) {
  return !0;
}
function Q(e) {
  return lo(e);
}
function lo(e, i) {
  return e == null ? e : {
    golfCart: e.golf_cart == null ? void 0 : e.golf_cart,
    wheelchair: e.wheelchair == null ? void 0 : e.wheelchair,
    taxi: e.taxi == null ? void 0 : e.taxi,
    hOV: e.HOV == null ? void 0 : e.HOV,
    truck: e.truck == null ? void 0 : e.truck,
    emergency: e.emergency == null ? void 0 : e.emergency,
    pedestrian: e.pedestrian == null ? void 0 : e.pedestrian,
    car: e.car == null ? void 0 : e.car,
    bus: e.bus == null ? void 0 : e.bus,
    bicycle: e.bicycle == null ? void 0 : e.bicycle,
    motorcycle: e.motorcycle == null ? void 0 : e.motorcycle,
    moped: e.moped == null ? void 0 : e.moped
  };
}
function $(e) {
  return so(e, !1);
}
function so(e, i = !1) {
  return e == null ? e : {
    golf_cart: e.golfCart,
    wheelchair: e.wheelchair,
    taxi: e.taxi,
    HOV: e.hOV,
    truck: e.truck,
    emergency: e.emergency,
    pedestrian: e.pedestrian,
    car: e.car,
    bus: e.bus,
    bicycle: e.bicycle,
    motorcycle: e.motorcycle,
    moped: e.moped
  };
}
const Ts = {
  None: "none",
  Hiking: "hiking",
  MountainHiking: "mountain hiking",
  DemandingMountainHiking: "demanding mountain hiking",
  AlpineHiking: "alpine hiking",
  DemandingAlpineHiking: "demanding alpine hiking",
  DifficultAlpineHiking: "difficult alpine hiking"
}, Ns = {
  None: "none",
  Shared: "shared",
  Dedicated: "dedicated",
  Separated: "separated"
};
function ws(e) {
  return !0;
}
function fo(e) {
  return po(e);
}
function po(e, i) {
  return e == null ? e : {
    sidewalkLeft: e.sidewalk_left == null ? void 0 : e.sidewalk_left,
    sidewalkRight: e.sidewalk_right == null ? void 0 : e.sidewalk_right,
    laneCount: e.lane_count == null ? void 0 : e.lane_count,
    stopSign: e.stop_sign == null ? void 0 : e.stop_sign,
    sacScale: e.sac_scale == null ? void 0 : e.sac_scale,
    yieldSign: e.yield_sign == null ? void 0 : e.yield_sign,
    notThru: e.not_thru == null ? void 0 : e.not_thru,
    forward: e.forward == null ? void 0 : e.forward,
    endNode: e.end_node == null ? void 0 : re(e.end_node),
    truckRoute: e.truck_route == null ? void 0 : e.truck_route,
    speeds: e.speeds == null ? void 0 : to(e.speeds),
    bikeNetwork: e.bike_network == null ? void 0 : e.bike_network,
    roundAbout: e.round_about == null ? void 0 : e.round_about,
    trafficSignal: e.traffic_signal == null ? void 0 : e.traffic_signal,
    accessRestriction: e.access_restriction == null ? void 0 : e.access_restriction,
    destinationOnly: e.destination_only == null ? void 0 : e.destination_only,
    geoAttributes: e.geo_attributes == null ? void 0 : hr(e.geo_attributes),
    startRestriction: e.start_restriction == null ? void 0 : Q(e.start_restriction),
    cycleLane: e.cycle_lane == null ? void 0 : e.cycle_lane,
    endRestriction: e.end_restriction == null ? void 0 : Q(e.end_restriction),
    seasonal: e.seasonal == null ? void 0 : e.seasonal,
    countryCrossing: e.country_crossing == null ? void 0 : e.country_crossing,
    partOfComplexRestriction: e.part_of_complex_restriction == null ? void 0 : e.part_of_complex_restriction,
    hasSign: e.has_sign == null ? void 0 : e.has_sign,
    access: e.access == null ? void 0 : Q(e.access),
    bridge: e.bridge == null ? void 0 : e.bridge,
    classification: e.classification == null ? void 0 : Er(e.classification),
    toll: e.toll == null ? void 0 : e.toll,
    tunnel: e.tunnel == null ? void 0 : e.tunnel
  };
}
function go(e) {
  return yo(e, !1);
}
function yo(e, i = !1) {
  return e == null ? e : {
    sidewalk_left: e.sidewalkLeft,
    sidewalk_right: e.sidewalkRight,
    lane_count: e.laneCount,
    stop_sign: e.stopSign,
    sac_scale: e.sacScale,
    yield_sign: e.yieldSign,
    not_thru: e.notThru,
    forward: e.forward,
    end_node: oe(e.endNode),
    truck_route: e.truckRoute,
    speeds: oo(e.speeds),
    bike_network: e.bikeNetwork,
    round_about: e.roundAbout,
    traffic_signal: e.trafficSignal,
    access_restriction: e.accessRestriction,
    destination_only: e.destinationOnly,
    geo_attributes: br(e.geoAttributes),
    start_restriction: $(e.startRestriction),
    cycle_lane: e.cycleLane,
    end_restriction: $(e.endRestriction),
    seasonal: e.seasonal,
    country_crossing: e.countryCrossing,
    part_of_complex_restriction: e.partOfComplexRestriction,
    has_sign: e.hasSign,
    access: $(e.access),
    bridge: e.bridge,
    classification: Gr(e.classification),
    toll: e.toll,
    tunnel: e.tunnel
  };
}
function Rs(e) {
  return !(!("shape" in e) || e.shape === void 0 || !("wayId" in e) || e.wayId === void 0);
}
function mo(e) {
  return _o(e);
}
function _o(e, i) {
  return e == null ? e : {
    meanElevation: e.mean_elevation == null ? void 0 : e.mean_elevation,
    shape: e.shape,
    names: e.names == null ? void 0 : e.names,
    bikeNetwork: e.bike_network == null ? void 0 : Cn(e.bike_network),
    wayId: e.way_id
  };
}
function ho(e) {
  return Oo(e, !1);
}
function Oo(e, i = !1) {
  return e == null ? e : {
    mean_elevation: e.meanElevation,
    shape: e.shape,
    names: e.names,
    bike_network: vn(e.bikeNetwork),
    way_id: e.wayId
  };
}
const Js = {
  Left: "left",
  Right: "right",
  Neither: "neither"
};
function xs(e) {
  return !(!("correlatedLat" in e) || e.correlatedLat === void 0 || !("correlatedLon" in e) || e.correlatedLon === void 0 || !("percentAlong" in e) || e.percentAlong === void 0 || !("sideOfStreet" in e) || e.sideOfStreet === void 0);
}
function bo(e) {
  return So(e);
}
function So(e, i) {
  return e == null ? e : {
    edgeId: e.edge_id == null ? void 0 : re(e.edge_id),
    wayId: e.way_id == null ? void 0 : e.way_id,
    correlatedLat: e.correlated_lat,
    correlatedLon: e.correlated_lon,
    percentAlong: e.percent_along,
    sideOfStreet: e.side_of_street,
    linearReference: e.linear_reference == null ? void 0 : e.linear_reference,
    outboundReach: e.outbound_reach == null ? void 0 : e.outbound_reach,
    heading: e.heading == null ? void 0 : e.heading,
    inboundReach: e.inbound_reach == null ? void 0 : e.inbound_reach,
    distance: e.distance == null ? void 0 : e.distance,
    predictedSpeeds: e.predicted_speeds == null ? void 0 : e.predicted_speeds,
    edgeInfo: e.edge_info == null ? void 0 : mo(e.edge_info),
    edge: e.edge == null ? void 0 : fo(e.edge),
    warnings: e.warnings == null ? void 0 : e.warnings
  };
}
function To(e) {
  return No(e, !1);
}
function No(e, i = !1) {
  return e == null ? e : {
    edge_id: oe(e.edgeId),
    way_id: e.wayId,
    correlated_lat: e.correlatedLat,
    correlated_lon: e.correlatedLon,
    percent_along: e.percentAlong,
    side_of_street: e.sideOfStreet,
    linear_reference: e.linearReference,
    outbound_reach: e.outboundReach,
    heading: e.heading,
    inbound_reach: e.inboundReach,
    distance: e.distance,
    predicted_speeds: e.predictedSpeeds,
    edge_info: ho(e.edgeInfo),
    edge: go(e.edge),
    warnings: e.warnings
  };
}
const Cs = {
  Regular: "regular",
  False: "false",
  DeadEnd: "dead-end",
  Fork: "fork"
};
function Fs(e) {
  return !(!("lat" in e) || e.lat === void 0 || !("lon" in e) || e.lon === void 0);
}
function wo(e) {
  return Ro(e);
}
function Ro(e, i) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon,
    trafficSignal: e.traffic_signal == null ? void 0 : e.traffic_signal,
    type: e.type == null ? void 0 : Ee(e.type),
    nodeId: e.node_id == null ? void 0 : re(e.node_id),
    access: e.access == null ? void 0 : li(e.access),
    edgeCount: e.edge_count == null ? void 0 : e.edge_count,
    administrative: e.administrative == null ? void 0 : Ei(e.administrative),
    intersectionType: e.intersection_type == null ? void 0 : e.intersection_type,
    density: e.density == null ? void 0 : e.density,
    localEdgeCount: e.local_edge_count == null ? void 0 : e.local_edge_count,
    modeChange: e.mode_change == null ? void 0 : e.mode_change
  };
}
function Jo(e) {
  return xo(e, !1);
}
function xo(e, i = !1) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon,
    traffic_signal: e.trafficSignal,
    type: e.type,
    node_id: oe(e.nodeId),
    access: fi(e.access),
    edge_count: e.edgeCount,
    administrative: Gi(e.administrative),
    intersection_type: e.intersectionType,
    density: e.density,
    local_edge_count: e.localEdgeCount,
    mode_change: e.modeChange
  };
}
function vs(e) {
  return !0;
}
function Co(e) {
  return Fo(e);
}
function Fo(e, i) {
  return e == null ? e : {
    id: e.id == null ? void 0 : e.id,
    inputLat: e.input_lat == null ? void 0 : e.input_lat,
    inputLon: e.input_lon == null ? void 0 : e.input_lon,
    nodes: e.nodes == null ? void 0 : e.nodes.map(wo),
    edges: e.edges == null ? void 0 : e.edges.map(bo)
  };
}
function ks(e) {
  return vo(e, !1);
}
function vo(e, i = !1) {
  return e == null ? e : {
    id: e.id,
    input_lat: e.inputLat,
    input_lon: e.inputLon,
    nodes: e.nodes == null ? void 0 : e.nodes.map(Jo),
    edges: e.edges == null ? void 0 : e.edges.map(To)
  };
}
function Ds(e) {
  return !(!("text" in e) || e.text === void 0);
}
function N(e) {
  return ko(e);
}
function ko(e, i) {
  return e == null ? e : {
    text: e.text,
    isRouteNumber: e.is_route_number == null ? void 0 : e.is_route_number,
    consecutiveCount: e.consecutive_count == null ? void 0 : e.consecutive_count
  };
}
function w(e) {
  return Do(e, !1);
}
function Do(e, i = !1) {
  return e == null ? e : {
    text: e.text,
    is_route_number: e.isRouteNumber,
    consecutive_count: e.consecutiveCount
  };
}
function Ms(e) {
  return !0;
}
function Mo(e) {
  return Lo(e);
}
function Lo(e, i) {
  return e == null ? e : {
    exitNumberElements: e.exit_number_elements == null ? void 0 : e.exit_number_elements.map(
      N
    ),
    exitBranchElements: e.exit_branch_elements == null ? void 0 : e.exit_branch_elements.map(
      N
    ),
    exitTowardElements: e.exit_toward_elements == null ? void 0 : e.exit_toward_elements.map(
      N
    ),
    exitNameElements: e.exit_name_elements == null ? void 0 : e.exit_name_elements.map(
      N
    )
  };
}
function Io(e) {
  return Eo(e, !1);
}
function Eo(e, i = !1) {
  return e == null ? e : {
    exit_number_elements: e.exitNumberElements == null ? void 0 : e.exitNumberElements.map(
      w
    ),
    exit_branch_elements: e.exitBranchElements == null ? void 0 : e.exitBranchElements.map(
      w
    ),
    exit_toward_elements: e.exitTowardElements == null ? void 0 : e.exitTowardElements.map(
      w
    ),
    exit_name_elements: e.exitNameElements == null ? void 0 : e.exitNameElements.map(
      w
    )
  };
}
function Ls(e) {
  return !0;
}
function Ao(e) {
  return Go(e);
}
function Go(e, i) {
  return e == null ? e : {
    searchRadius: e.search_radius == null ? void 0 : e.search_radius,
    gpsAccuracy: e.gps_accuracy == null ? void 0 : e.gps_accuracy,
    breakageDistance: e.breakage_distance == null ? void 0 : e.breakage_distance,
    interpolationDistance: e.interpolation_distance == null ? void 0 : e.interpolation_distance,
    turnPenaltyFactor: e.turn_penalty_factor == null ? void 0 : e.turn_penalty_factor
  };
}
function Bo(e) {
  return Po(e, !1);
}
function Po(e, i = !1) {
  return e == null ? e : {
    search_radius: e.searchRadius,
    gps_accuracy: e.gpsAccuracy,
    breakage_distance: e.breakageDistance,
    interpolation_distance: e.interpolationDistance,
    turn_penalty_factor: e.turnPenaltyFactor
  };
}
const Is = {
  EdgeWalk: "edge_walk",
  MapSnap: "map_snap",
  WalkOrSnap: "walk_or_snap"
}, Es = {
  None: "none",
  Maneuvers: "maneuvers",
  Instructions: "instructions"
}, As = {
  Json: "json",
  Osrm: "osrm"
};
function Gs(e) {
  return !(!("costing" in e) || e.costing === void 0);
}
function Bs(e) {
  return Vo(e);
}
function Vo(e, i) {
  return e == null ? e : {
    id: e.id == null ? void 0 : e.id,
    shape: e.shape == null ? void 0 : e.shape.map(ne),
    encodedPolyline: e.encoded_polyline == null ? void 0 : e.encoded_polyline,
    costing: ie(e.costing),
    costingOptions: e.costing_options == null ? void 0 : g(e.costing_options),
    shapeMatch: e.shape_match == null ? void 0 : e.shape_match,
    units: e.units == null ? void 0 : m(e.units),
    language: e.language == null ? void 0 : p(e.language),
    directionsType: e.directions_type == null ? void 0 : e.directions_type,
    format: e.format == null ? void 0 : e.format,
    bannerInstructions: e.banner_instructions == null ? void 0 : e.banner_instructions,
    voiceInstructions: e.voice_instructions == null ? void 0 : e.voice_instructions,
    filters: e.filters == null ? void 0 : C(e.filters),
    beginTime: e.begin_time == null ? void 0 : e.begin_time,
    durations: e.durations == null ? void 0 : e.durations,
    useTimestamps: e.use_timestamps == null ? void 0 : e.use_timestamps,
    traceOptions: e.trace_options == null ? void 0 : Ao(e.trace_options),
    linearReferences: e.linear_references == null ? void 0 : e.linear_references,
    elevationInterval: e.elevation_interval == null ? void 0 : e.elevation_interval
  };
}
function Ho(e) {
  return Wo(e, !1);
}
function Wo(e, i = !1) {
  return e == null ? e : {
    id: e.id,
    shape: e.shape == null ? void 0 : e.shape.map(te),
    encoded_polyline: e.encodedPolyline,
    costing: e.costing,
    costing_options: y(e.costingOptions),
    shape_match: e.shapeMatch,
    units: e.units,
    language: e.language,
    directions_type: e.directionsType,
    format: e.format,
    banner_instructions: e.bannerInstructions,
    voice_instructions: e.voiceInstructions,
    filters: F(e.filters),
    begin_time: e.beginTime,
    durations: e.durations,
    use_timestamps: e.useTimestamps,
    trace_options: Bo(e.traceOptions),
    linear_references: e.linearReferences,
    elevation_interval: e.elevationInterval
  };
}
const Ps = {
  Break: "break",
  Through: "through",
  Via: "via",
  BreakThrough: "break_through"
};
function Vs(e) {
  return !(!("lat" in e) || e.lat === void 0 || !("lon" in e) || e.lon === void 0);
}
function zo(e) {
  return Uo(e);
}
function Uo(e, i) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon,
    type: e.type == null ? void 0 : e.type,
    originalIndex: e.original_index == null ? void 0 : e.original_index
  };
}
function Ko(e) {
  return Qo(e, !1);
}
function Qo(e, i = !1) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon,
    type: e.type,
    original_index: e.originalIndex
  };
}
function Hs(e) {
  return !(!("time" in e) || e.time === void 0 || !("length" in e) || e.length === void 0 || !("minLat" in e) || e.minLat === void 0 || !("maxLat" in e) || e.maxLat === void 0 || !("minLon" in e) || e.minLon === void 0 || !("maxLon" in e) || e.maxLon === void 0);
}
function Ve(e) {
  return $o(e);
}
function $o(e, i) {
  return e == null ? e : {
    time: e.time,
    length: e.length,
    minLat: e.min_lat,
    maxLat: e.max_lat,
    minLon: e.min_lon,
    maxLon: e.max_lon
  };
}
function He(e) {
  return Zo(e, !1);
}
function Zo(e, i = !1) {
  return e == null ? e : {
    time: e.time,
    length: e.length,
    min_lat: e.minLat,
    max_lat: e.maxLat,
    min_lon: e.minLon,
    max_lon: e.maxLon
  };
}
const Z = {
  Miles: "miles",
  Kilometers: "kilometers"
};
function Ws(e) {
  for (const i in Z)
    if (Object.prototype.hasOwnProperty.call(Z, i) && Z[i] === e)
      return !0;
  return !1;
}
function ce(e) {
  return Xo(e);
}
function Xo(e, i) {
  return e;
}
function zs(e) {
  return e;
}
function Us(e, i) {
  return e;
}
const X = {
  Drive: "drive",
  Pedestrian: "pedestrian",
  Bicycle: "bicycle",
  Transit: "transit"
};
function Ks(e) {
  for (const i in X)
    if (Object.prototype.hasOwnProperty.call(X, i) && X[i] === e)
      return !0;
  return !1;
}
function We(e) {
  return Yo(e);
}
function Yo(e, i) {
  return e;
}
function Qs(e) {
  return e;
}
function $s(e, i) {
  return e;
}
const Zs = {
  Car: "car",
  Motorcycle: "motorcycle",
  Bus: "bus",
  TractorTrailer: "tractor_trailer",
  MotorScooter: "motor_scooter",
  Foot: "foot",
  Wheelchair: "wheelchair",
  Segway: "segway",
  Road: "road",
  Cross: "cross",
  Hybrid: "hybrid",
  Mountain: "mountain",
  Tram: "tram",
  Metro: "metro",
  Rail: "rail",
  Ferry: "ferry",
  CableCar: "cable_car",
  Gondola: "gondola",
  Funicular: "funicular",
  GolfCart: "golf_cart",
  LowSpeedVehicle: "low_speed_vehicle"
}, Xs = {
  NoneAction: "NoneAction",
  RentBikeAtBikeShare: "RentBikeAtBikeShare",
  ReturnBikeAtBikeShare: "ReturnBikeAtBikeShare"
};
function Ys(e) {
  return !(!("type" in e) || e.type === void 0 || !("instruction" in e) || e.instruction === void 0 || !("time" in e) || e.time === void 0 || !("length" in e) || e.length === void 0 || !("beginShapeIndex" in e) || e.beginShapeIndex === void 0 || !("endShapeIndex" in e) || e.endShapeIndex === void 0 || !("travelMode" in e) || e.travelMode === void 0 || !("travelType" in e) || e.travelType === void 0);
}
function qo(e) {
  return jo(e);
}
function jo(e, i) {
  return e == null ? e : {
    type: e.type,
    instruction: e.instruction,
    verbalTransitionAlertInstruction: e.verbal_transition_alert_instruction == null ? void 0 : e.verbal_transition_alert_instruction,
    verbalPreTransitionInstruction: e.verbal_pre_transition_instruction == null ? void 0 : e.verbal_pre_transition_instruction,
    verbalPostTransitionInstruction: e.verbal_post_transition_instruction == null ? void 0 : e.verbal_post_transition_instruction,
    streetNames: e.street_names == null ? void 0 : e.street_names,
    beginStreetNames: e.begin_street_names == null ? void 0 : e.begin_street_names,
    time: e.time,
    length: e.length,
    beginShapeIndex: e.begin_shape_index,
    endShapeIndex: e.end_shape_index,
    toll: e.toll == null ? void 0 : e.toll,
    rough: e.rough == null ? void 0 : e.rough,
    gate: e.gate == null ? void 0 : e.gate,
    ferry: e.ferry == null ? void 0 : e.ferry,
    sign: e.sign == null ? void 0 : Mo(e.sign),
    roundaboutExitCount: e.roundabout_exit_count == null ? void 0 : e.roundabout_exit_count,
    departInstruction: e.depart_instruction == null ? void 0 : e.depart_instruction,
    verbalDepartInstruction: e.verbal_depart_instruction == null ? void 0 : e.verbal_depart_instruction,
    arriveInstruction: e.arrive_instruction == null ? void 0 : e.arrive_instruction,
    verbalArriveInstruction: e.verbal_arrive_instruction == null ? void 0 : e.verbal_arrive_instruction,
    transitInfo: e.transit_info == null ? void 0 : e.transit_info,
    verbalMultiCue: e.verbal_multi_cue == null ? void 0 : e.verbal_multi_cue,
    travelMode: We(e.travel_mode),
    travelType: e.travel_type,
    bssManeuverType: e.bss_maneuver_type == null ? void 0 : e.bss_maneuver_type
  };
}
function ec(e) {
  return ic(e, !1);
}
function ic(e, i = !1) {
  return e == null ? e : {
    type: e.type,
    instruction: e.instruction,
    verbal_transition_alert_instruction: e.verbalTransitionAlertInstruction,
    verbal_pre_transition_instruction: e.verbalPreTransitionInstruction,
    verbal_post_transition_instruction: e.verbalPostTransitionInstruction,
    street_names: e.streetNames,
    begin_street_names: e.beginStreetNames,
    time: e.time,
    length: e.length,
    begin_shape_index: e.beginShapeIndex,
    end_shape_index: e.endShapeIndex,
    toll: e.toll,
    rough: e.rough,
    gate: e.gate,
    ferry: e.ferry,
    sign: Io(e.sign),
    roundabout_exit_count: e.roundaboutExitCount,
    depart_instruction: e.departInstruction,
    verbal_depart_instruction: e.verbalDepartInstruction,
    arrive_instruction: e.arriveInstruction,
    verbal_arrive_instruction: e.verbalArriveInstruction,
    transit_info: e.transitInfo,
    verbal_multi_cue: e.verbalMultiCue,
    travel_mode: e.travelMode,
    travel_type: e.travelType,
    bss_maneuver_type: e.bssManeuverType
  };
}
function qs(e) {
  return !(!("shape" in e) || e.shape === void 0 || !("summary" in e) || e.summary === void 0);
}
function nc(e) {
  return tc(e);
}
function tc(e, i) {
  return e == null ? e : {
    maneuvers: e.maneuvers == null ? void 0 : e.maneuvers.map(qo),
    shape: e.shape,
    summary: Ve(e.summary),
    elevationInterval: e.elevation_interval == null ? void 0 : e.elevation_interval,
    elevation: e.elevation == null ? void 0 : e.elevation
  };
}
function rc(e) {
  return oc(e, !1);
}
function oc(e, i = !1) {
  return e == null ? e : {
    maneuvers: e.maneuvers == null ? void 0 : e.maneuvers.map(ec),
    shape: e.shape,
    summary: He(e.summary),
    elevation_interval: e.elevationInterval,
    elevation: e.elevation
  };
}
function js(e) {
  return !(!("status" in e) || e.status === void 0 || !("statusMessage" in e) || e.statusMessage === void 0 || !("units" in e) || e.units === void 0 || !("language" in e) || e.language === void 0 || !("locations" in e) || e.locations === void 0 || !("legs" in e) || e.legs === void 0 || !("summary" in e) || e.summary === void 0);
}
function ae(e) {
  return cc(e);
}
function cc(e, i) {
  return e == null ? e : {
    status: e.status,
    statusMessage: e.status_message,
    units: ce(e.units),
    language: p(e.language),
    locations: e.locations.map(
      zo
    ),
    legs: e.legs.map(nc),
    summary: Ve(e.summary)
  };
}
function ue(e) {
  return ac(e, !1);
}
function ac(e, i = !1) {
  return e == null ? e : {
    status: e.status,
    status_message: e.statusMessage,
    units: e.units,
    language: e.language,
    locations: e.locations.map(
      Ko
    ),
    legs: e.legs.map(rc),
    summary: He(e.summary)
  };
}
function ef(e) {
  return !0;
}
function ze(e) {
  return uc(e);
}
function uc(e, i) {
  return e == null ? e : {
    trip: e.trip == null ? void 0 : ae(e.trip)
  };
}
function Ue(e) {
  return dc(e, !1);
}
function dc(e, i = !1) {
  return e == null ? e : {
    trip: ue(e.trip)
  };
}
function nf(e) {
  return !(!("trip" in e) || e.trip === void 0);
}
function lc(e) {
  return sc(e);
}
function sc(e, i) {
  return e == null ? e : {
    id: e.id == null ? void 0 : e.id,
    trip: ae(e.trip),
    alternates: e.alternates == null ? void 0 : e.alternates.map(
      ze
    ),
    linearReferences: e.linear_references == null ? void 0 : e.linear_references
  };
}
function tf(e) {
  return fc(e, !1);
}
function fc(e, i = !1) {
  return e == null ? e : {
    id: e.id,
    trip: ue(e.trip),
    alternates: e.alternates == null ? void 0 : e.alternates.map(
      Ue
    ),
    linear_references: e.linearReferences
  };
}
const rf = {
  Unmatched: "unmatched",
  Interpolated: "interpolated",
  Matched: "matched"
};
function of(e) {
  return !(!("lat" in e) || e.lat === void 0 || !("lon" in e) || e.lon === void 0 || !("type" in e) || e.type === void 0);
}
function Ke(e) {
  return pc(e);
}
function pc(e, i) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon,
    type: e.type,
    edgeIndex: e.edge_index == null ? void 0 : e.edge_index,
    beginRouteDiscontinuity: e.begin_route_discontinuity == null ? void 0 : e.begin_route_discontinuity,
    endRouteDiscontinuity: e.end_route_discontinuity == null ? void 0 : e.end_route_discontinuity,
    distanceAlongEdge: e.distance_along_edge == null ? void 0 : e.distance_along_edge,
    distanceFromTracePoint: e.distance_from_trace_point == null ? void 0 : e.distance_from_trace_point
  };
}
function Qe(e) {
  return gc(e, !1);
}
function gc(e, i = !1) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon,
    type: e.type,
    edge_index: e.edgeIndex,
    begin_route_discontinuity: e.beginRouteDiscontinuity,
    end_route_discontinuity: e.endRouteDiscontinuity,
    distance_along_edge: e.distanceAlongEdge,
    distance_from_trace_point: e.distanceFromTracePoint
  };
}
const Y = {
  Auto: "auto",
  Bus: "bus",
  Taxi: "taxi",
  Truck: "truck",
  Bicycle: "bicycle",
  Bikeshare: "bikeshare",
  MotorScooter: "motor_scooter",
  Motorcycle: "motorcycle",
  Pedestrian: "pedestrian",
  LowSpeedVehicle: "low_speed_vehicle"
};
function cf(e) {
  for (const i in Y)
    if (Object.prototype.hasOwnProperty.call(Y, i) && Y[i] === e)
      return !0;
  return !1;
}
function $e(e) {
  return yc(e);
}
function yc(e, i) {
  return e;
}
function af(e) {
  return e;
}
function uf(e, i) {
  return e;
}
function df(e) {
  return !(!("distance" in e) || e.distance === void 0 || !("time" in e) || e.time === void 0 || !("fromIndex" in e) || e.fromIndex === void 0 || !("toIndex" in e) || e.toIndex === void 0);
}
function lf(e) {
  return mc(e);
}
function mc(e, i) {
  return e == null ? e : {
    distance: e.distance,
    time: e.time,
    fromIndex: e.from_index,
    toIndex: e.to_index
  };
}
function sf(e) {
  return _c(e, !1);
}
function _c(e, i = !1) {
  return e == null ? e : {
    distance: e.distance,
    time: e.time,
    from_index: e.fromIndex,
    to_index: e.toIndex
  };
}
function ff(e) {
  return !(!("lat" in e) || e.lat === void 0 || !("lon" in e) || e.lon === void 0);
}
function le(e) {
  return hc(e);
}
function hc(e, i) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon,
    searchCutoff: e.search_cutoff == null ? void 0 : e.search_cutoff
  };
}
function se(e) {
  return Oc(e, !1);
}
function Oc(e, i = !1) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon,
    search_cutoff: e.searchCutoff
  };
}
const pf = {
  None: "none",
  Maneuvers: "maneuvers",
  Instructions: "instructions"
};
function gf(e) {
  return !(!("sources" in e) || e.sources === void 0 || !("targets" in e) || e.targets === void 0 || !("costing" in e) || e.costing === void 0);
}
function yf(e) {
  return bc(e);
}
function bc(e, i) {
  return e == null ? e : {
    units: e.units == null ? void 0 : m(e.units),
    language: e.language == null ? void 0 : p(e.language),
    directionsType: e.directions_type == null ? void 0 : e.directions_type,
    id: e.id == null ? void 0 : e.id,
    sources: e.sources.map(le),
    targets: e.targets.map(le),
    costing: $e(e.costing),
    costingOptions: e.costing_options == null ? void 0 : g(e.costing_options),
    matrixLocations: e.matrix_locations == null ? void 0 : e.matrix_locations
  };
}
function Sc(e) {
  return Tc(e, !1);
}
function Tc(e, i = !1) {
  return e == null ? e : {
    units: e.units,
    language: e.language,
    directions_type: e.directionsType,
    id: e.id,
    sources: e.sources.map(se),
    targets: e.targets.map(se),
    costing: e.costing,
    costing_options: y(e.costingOptions),
    matrix_locations: e.matrixLocations
  };
}
function mf(e) {
  return !0;
}
function Nc(e) {
  return wc(e);
}
function wc(e, i) {
  return e == null ? e : {
    text: e.text == null ? void 0 : e.text,
    code: e.code == null ? void 0 : e.code
  };
}
function Rc(e) {
  return Jc(e, !1);
}
function Jc(e, i = !1) {
  return e == null ? e : {
    text: e.text,
    code: e.code
  };
}
function _f(e) {
  return !(!("sources" in e) || e.sources === void 0 || !("targets" in e) || e.targets === void 0 || !("sourcesToTargets" in e) || e.sourcesToTargets === void 0 || !("units" in e) || e.units === void 0);
}
function xc(e) {
  return Cc(e);
}
function Cc(e, i) {
  return e == null ? e : {
    id: e.id == null ? void 0 : e.id,
    sources: e.sources.map(_),
    targets: e.targets.map(_),
    sourcesToTargets: e.sources_to_targets,
    warnings: e.warnings == null ? void 0 : e.warnings.map(Nc),
    units: ce(e.units)
  };
}
function hf(e) {
  return Fc(e, !1);
}
function Fc(e, i = !1) {
  return e == null ? e : {
    id: e.id,
    sources: e.sources.map(h),
    targets: e.targets.map(h),
    sources_to_targets: e.sourcesToTargets,
    warnings: e.warnings == null ? void 0 : e.warnings.map(Rc),
    units: e.units
  };
}
const Of = {
  None: "none",
  Maneuvers: "maneuvers",
  Instructions: "instructions"
};
function bf(e) {
  return !(!("locations" in e) || e.locations === void 0);
}
function Sf(e) {
  return vc(e);
}
function vc(e, i) {
  return e == null ? e : {
    units: e.units == null ? void 0 : m(e.units),
    language: e.language == null ? void 0 : p(e.language),
    directionsType: e.directions_type == null ? void 0 : e.directions_type,
    locations: e.locations.map(_),
    costing: e.costing == null ? void 0 : Le(e.costing),
    costingOptions: e.costing_options == null ? void 0 : g(e.costing_options),
    verbose: e.verbose == null ? void 0 : e.verbose
  };
}
function kc(e) {
  return Dc(e, !1);
}
function Dc(e, i = !1) {
  return e == null ? e : {
    units: e.units,
    language: e.language,
    directions_type: e.directionsType,
    locations: e.locations.map(h),
    costing: e.costing,
    costing_options: y(e.costingOptions),
    verbose: e.verbose
  };
}
const Tf = {
  None: "none",
  Maneuvers: "maneuvers",
  Instructions: "instructions"
}, Nf = {
  Json: "json",
  Osrm: "osrm"
};
function wf(e) {
  return !(!("locations" in e) || e.locations === void 0 || !("costing" in e) || e.costing === void 0);
}
function Rf(e) {
  return Mc(e);
}
function Mc(e, i) {
  return e == null ? e : {
    units: e.units == null ? void 0 : m(e.units),
    language: e.language == null ? void 0 : p(e.language),
    directionsType: e.directions_type == null ? void 0 : e.directions_type,
    format: e.format == null ? void 0 : e.format,
    bannerInstructions: e.banner_instructions == null ? void 0 : e.banner_instructions,
    voiceInstructions: e.voice_instructions == null ? void 0 : e.voice_instructions,
    filters: e.filters == null ? void 0 : C(e.filters),
    id: e.id == null ? void 0 : e.id,
    locations: e.locations.map(_),
    costing: $e(e.costing),
    costingOptions: e.costing_options == null ? void 0 : g(e.costing_options),
    elevationInterval: e.elevation_interval == null ? void 0 : e.elevation_interval
  };
}
function Lc(e) {
  return Ic(e, !1);
}
function Ic(e, i = !1) {
  return e == null ? e : {
    units: e.units,
    language: e.language,
    directions_type: e.directionsType,
    format: e.format,
    banner_instructions: e.bannerInstructions,
    voice_instructions: e.voiceInstructions,
    filters: F(e.filters),
    id: e.id,
    locations: e.locations.map(h),
    costing: e.costing,
    costing_options: y(e.costingOptions),
    elevation_interval: e.elevationInterval
  };
}
function Jf(e) {
  return !0;
}
function Ec(e) {
  return Ac(e);
}
function Ac(e, i) {
  return e == null ? e : {
    iso31661: e.iso_3166_1 == null ? void 0 : e.iso_3166_1,
    iso31661Alpha3: e.iso_3166_1_alpha3 == null ? void 0 : e.iso_3166_1_alpha3
  };
}
function Gc(e) {
  return Bc(e, !1);
}
function Bc(e, i = !1) {
  return e == null ? e : {
    iso_3166_1: e.iso31661,
    iso_3166_1_alpha3: e.iso31661Alpha3
  };
}
const xf = {
  KmH: "km/h",
  Mph: "mph"
};
function Cf(e) {
  return !0;
}
function Pc(e) {
  return Vc(e);
}
function Vc(e, i) {
  return e == null ? e : {
    speed: e.speed == null ? void 0 : e.speed,
    unit: e.unit == null ? void 0 : e.unit,
    unknown: e.unknown == null ? void 0 : e.unknown,
    none: e.none == null ? void 0 : e.none
  };
}
function Hc(e) {
  return Wc(e, !1);
}
function Wc(e, i = !1) {
  return e == null ? e : {
    speed: e.speed,
    unit: e.unit,
    unknown: e.unknown,
    none: e.none
  };
}
function Ff(e) {
  return !0;
}
function zc(e) {
  return Uc(e);
}
function Uc(e, i) {
  return e == null ? e : {
    distance: e.distance == null ? void 0 : e.distance,
    duration: e.duration == null ? void 0 : e.duration,
    weight: e.weight == null ? void 0 : e.weight,
    speed: e.speed == null ? void 0 : e.speed,
    maxspeed: e.maxspeed == null ? void 0 : e.maxspeed.map(Pc)
  };
}
function Kc(e) {
  return Qc(e, !1);
}
function Qc(e, i = !1) {
  return e == null ? e : {
    distance: e.distance,
    duration: e.duration,
    weight: e.weight,
    speed: e.speed,
    maxspeed: e.maxspeed == null ? void 0 : e.maxspeed.map(Hc)
  };
}
const vf = {
  Text: "text",
  Icon: "icon",
  Delimiter: "delimiter",
  ExitNumber: "exit-number",
  Exit: "exit",
  Lane: "lane"
};
function kf(e) {
  return !0;
}
function $c(e) {
  return Zc(e);
}
function Zc(e, i) {
  return e == null ? e : {
    text: e.text == null ? void 0 : e.text,
    type: e.type == null ? void 0 : e.type
  };
}
function Xc(e) {
  return Yc(e, !1);
}
function Yc(e, i = !1) {
  return e == null ? e : {
    text: e.text,
    type: e.type
  };
}
const q = {
  Uturn: "uturn",
  SharpRight: "sharp right",
  Right: "right",
  SlightRight: "slight right",
  Straight: "straight",
  SlightLeft: "slight left",
  Left: "left",
  SharpLeft: "sharp left"
};
function Df(e) {
  for (const i in q)
    if (Object.prototype.hasOwnProperty.call(q, i) && q[i] === e)
      return !0;
  return !1;
}
function Ze(e) {
  return qc(e);
}
function qc(e, i) {
  return e;
}
function Mf(e) {
  return e;
}
function Lf(e, i) {
  return e;
}
const If = {
  Turn: "turn",
  NewName: "new name",
  Depart: "depart",
  Arrive: "arrive",
  Merge: "merge",
  OnRamp: "on ramp",
  OffRamp: "off ramp",
  Fork: "fork",
  EndOfRoad: "end of road",
  Continue: "continue",
  Roundabout: "roundabout",
  Rotary: "rotary",
  RoundaboutTurn: "roundabout turn",
  Notification: "notification",
  ExitRoundabout: "exit roundabout",
  ExitRotary: "exit rotary"
};
function Ef(e) {
  return !(!("text" in e) || e.text === void 0);
}
function fe(e) {
  return jc(e);
}
function jc(e, i) {
  return e == null ? e : {
    text: e.text,
    type: e.type == null ? void 0 : e.type,
    modifier: e.modifier == null ? void 0 : Ze(e.modifier),
    components: e.components == null ? void 0 : e.components.map($c)
  };
}
function pe(e) {
  return ea(e, !1);
}
function ea(e, i = !1) {
  return e == null ? e : {
    text: e.text,
    type: e.type,
    modifier: e.modifier,
    components: e.components == null ? void 0 : e.components.map(Xc)
  };
}
function Af(e) {
  return !(!("distanceAlongGeometry" in e) || e.distanceAlongGeometry === void 0 || !("primary" in e) || e.primary === void 0);
}
function ia(e) {
  return na(e);
}
function na(e, i) {
  return e == null ? e : {
    distanceAlongGeometry: e.distanceAlongGeometry,
    primary: fe(e.primary),
    secondary: e.secondary == null ? void 0 : fe(e.secondary)
  };
}
function ta(e) {
  return ra(e, !1);
}
function ra(e, i = !1) {
  return e == null ? e : {
    distanceAlongGeometry: e.distanceAlongGeometry,
    primary: pe(e.primary),
    secondary: pe(e.secondary)
  };
}
const Gf = {
  Ok: "Ok",
  InvalidUrl: "InvalidUrl",
  InvalidService: "InvalidService",
  InvalidVersion: "InvalidVersion",
  InvalidOptions: "InvalidOptions",
  InvalidQuery: "InvalidQuery",
  InvalidValue: "InvalidValue",
  NoSegment: "NoSegment",
  TooBig: "TooBig",
  NoRoute: "NoRoute",
  NoTable: "NoTable",
  NotImplemented: "NotImplemented",
  NoTrips: "NoTrips"
};
function Bf(e) {
  return !(!("code" in e) || e.code === void 0);
}
function Pf(e) {
  return oa(e);
}
function oa(e, i) {
  return e == null ? e : {
    code: e.code,
    message: e.message == null ? void 0 : e.message,
    dataVersion: e.data_version == null ? void 0 : e.data_version
  };
}
function Vf(e) {
  return ca(e, !1);
}
function ca(e, i = !1) {
  return e == null ? e : {
    code: e.code,
    message: e.message,
    data_version: e.dataVersion
  };
}
const Hf = {
  None: "none",
  Uturn: "uturn",
  SharpRight: "sharp right",
  Right: "right",
  SlightRight: "slight right",
  Straight: "straight",
  SlightLeft: "slight left",
  Left: "left",
  SharpLeft: "sharp left"
};
function Wf(e) {
  return !(!("indications" in e) || e.indications === void 0 || !("valid" in e) || e.valid === void 0);
}
function aa(e) {
  return ua(e);
}
function ua(e, i) {
  return e == null ? e : {
    indications: e.indications,
    valid: e.valid
  };
}
function da(e) {
  return la(e, !1);
}
function la(e, i = !1) {
  return e == null ? e : {
    indications: e.indications,
    valid: e.valid
  };
}
const zf = {
  Toll: "toll",
  Ferry: "ferry",
  Restricted: "restricted",
  Motorway: "motorway",
  Tunnel: "tunnel"
};
function Uf(e) {
  return !(!("location" in e) || e.location === void 0 || !("bearings" in e) || e.bearings === void 0 || !("entry" in e) || e.entry === void 0);
}
function sa(e) {
  return fa(e);
}
function fa(e, i) {
  return e == null ? e : {
    location: e.location,
    bearings: e.bearings,
    classes: e.classes == null ? void 0 : e.classes,
    entry: e.entry,
    _in: e.in == null ? void 0 : e.in,
    out: e.out == null ? void 0 : e.out,
    lanes: e.lanes == null ? void 0 : e.lanes.map(aa),
    adminIndex: e.admin_index == null ? void 0 : e.admin_index,
    duration: e.duration == null ? void 0 : e.duration,
    turnDuration: e.turn_duration == null ? void 0 : e.turn_duration,
    turnWeight: e.turn_weight == null ? void 0 : e.turn_weight,
    geometryIndex: e.geometry_index == null ? void 0 : e.geometry_index,
    weight: e.weight == null ? void 0 : e.weight
  };
}
function pa(e) {
  return ga(e, !1);
}
function ga(e, i = !1) {
  return e == null ? e : {
    location: e.location,
    bearings: e.bearings,
    classes: e.classes,
    entry: e.entry,
    in: e._in,
    out: e.out,
    lanes: e.lanes == null ? void 0 : e.lanes.map(da),
    admin_index: e.adminIndex,
    duration: e.duration,
    turn_duration: e.turnDuration,
    turn_weight: e.turnWeight,
    geometry_index: e.geometryIndex,
    weight: e.weight
  };
}
function Kf(e) {
  return !(!("distanceFromStart" in e) || e.distanceFromStart === void 0 || !("geometryIndex" in e) || e.geometryIndex === void 0 || !("waypointIndex" in e) || e.waypointIndex === void 0);
}
function ya(e) {
  return ma(e);
}
function ma(e, i) {
  return e == null ? e : {
    distanceFromStart: e.distance_from_start,
    geometryIndex: e.geometry_index,
    waypointIndex: e.waypoint_index
  };
}
function _a(e) {
  return ha(e, !1);
}
function ha(e, i = !1) {
  return e == null ? e : {
    distance_from_start: e.distanceFromStart,
    geometry_index: e.geometryIndex,
    waypoint_index: e.waypointIndex
  };
}
const Qf = {
  Turn: "turn",
  NewName: "new name",
  Depart: "depart",
  Arrive: "arrive",
  Merge: "merge",
  Ramp: "ramp",
  OnRamp: "on ramp",
  OffRamp: "off ramp",
  Fork: "fork",
  EndOfRoad: "end of road",
  UseLane: "use lane",
  Continue: "continue",
  Roundabout: "roundabout",
  Rotary: "rotary",
  RoundaboutTurn: "roundabout turn",
  Notification: "notification",
  ExitRoundabout: "exit roundabout",
  ExitRotary: "exit rotary"
};
function $f(e) {
  return !(!("location" in e) || e.location === void 0 || !("bearingBefore" in e) || e.bearingBefore === void 0 || !("bearingAfter" in e) || e.bearingAfter === void 0 || !("type" in e) || e.type === void 0);
}
function Oa(e) {
  return ba(e);
}
function ba(e, i) {
  return e == null ? e : {
    location: e.location,
    instruction: e.instruction == null ? void 0 : e.instruction,
    bearingBefore: e.bearing_before,
    bearingAfter: e.bearing_after,
    type: e.type,
    modifier: e.modifier == null ? void 0 : Ze(e.modifier),
    exit: e.exit == null ? void 0 : e.exit
  };
}
function Sa(e) {
  return Ta(e, !1);
}
function Ta(e, i = !1) {
  return e == null ? e : {
    location: e.location,
    instruction: e.instruction,
    bearing_before: e.bearingBefore,
    bearing_after: e.bearingAfter,
    type: e.type,
    modifier: e.modifier,
    exit: e.exit
  };
}
function Zf(e) {
  return !(!("distanceAlongGeometry" in e) || e.distanceAlongGeometry === void 0 || !("announcement" in e) || e.announcement === void 0);
}
function Na(e) {
  return wa(e);
}
function wa(e, i) {
  return e == null ? e : {
    distanceAlongGeometry: e.distanceAlongGeometry,
    announcement: e.announcement,
    ssmlAnnouncement: e.ssmlAnnouncement == null ? void 0 : e.ssmlAnnouncement
  };
}
function Ra(e) {
  return Ja(e, !1);
}
function Ja(e, i = !1) {
  return e == null ? e : {
    distanceAlongGeometry: e.distanceAlongGeometry,
    announcement: e.announcement,
    ssmlAnnouncement: e.ssmlAnnouncement
  };
}
const Xf = {
  Left: "left",
  Right: "right"
}, Yf = {
  Mutcd: "mutcd",
  Vienna: "vienna"
};
function qf(e) {
  return !(!("distance" in e) || e.distance === void 0 || !("duration" in e) || e.duration === void 0 || !("geometry" in e) || e.geometry === void 0 || !("mode" in e) || e.mode === void 0 || !("maneuver" in e) || e.maneuver === void 0);
}
function xa(e) {
  return Ca(e);
}
function Ca(e, i) {
  return e == null ? e : {
    distance: e.distance,
    duration: e.duration,
    geometry: e.geometry,
    weight: e.weight == null ? void 0 : e.weight,
    name: e.name == null ? void 0 : e.name,
    ref: e.ref == null ? void 0 : e.ref,
    pronunciation: e.pronunciation == null ? void 0 : e.pronunciation,
    destinations: e.destinations == null ? void 0 : e.destinations,
    exits: e.exits == null ? void 0 : e.exits,
    mode: e.mode,
    maneuver: Oa(e.maneuver),
    intersections: e.intersections == null ? void 0 : e.intersections.map(sa),
    rotaryName: e.rotary_name == null ? void 0 : e.rotary_name,
    rotaryPronunciation: e.rotary_pronunciation == null ? void 0 : e.rotary_pronunciation,
    drivingSide: e.driving_side == null ? void 0 : e.driving_side,
    voiceInstructions: e.voiceInstructions == null ? void 0 : e.voiceInstructions.map(
      Na
    ),
    bannerInstructions: e.bannerInstructions == null ? void 0 : e.bannerInstructions.map(
      ia
    ),
    speedLimitSign: e.speedLimitSign == null ? void 0 : e.speedLimitSign,
    speedLimitUnit: e.speedLimitUnit == null ? void 0 : e.speedLimitUnit
  };
}
function Fa(e) {
  return va(e, !1);
}
function va(e, i = !1) {
  return e == null ? e : {
    distance: e.distance,
    duration: e.duration,
    geometry: e.geometry,
    weight: e.weight,
    name: e.name,
    ref: e.ref,
    pronunciation: e.pronunciation,
    destinations: e.destinations,
    exits: e.exits,
    mode: e.mode,
    maneuver: Sa(e.maneuver),
    intersections: e.intersections == null ? void 0 : e.intersections.map(pa),
    rotary_name: e.rotaryName,
    rotary_pronunciation: e.rotaryPronunciation,
    driving_side: e.drivingSide,
    voiceInstructions: e.voiceInstructions == null ? void 0 : e.voiceInstructions.map(
      Ra
    ),
    bannerInstructions: e.bannerInstructions == null ? void 0 : e.bannerInstructions.map(
      ta
    ),
    speedLimitSign: e.speedLimitSign,
    speedLimitUnit: e.speedLimitUnit
  };
}
function jf(e) {
  return !(!("distance" in e) || e.distance === void 0 || !("duration" in e) || e.duration === void 0 || !("steps" in e) || e.steps === void 0);
}
function ka(e) {
  return Da(e);
}
function Da(e, i) {
  return e == null ? e : {
    distance: e.distance,
    duration: e.duration,
    weight: e.weight == null ? void 0 : e.weight,
    summary: e.summary == null ? void 0 : e.summary,
    steps: e.steps.map(xa),
    annotation: e.annotation == null ? void 0 : zc(e.annotation),
    viaWaypoints: e.via_waypoints == null ? void 0 : e.via_waypoints.map(ya),
    admins: e.admins == null ? void 0 : e.admins.map(Ec)
  };
}
function Ma(e) {
  return La(e, !1);
}
function La(e, i = !1) {
  return e == null ? e : {
    distance: e.distance,
    duration: e.duration,
    weight: e.weight,
    summary: e.summary,
    steps: e.steps.map(Fa),
    annotation: Kc(e.annotation),
    via_waypoints: e.viaWaypoints == null ? void 0 : e.viaWaypoints.map(_a),
    admins: e.admins == null ? void 0 : e.admins.map(Gc)
  };
}
function ep(e) {
  return !(!("distance" in e) || e.distance === void 0 || !("duration" in e) || e.duration === void 0 || !("geometry" in e) || e.geometry === void 0 || !("legs" in e) || e.legs === void 0);
}
function Ia(e) {
  return Ea(e);
}
function Ea(e, i) {
  return e == null ? e : {
    distance: e.distance,
    duration: e.duration,
    geometry: e.geometry,
    weight: e.weight == null ? void 0 : e.weight,
    weightName: e.weight_name == null ? void 0 : e.weight_name,
    legs: e.legs.map(ka)
  };
}
function Aa(e) {
  return Ga(e, !1);
}
function Ga(e, i = !1) {
  return e == null ? e : {
    distance: e.distance,
    duration: e.duration,
    geometry: e.geometry,
    weight: e.weight,
    weight_name: e.weightName,
    legs: e.legs.map(Ma)
  };
}
function ip(e) {
  return !(!("location" in e) || e.location === void 0 || !("distance" in e) || e.distance === void 0);
}
function Ba(e) {
  return Pa(e);
}
function Pa(e, i) {
  return e == null ? e : {
    name: e.name == null ? void 0 : e.name,
    location: e.location,
    distance: e.distance,
    hint: e.hint == null ? void 0 : e.hint
  };
}
function Va(e) {
  return Ha(e, !1);
}
function Ha(e, i = !1) {
  return e == null ? e : {
    name: e.name,
    location: e.location,
    distance: e.distance,
    hint: e.hint
  };
}
const np = {
  Ok: "Ok",
  InvalidUrl: "InvalidUrl",
  InvalidService: "InvalidService",
  InvalidVersion: "InvalidVersion",
  InvalidOptions: "InvalidOptions",
  InvalidQuery: "InvalidQuery",
  InvalidValue: "InvalidValue",
  NoSegment: "NoSegment",
  TooBig: "TooBig",
  NoRoute: "NoRoute",
  NoTable: "NoTable",
  NotImplemented: "NotImplemented",
  NoTrips: "NoTrips"
};
function Xe(e) {
  return !(!("code" in e) || e.code === void 0);
}
function tp(e) {
  return Ye(e);
}
function Ye(e, i) {
  return e == null ? e : {
    code: e.code,
    message: e.message == null ? void 0 : e.message,
    dataVersion: e.data_version == null ? void 0 : e.data_version,
    waypoints: e.waypoints == null ? void 0 : e.waypoints.map(Ba),
    routes: e.routes == null ? void 0 : e.routes.map(Ia)
  };
}
function Wa(e) {
  return za(e, !1);
}
function za(e, i = !1) {
  return e == null ? e : {
    code: e.code,
    message: e.message,
    data_version: e.dataVersion,
    waypoints: e.waypoints == null ? void 0 : e.waypoints.map(Va),
    routes: e.routes == null ? void 0 : e.routes.map(Aa)
  };
}
function rp(e) {
  return !(!("gid" in e) || e.gid === void 0 || !("layer" in e) || e.layer === void 0 || !("name" in e) || e.name === void 0 || !("precision" in e) || e.precision === void 0);
}
function op(e) {
  return Ua(e);
}
function Ua(e, i) {
  return e == null ? e : {
    addendum: e.addendum == null ? void 0 : Oe(e.addendum),
    addressComponents: e.address_components == null ? void 0 : Se(e.address_components),
    coarseLocation: e.coarse_location == null ? void 0 : e.coarse_location,
    confidence: e.confidence == null ? void 0 : e.confidence,
    context: e.context == null ? void 0 : De(e.context),
    distance: e.distance == null ? void 0 : e.distance,
    formattedAddressLine: e.formatted_address_line == null ? void 0 : e.formatted_address_line,
    formattedAddressLines: e.formatted_address_lines == null ? void 0 : e.formatted_address_lines,
    gid: e.gid,
    layer: e.layer,
    matchType: e.match_type == null ? void 0 : Ae(e.match_type),
    name: e.name,
    precision: Pe(e.precision),
    sources: e.sources == null ? void 0 : e.sources.map(Ge)
  };
}
function cp(e) {
  return Ka(e, !1);
}
function Ka(e, i = !1) {
  return e == null ? e : {
    addendum: be(e.addendum),
    address_components: Te(e.addressComponents),
    coarse_location: e.coarseLocation,
    confidence: e.confidence,
    context: Me(e.context),
    distance: e.distance,
    formatted_address_line: e.formattedAddressLine,
    formatted_address_lines: e.formattedAddressLines,
    gid: e.gid,
    layer: e.layer,
    match_type: e.matchType,
    name: e.name,
    precision: e.precision,
    sources: e.sources == null ? void 0 : e.sources.map(Be)
  };
}
function qe(e) {
  return !(!("trip" in e) || e.trip === void 0);
}
function ap(e) {
  return je(e);
}
function je(e, i) {
  return e == null ? e : {
    id: e.id == null ? void 0 : e.id,
    trip: ae(e.trip),
    alternates: e.alternates == null ? void 0 : e.alternates.map(
      ze
    )
  };
}
function Qa(e) {
  return $a(e, !1);
}
function $a(e, i = !1) {
  return e == null ? e : {
    id: e.id,
    trip: ue(e.trip),
    alternates: e.alternates == null ? void 0 : e.alternates.map(
      Ue
    )
  };
}
function ge(e) {
  return Za(e);
}
function Za(e, i) {
  return e == null || typeof e != "object" ? e : Xe(e) ? Ye(e) : qe(e) ? je(e) : {};
}
function up(e) {
  return Xa(e, !1);
}
function Xa(e, i = !1) {
  return e == null || typeof e != "object" ? e : Xe(e) ? Wa(e) : qe(e) ? Qa(e) : {};
}
function dp(e) {
  return !0;
}
function Ya(e) {
  return qa(e);
}
function qa(e, i) {
  return e == null ? e : {
    excludeTunnel: e.exclude_tunnel == null ? void 0 : e.exclude_tunnel,
    excludeBridge: e.exclude_bridge == null ? void 0 : e.exclude_bridge,
    excludeRamp: e.exclude_ramp == null ? void 0 : e.exclude_ramp,
    excludeClosures: e.exclude_closures == null ? void 0 : e.exclude_closures,
    minRoadClass: e.min_road_class == null ? void 0 : J(e.min_road_class),
    maxRoadClass: e.max_road_class == null ? void 0 : J(e.max_road_class)
  };
}
function ja(e) {
  return eu(e, !1);
}
function eu(e, i = !1) {
  return e == null ? e : {
    exclude_tunnel: e.excludeTunnel,
    exclude_bridge: e.excludeBridge,
    exclude_ramp: e.excludeRamp,
    exclude_closures: e.excludeClosures,
    min_road_class: e.minRoadClass,
    max_road_class: e.maxRoadClass
  };
}
const lp = {
  Break: "break",
  Through: "through",
  Via: "via",
  BreakThrough: "break_through"
}, sp = {
  Same: "same",
  Opposite: "opposite",
  Either: "either"
};
function fp(e) {
  return !(!("lat" in e) || e.lat === void 0 || !("lon" in e) || e.lon === void 0);
}
function ye(e) {
  return iu(e);
}
function iu(e, i) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon,
    type: e.type == null ? void 0 : e.type,
    heading: e.heading == null ? void 0 : e.heading,
    headingTolerance: e.heading_tolerance == null ? void 0 : e.heading_tolerance,
    minimumReachability: e.minimum_reachability == null ? void 0 : e.minimum_reachability,
    radius: e.radius == null ? void 0 : e.radius,
    rankCandidates: e.rank_candidates == null ? void 0 : e.rank_candidates,
    preferredSide: e.preferred_side == null ? void 0 : e.preferred_side,
    nodeSnapTolerance: e.node_snap_tolerance == null ? void 0 : e.node_snap_tolerance,
    streetSideTolerance: e.street_side_tolerance == null ? void 0 : e.street_side_tolerance,
    streetSideMaxDistance: e.street_side_max_distance == null ? void 0 : e.street_side_max_distance,
    searchFilter: e.search_filter == null ? void 0 : Ya(e.search_filter)
  };
}
function me(e) {
  return nu(e, !1);
}
function nu(e, i = !1) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon,
    type: e.type,
    heading: e.heading,
    heading_tolerance: e.headingTolerance,
    minimum_reachability: e.minimumReachability,
    radius: e.radius,
    rank_candidates: e.rankCandidates,
    preferred_side: e.preferredSide,
    node_snap_tolerance: e.nodeSnapTolerance,
    street_side_tolerance: e.streetSideTolerance,
    street_side_max_distance: e.streetSideMaxDistance,
    search_filter: ja(
      e.searchFilter
    )
  };
}
const pp = {
  None: "none",
  Maneuvers: "maneuvers",
  Instructions: "instructions"
}, gp = {
  Json: "json",
  Osrm: "osrm"
};
function yp(e) {
  return !(!("locations" in e) || e.locations === void 0 || !("costing" in e) || e.costing === void 0);
}
function mp(e) {
  return tu(e);
}
function tu(e, i) {
  return e == null ? e : {
    units: e.units == null ? void 0 : m(e.units),
    language: e.language == null ? void 0 : p(e.language),
    directionsType: e.directions_type == null ? void 0 : e.directions_type,
    format: e.format == null ? void 0 : e.format,
    bannerInstructions: e.banner_instructions == null ? void 0 : e.banner_instructions,
    voiceInstructions: e.voice_instructions == null ? void 0 : e.voice_instructions,
    filters: e.filters == null ? void 0 : C(e.filters),
    id: e.id == null ? void 0 : e.id,
    locations: e.locations.map(ye),
    costing: Le(e.costing),
    costingOptions: e.costing_options == null ? void 0 : g(e.costing_options),
    excludeLocations: e.exclude_locations == null ? void 0 : e.exclude_locations.map(
      ye
    ),
    excludePolygons: e.exclude_polygons == null ? void 0 : e.exclude_polygons,
    alternates: e.alternates == null ? void 0 : e.alternates,
    elevationInterval: e.elevation_interval == null ? void 0 : e.elevation_interval,
    roundaboutExits: e.roundabout_exits == null ? void 0 : e.roundabout_exits
  };
}
function ru(e) {
  return ou(e, !1);
}
function ou(e, i = !1) {
  return e == null ? e : {
    units: e.units,
    language: e.language,
    directions_type: e.directionsType,
    format: e.format,
    banner_instructions: e.bannerInstructions,
    voice_instructions: e.voiceInstructions,
    filters: F(e.filters),
    id: e.id,
    locations: e.locations.map(me),
    costing: e.costing,
    costing_options: y(e.costingOptions),
    exclude_locations: e.excludeLocations == null ? void 0 : e.excludeLocations.map(me),
    exclude_polygons: e.excludePolygons,
    alternates: e.alternates,
    elevation_interval: e.elevationInterval,
    roundabout_exits: e.roundaboutExits
  };
}
const _p = {
  Break: "break",
  Through: "through",
  Via: "via",
  BreakThrough: "break_through"
};
function hp(e) {
  return !(!("lat" in e) || e.lat === void 0 || !("lon" in e) || e.lon === void 0);
}
function Op(e) {
  return cu(e);
}
function cu(e, i) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon,
    type: e.type == null ? void 0 : e.type
  };
}
function bp(e) {
  return au(e, !1);
}
function au(e, i = !1) {
  return e == null ? e : {
    lat: e.lat,
    lon: e.lon,
    type: e.type
  };
}
const j = {
  Openstreetmap: "openstreetmap",
  Openaddresses: "openaddresses",
  Whosonfirst: "whosonfirst",
  Geonames: "geonames",
  Foursquare: "foursquare"
};
function Sp(e) {
  for (const i in j)
    if (Object.prototype.hasOwnProperty.call(j, i) && j[i] === e)
      return !0;
  return !1;
}
function Tp(e) {
  return uu(e);
}
function uu(e, i) {
  return e;
}
function Np(e) {
  return e;
}
function wp(e, i) {
  return e;
}
const ee = {
  EdgeNames: "edge.names",
  EdgeLength: "edge.length",
  EdgeSpeed: "edge.speed",
  EdgeRoadClass: "edge.road_class",
  EdgeBeginHeading: "edge.begin_heading",
  EdgeEndHeading: "edge.end_heading",
  EdgeBeginShapeIndex: "edge.begin_shape_index",
  EdgeEndShapeIndex: "edge.end_shape_index",
  EdgeTraversability: "edge.traversability",
  EdgeUse: "edge.use",
  EdgeToll: "edge.toll",
  EdgeUnpaved: "edge.unpaved",
  EdgeTunnel: "edge.tunnel",
  EdgeBridge: "edge.bridge",
  EdgeRoundabout: "edge.roundabout",
  EdgeInternalIntersection: "edge.internal_intersection",
  EdgeDriveOnRight: "edge.drive_on_right",
  EdgeSurface: "edge.surface",
  EdgeSignExitNumber: "edge.sign.exit_number",
  EdgeSignExitBranch: "edge.sign.exit_branch",
  EdgeSignExitToward: "edge.sign.exit_toward",
  EdgeSignExitName: "edge.sign.exit_name",
  EdgeTravelMode: "edge.travel_mode",
  EdgeVehicleType: "edge.vehicle_type",
  EdgePedestrianType: "edge.pedestrian_type",
  EdgeBicycleType: "edge.bicycle_type",
  EdgeTransitType: "edge.transit_type",
  EdgeId: "edge.id",
  EdgeWayId: "edge.way_id",
  EdgeWeightedGrade: "edge.weighted_grade",
  EdgeMaxUpwardGrade: "edge.max_upward_grade",
  EdgeMaxDownwardGrade: "edge.max_downward_grade",
  EdgeMeanElevation: "edge.mean_elevation",
  EdgeLaneCount: "edge.lane_count",
  EdgeCycleLane: "edge.cycle_lane",
  EdgeBicycleNetwork: "edge.bicycle_network",
  EdgeSacScale: "edge.sac_scale",
  EdgeSidewalk: "edge.sidewalk",
  EdgeDensity: "edge.density",
  EdgeSpeedLimit: "edge.speed_limit",
  EdgeTruckSpeed: "edge.truck_speed",
  EdgeTruckRoute: "edge.truck_route",
  NodeIntersectingEdgeBeginHeading: "node.intersecting_edge.begin_heading",
  NodeIntersectingEdgeFromEdgeNameConsistency: "node.intersecting_edge.from_edge_name_consistency",
  NodeIntersectingEdgeToEdgeNameConsistency: "node.intersecting_edge.to_edge_name_consistency",
  NodeIntersectingEdgeDriveability: "node.intersecting_edge.driveability",
  NodeIntersectingEdgeCyclability: "node.intersecting_edge.cyclability",
  NodeIntersectingEdgeWalkability: "node.intersecting_edge.walkability",
  NodeIntersectingEdgeUse: "node.intersecting_edge.use",
  NodeIntersectingEdgeRoadClass: "node.intersecting_edge.road_class",
  NodeElapsedTime: "node.elapsed_time",
  NodeAdminIndex: "node.admin_index",
  NodeType: "node.type",
  NodeFork: "node.fork",
  NodeTimeZone: "node.time_zone",
  OsmChangeset: "osm_changeset",
  Shape: "shape",
  AdminCountryCode: "admin.country_code",
  AdminCountryText: "admin.country_text",
  AdminStateCode: "admin.state_code",
  AdminStateText: "admin.state_text",
  MatchedPoint: "matched.point",
  MatchedType: "matched.type",
  MatchedEdgeIndex: "matched.edge_index",
  MatchedBeginRouteDiscontinuity: "matched.begin_route_discontinuity",
  MatchedEndRouteDiscontinuity: "matched.end_route_discontinuity",
  MatchedDistanceAlongEdge: "matched.distance_along_edge",
  MatchedDistanceFromTracePoint: "matched.distance_from_trace_point"
};
function Rp(e) {
  for (const i in ee)
    if (Object.prototype.hasOwnProperty.call(ee, i) && ee[i] === e)
      return !0;
  return !1;
}
function du(e) {
  return lu(e);
}
function lu(e, i) {
  return e;
}
function su(e) {
  return e;
}
function Jp(e, i) {
  return e;
}
const xp = {
  Include: "include",
  Exclude: "exclude"
};
function Cp(e) {
  return !(!("attributes" in e) || e.attributes === void 0 || !("action" in e) || e.action === void 0);
}
function fu(e) {
  return pu(e);
}
function pu(e, i) {
  return e == null ? e : {
    attributes: e.attributes.map(
      du
    ),
    action: e.action
  };
}
function gu(e) {
  return yu(e, !1);
}
function yu(e, i = !1) {
  return e == null ? e : {
    attributes: e.attributes.map(
      su
    ),
    action: e.action
  };
}
const Fp = {
  PavedSmooth: "paved_smooth",
  Paved: "paved",
  PavedRough: "paved_rough",
  Compacted: "compacted",
  Dirt: "dirt",
  Gravel: "gravel",
  Path: "path",
  Impassable: "impassable"
}, vp = {
  Car: "car",
  Motorcycle: "motorcycle",
  Bus: "bus",
  TractorTrailer: "tractor_trailer",
  GolfCart: "golf_cart",
  LowSpeedVehicle: "low_speed_vehicle"
}, kp = {
  Foot: "foot",
  Wheelchair: "wheelchair",
  Segway: "segway"
}, Dp = {
  Road: "road",
  Cross: "cross",
  Hybrid: "hybrid",
  Mountain: "mountain"
}, Mp = {
  Tram: "tram",
  Metro: "metro",
  Rail: "rail",
  Bus: "bus",
  Ferry: "ferry",
  CableCar: "cable_car",
  Gondola: "gondola",
  Funicular: "funicular"
}, Lp = {
  None: "none",
  Shared: "shared",
  Dedicated: "dedicated",
  Separated: "separated"
}, Ip = {
  Left: "left",
  Right: "right",
  Both: "both",
  None: "none"
};
function Ep(e) {
  return !0;
}
function ei(e) {
  return mu(e);
}
function mu(e, i) {
  return e == null ? e : {
    names: e.names == null ? void 0 : e.names,
    length: e.length == null ? void 0 : e.length,
    speed: e.speed == null ? void 0 : e.speed,
    roadClass: e.road_class == null ? void 0 : J(e.road_class),
    beginHeading: e.begin_heading == null ? void 0 : e.begin_heading,
    endHeading: e.end_heading == null ? void 0 : e.end_heading,
    beginShapeIndex: e.begin_shape_index == null ? void 0 : e.begin_shape_index,
    endShapeIndex: e.end_shape_index == null ? void 0 : e.end_shape_index,
    traversability: e.traversability == null ? void 0 : R(e.traversability),
    use: e.use == null ? void 0 : Ie(e.use),
    toll: e.toll == null ? void 0 : e.toll,
    unpaved: e.unpaved == null ? void 0 : e.unpaved,
    tunnel: e.tunnel == null ? void 0 : e.tunnel,
    bridge: e.bridge == null ? void 0 : e.bridge,
    roundabout: e.roundabout == null ? void 0 : e.roundabout,
    internalIntersection: e.internal_intersection == null ? void 0 : e.internal_intersection,
    driveOnRight: e.drive_on_right == null ? void 0 : e.drive_on_right,
    surface: e.surface == null ? void 0 : e.surface,
    sign: e.sign == null ? void 0 : Gt(e.sign),
    travelMode: e.travel_mode == null ? void 0 : We(e.travel_mode),
    vehicleType: e.vehicle_type == null ? void 0 : e.vehicle_type,
    pedestrianType: e.pedestrian_type == null ? void 0 : e.pedestrian_type,
    bicycleType: e.bicycle_type == null ? void 0 : e.bicycle_type,
    transitType: e.transit_type == null ? void 0 : e.transit_type,
    id: e.id == null ? void 0 : e.id,
    wayId: e.way_id == null ? void 0 : e.way_id,
    weightedGrade: e.weighted_grade == null ? void 0 : e.weighted_grade,
    maxUpwardGrade: e.max_upward_grade == null ? void 0 : e.max_upward_grade,
    maxDownwardGrade: e.max_downward_grade == null ? void 0 : e.max_downward_grade,
    meanElevation: e.mean_elevation == null ? void 0 : e.mean_elevation,
    laneCount: e.lane_count == null ? void 0 : e.lane_count,
    cycleLane: e.cycle_lane == null ? void 0 : e.cycle_lane,
    bicycleNetwork: e.bicycle_network == null ? void 0 : e.bicycle_network,
    sacScale: e.sac_scale == null ? void 0 : e.sac_scale,
    sidewalk: e.sidewalk == null ? void 0 : e.sidewalk,
    density: e.density == null ? void 0 : e.density,
    speedLimit: e.speed_limit == null ? void 0 : e.speed_limit,
    truckSpeed: e.truck_speed == null ? void 0 : e.truck_speed,
    truckRoute: e.truck_route == null ? void 0 : e.truck_route,
    endNode: e.end_node == null ? void 0 : Xt(e.end_node)
  };
}
function ii(e) {
  return _u(e, !1);
}
function _u(e, i = !1) {
  return e == null ? e : {
    names: e.names,
    length: e.length,
    speed: e.speed,
    road_class: e.roadClass,
    begin_heading: e.beginHeading,
    end_heading: e.endHeading,
    begin_shape_index: e.beginShapeIndex,
    end_shape_index: e.endShapeIndex,
    traversability: e.traversability,
    use: e.use,
    toll: e.toll,
    unpaved: e.unpaved,
    tunnel: e.tunnel,
    bridge: e.bridge,
    roundabout: e.roundabout,
    internal_intersection: e.internalIntersection,
    drive_on_right: e.driveOnRight,
    surface: e.surface,
    sign: Pt(e.sign),
    travel_mode: e.travelMode,
    vehicle_type: e.vehicleType,
    pedestrian_type: e.pedestrianType,
    bicycle_type: e.bicycleType,
    transit_type: e.transitType,
    id: e.id,
    way_id: e.wayId,
    weighted_grade: e.weightedGrade,
    max_upward_grade: e.maxUpwardGrade,
    max_downward_grade: e.maxDownwardGrade,
    mean_elevation: e.meanElevation,
    lane_count: e.laneCount,
    cycle_lane: e.cycleLane,
    bicycle_network: e.bicycleNetwork,
    sac_scale: e.sacScale,
    sidewalk: e.sidewalk,
    density: e.density,
    speed_limit: e.speedLimit,
    truck_speed: e.truckSpeed,
    truck_route: e.truckRoute,
    end_node: qt(e.endNode)
  };
}
function Ap(e) {
  return !0;
}
function hu(e) {
  return Ou(e);
}
function Ou(e, i) {
  return e == null ? e : {
    edges: e.edges == null ? void 0 : e.edges.map(ei),
    admins: e.admins == null ? void 0 : e.admins.map(Ne),
    matchedPoints: e.matched_points == null ? void 0 : e.matched_points.map(Ke),
    osmChangeset: e.osm_changeset == null ? void 0 : e.osm_changeset,
    shape: e.shape == null ? void 0 : e.shape,
    confidenceScore: e.confidence_score == null ? void 0 : e.confidence_score
  };
}
function bu(e) {
  return Su(e, !1);
}
function Su(e, i = !1) {
  return e == null ? e : {
    edges: e.edges == null ? void 0 : e.edges.map(ii),
    admins: e.admins == null ? void 0 : e.admins.map(we),
    matched_points: e.matchedPoints == null ? void 0 : e.matchedPoints.map(Qe),
    osm_changeset: e.osmChangeset,
    shape: e.shape,
    confidence_score: e.confidenceScore
  };
}
const Gp = {
  EdgeWalk: "edge_walk",
  MapSnap: "map_snap",
  WalkOrSnap: "walk_or_snap"
}, Bp = {
  None: "none",
  Maneuvers: "maneuvers",
  Instructions: "instructions"
};
function Pp(e) {
  return !(!("costing" in e) || e.costing === void 0);
}
function Vp(e) {
  return Tu(e);
}
function Tu(e, i) {
  return e == null ? e : {
    id: e.id == null ? void 0 : e.id,
    shape: e.shape == null ? void 0 : e.shape.map(ne),
    encodedPolyline: e.encoded_polyline == null ? void 0 : e.encoded_polyline,
    costing: ie(e.costing),
    costingOptions: e.costing_options == null ? void 0 : g(e.costing_options),
    shapeMatch: e.shape_match == null ? void 0 : e.shape_match,
    units: e.units == null ? void 0 : m(e.units),
    language: e.language == null ? void 0 : p(e.language),
    directionsType: e.directions_type == null ? void 0 : e.directions_type,
    filters: e.filters == null ? void 0 : fu(e.filters),
    elevationInterval: e.elevation_interval == null ? void 0 : e.elevation_interval
  };
}
function Nu(e) {
  return wu(e, !1);
}
function wu(e, i = !1) {
  return e == null ? e : {
    id: e.id,
    shape: e.shape == null ? void 0 : e.shape.map(te),
    encoded_polyline: e.encodedPolyline,
    costing: e.costing,
    costing_options: y(e.costingOptions),
    shape_match: e.shapeMatch,
    units: e.units,
    language: e.language,
    directions_type: e.directionsType,
    filters: gu(e.filters),
    elevation_interval: e.elevationInterval
  };
}
function Hp(e) {
  return !0;
}
function Ru(e) {
  return Ju(e);
}
function Ju(e, i) {
  return e == null ? e : {
    edges: e.edges == null ? void 0 : e.edges.map(ei),
    admins: e.admins == null ? void 0 : e.admins.map(Ne),
    matchedPoints: e.matched_points == null ? void 0 : e.matched_points.map(Ke),
    osmChangeset: e.osm_changeset == null ? void 0 : e.osm_changeset,
    shape: e.shape == null ? void 0 : e.shape,
    confidenceScore: e.confidence_score == null ? void 0 : e.confidence_score,
    id: e.id == null ? void 0 : e.id,
    units: e.units == null ? void 0 : ce(e.units),
    alternatePaths: e.alternate_paths == null ? void 0 : e.alternate_paths.map(
      hu
    )
  };
}
function Wp(e) {
  return xu(e, !1);
}
function xu(e, i = !1) {
  return e == null ? e : {
    edges: e.edges == null ? void 0 : e.edges.map(ii),
    admins: e.admins == null ? void 0 : e.admins.map(we),
    matched_points: e.matchedPoints == null ? void 0 : e.matchedPoints.map(Qe),
    osm_changeset: e.osmChangeset,
    shape: e.shape,
    confidence_score: e.confidenceScore,
    id: e.id,
    units: e.units,
    alternate_paths: e.alternatePaths == null ? void 0 : e.alternatePaths.map(
      bu
    )
  };
}
function zp(e) {
  return !(!("tzId" in e) || e.tzId === void 0 || !("baseUtcOffset" in e) || e.baseUtcOffset === void 0 || !("dstOffset" in e) || e.dstOffset === void 0 || !("timestamp" in e) || e.timestamp === void 0 || !("localRfc2822Timestamp" in e) || e.localRfc2822Timestamp === void 0 || !("localRfc3389Timestamp" in e) || e.localRfc3389Timestamp === void 0);
}
function Cu(e) {
  return Fu(e);
}
function Fu(e, i) {
  return e == null ? e : {
    tzId: e.tz_id,
    baseUtcOffset: e.base_utc_offset,
    dstOffset: e.dst_offset,
    timestamp: e.timestamp,
    localRfc2822Timestamp: e.local_rfc_2822_timestamp,
    localRfc3389Timestamp: e.local_rfc_3389_timestamp
  };
}
function Up(e) {
  return vu(e, !1);
}
function vu(e, i = !1) {
  return e == null ? e : {
    tz_id: e.tzId,
    base_utc_offset: e.baseUtcOffset,
    dst_offset: e.dstOffset,
    timestamp: e.timestamp,
    local_rfc_2822_timestamp: e.localRfc2822Timestamp,
    local_rfc_3389_timestamp: e.localRfc3389Timestamp
  };
}
class Kp extends b {
  /**
   * The Stadia elevation API allows you to get the elevation of any point on earth. You can pass either a simple set of points or a Google encoded polyline string. This pairs well with our routing APIs, so you can generate an elevation profile for your next bike or run.
   * Get the elevation profile along a polyline or at a point.
   */
  async elevationRaw(i, t) {
    const n = {}, r = {};
    r["Content-Type"] = "application/json", this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/elevation/v1",
        method: "POST",
        headers: r,
        query: n,
        body: kr(i.heightRequest)
      },
      t
    );
    return new u(
      o,
      (c) => Mr(c)
    );
  }
  /**
   * The Stadia elevation API allows you to get the elevation of any point on earth. You can pass either a simple set of points or a Google encoded polyline string. This pairs well with our routing APIs, so you can generate an elevation profile for your next bike or run.
   * Get the elevation profile along a polyline or at a point.
   */
  async elevation(i = {}, t) {
    return await (await this.elevationRaw(i, t)).value();
  }
  /**
   * Retrieve the time zone identifier, standard UTC offset, special offset (such as DST), and the localized time in several common formats.
   * Get time zone information for any point on earth.
   */
  async tzLookupRaw(i, t) {
    if (i.lat == null)
      throw new s(
        "lat",
        'Required parameter "lat" was null or undefined when calling tzLookup().'
      );
    if (i.lng == null)
      throw new s(
        "lng",
        'Required parameter "lng" was null or undefined when calling tzLookup().'
      );
    const n = {};
    i.lat != null && (n.lat = i.lat), i.lng != null && (n.lng = i.lng), i.timestamp != null && (n.timestamp = i.timestamp);
    const r = {};
    this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/tz/lookup/v1",
        method: "GET",
        headers: r,
        query: n
      },
      t
    );
    return new u(
      o,
      (c) => Cu(c)
    );
  }
  /**
   * Retrieve the time zone identifier, standard UTC offset, special offset (such as DST), and the localized time in several common formats.
   * Get time zone information for any point on earth.
   */
  async tzLookup(i, t) {
    return await (await this.tzLookupRaw(i, t)).value();
  }
}
class Qp extends b {
  /**
   * The isochrone API computes reachable areas within a time or distance constraint. The resulting polygon can be rendered on a map and used for assessing urban mobility, planning, or as a search filter of places within a constrained range.
   * Calculate areas of equal travel time from a location.
   */
  async isochroneRaw(i, t) {
    const n = {}, r = {};
    r["Content-Type"] = "application/json", this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/isochrone/v1",
        method: "POST",
        headers: r,
        query: n,
        body: Yr(i.isochroneRequest)
      },
      t
    );
    return new u(
      o,
      (c) => jr(c)
    );
  }
  /**
   * The isochrone API computes reachable areas within a time or distance constraint. The resulting polygon can be rendered on a map and used for assessing urban mobility, planning, or as a search filter of places within a constrained range.
   * Calculate areas of equal travel time from a location.
   */
  async isochrone(i = {}, t) {
    return await (await this.isochroneRaw(i, t)).value();
  }
  /**
   * The map matching API transforms a recorded route into navigation instructions like you would get from the `route` endpoint. The input can be in the form of either an encoded polyline, or (optionally) timestamped coordinates.
   * Match a recorded route to the road network.
   */
  async mapMatchRaw(i, t) {
    const n = {}, r = {};
    r["Content-Type"] = "application/json", this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/map_match/v1",
        method: "POST",
        headers: r,
        query: n,
        body: Ho(i.mapMatchRequest)
      },
      t
    );
    return new u(
      o,
      (c) => lc(c)
    );
  }
  /**
   * The map matching API transforms a recorded route into navigation instructions like you would get from the `route` endpoint. The input can be in the form of either an encoded polyline, or (optionally) timestamped coordinates.
   * Match a recorded route to the road network.
   */
  async mapMatch(i = {}, t) {
    return await (await this.mapMatchRaw(i, t)).value();
  }
  /**
   * The nearest roads API allows you query for detailed information about streets and intersections near the input locations.
   * Find the nearest roads to the set of input locations.
   */
  async nearestRoadsRaw(i, t) {
    const n = {}, r = {};
    r["Content-Type"] = "application/json", this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/nearest_roads/v1",
        method: "POST",
        headers: r,
        query: n,
        body: kc(
          i.nearestRoadsRequest
        )
      },
      t
    );
    return new u(
      o,
      (c) => c.map(Co)
    );
  }
  /**
   * The nearest roads API allows you query for detailed information about streets and intersections near the input locations.
   * Find the nearest roads to the set of input locations.
   */
  async nearestRoads(i = {}, t) {
    return await (await this.nearestRoadsRaw(
      i,
      t
    )).value();
  }
  /**
   * The optimized route API is a mix of the matrix and normal route API. For an optimized route, the start and end point are fixed, but the intermediate points will be re-ordered to form an optimal route visiting all nodes once.
   * Calculate an optimized route between a known start and end point.
   */
  async optimizedRouteRaw(i, t) {
    const n = {}, r = {};
    r["Content-Type"] = "application/json", this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/optimized_route/v1",
        method: "POST",
        headers: r,
        query: n,
        body: Lc(
          i.optimizedRouteRequest
        )
      },
      t
    );
    return new u(
      o,
      (c) => ge(c)
    );
  }
  /**
   * The optimized route API is a mix of the matrix and normal route API. For an optimized route, the start and end point are fixed, but the intermediate points will be re-ordered to form an optimal route visiting all nodes once.
   * Calculate an optimized route between a known start and end point.
   */
  async optimizedRoute(i = {}, t) {
    return await (await this.optimizedRouteRaw(
      i,
      t
    )).value();
  }
  /**
   * The route (turn-by-turn) API computes routes between two or more locations. It supports a variety of tunable costing methods, and supports routing through intermediate waypoints and discontinuous multi-leg routes.
   * Get turn by turn routing instructions between two or more locations.
   */
  async routeRaw(i, t) {
    const n = {}, r = {};
    r["Content-Type"] = "application/json", this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/route/v1",
        method: "POST",
        headers: r,
        query: n,
        body: ru(i.routeRequest)
      },
      t
    );
    return new u(
      o,
      (c) => ge(c)
    );
  }
  /**
   * The route (turn-by-turn) API computes routes between two or more locations. It supports a variety of tunable costing methods, and supports routing through intermediate waypoints and discontinuous multi-leg routes.
   * Get turn by turn routing instructions between two or more locations.
   */
  async route(i = {}, t) {
    return await (await this.routeRaw(i, t)).value();
  }
  /**
   * The time distance matrix API lets you compare travel times between a set of possible start and end points. See https://docs.stadiamaps.com/limits/ for documentation of our latest limits.
   * Calculate a time distance matrix for use in an optimizer.
   */
  async timeDistanceMatrixRaw(i, t) {
    const n = {}, r = {};
    r["Content-Type"] = "application/json", this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/matrix/v1",
        method: "POST",
        headers: r,
        query: n,
        body: Sc(i.matrixRequest)
      },
      t
    );
    return new u(
      o,
      (c) => xc(c)
    );
  }
  /**
   * The time distance matrix API lets you compare travel times between a set of possible start and end points. See https://docs.stadiamaps.com/limits/ for documentation of our latest limits.
   * Calculate a time distance matrix for use in an optimizer.
   */
  async timeDistanceMatrix(i = {}, t) {
    return await (await this.timeDistanceMatrixRaw(
      i,
      t
    )).value();
  }
  /**
   * The trace attributes endpoint retrieves detailed information along a route, returning details for each section along the path, as well as any intersections encountered. In addition to tracing a recording route, this is great for providing just-in-time info to navigation applications, enabling them to conserve resources by omitting info like speed limits upfront that may be irrelevant if the user goes off-route.
   * Trace the attributes of roads visited on a route.
   */
  async traceAttributesRaw(i, t) {
    const n = {}, r = {};
    r["Content-Type"] = "application/json", this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/trace_attributes/v1",
        method: "POST",
        headers: r,
        query: n,
        body: Nu(
          i.traceAttributesRequest
        )
      },
      t
    );
    return new u(
      o,
      (c) => Ru(c)
    );
  }
  /**
   * The trace attributes endpoint retrieves detailed information along a route, returning details for each section along the path, as well as any intersections encountered. In addition to tracing a recording route, this is great for providing just-in-time info to navigation applications, enabling them to conserve resources by omitting info like speed limits upfront that may be irrelevant if the user goes off-route.
   * Trace the attributes of roads visited on a route.
   */
  async traceAttributes(i = {}, t) {
    return await (await this.traceAttributesRaw(
      i,
      t
    )).value();
  }
}
let ku = class extends b {
  /**
   * Autocomplete enables interactive search-as-you-type user experiences, suggesting places as you type, along with information that will help your users find the correct place quickly.
   * Search and geocode quickly based on partial input.
   */
  async autocompleteRaw(i, t) {
    if (i.text == null)
      throw new s(
        "text",
        'Required parameter "text" was null or undefined when calling autocomplete().'
      );
    const n = {};
    i.text != null && (n.text = i.text), i.focusPointLat != null && (n["focus.point.lat"] = i.focusPointLat), i.focusPointLon != null && (n["focus.point.lon"] = i.focusPointLon), i.boundaryRectMinLat != null && (n["boundary.rect.min_lat"] = i.boundaryRectMinLat), i.boundaryRectMaxLat != null && (n["boundary.rect.max_lat"] = i.boundaryRectMaxLat), i.boundaryRectMinLon != null && (n["boundary.rect.min_lon"] = i.boundaryRectMinLon), i.boundaryRectMaxLon != null && (n["boundary.rect.max_lon"] = i.boundaryRectMaxLon), i.boundaryCircleLat != null && (n["boundary.circle.lat"] = i.boundaryCircleLat), i.boundaryCircleLon != null && (n["boundary.circle.lon"] = i.boundaryCircleLon), i.boundaryCircleRadius != null && (n["boundary.circle.radius"] = i.boundaryCircleRadius), i.boundaryCountry != null && (n["boundary.country"] = i.boundaryCountry.join(a.csv)), i.boundaryGid != null && (n["boundary.gid"] = i.boundaryGid), i.layers != null && (n.layers = i.layers.join(
      a.csv
    )), i.sources != null && (n.sources = i.sources.join(
      a.csv
    )), i.size != null && (n.size = i.size), i.lang != null && (n.lang = i.lang);
    const r = {};
    this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/geocoding/v1/autocomplete",
        method: "GET",
        headers: r,
        query: n
      },
      t
    );
    return new u(
      o,
      (c) => O(c)
    );
  }
  /**
   * Autocomplete enables interactive search-as-you-type user experiences, suggesting places as you type, along with information that will help your users find the correct place quickly.
   * Search and geocode quickly based on partial input.
   */
  async autocomplete(i, t) {
    return await (await this.autocompleteRaw(
      i,
      t
    )).value();
  }
  /**
   */
  async autocompleteV2Raw(i, t) {
    if (i.text == null)
      throw new s(
        "text",
        'Required parameter "text" was null or undefined when calling autocompleteV2().'
      );
    const n = {};
    i.text != null && (n.text = i.text), i.focusPointLat != null && (n["focus.point.lat"] = i.focusPointLat), i.focusPointLon != null && (n["focus.point.lon"] = i.focusPointLon), i.layers != null && (n.layers = i.layers.join(
      a.csv
    )), i.sources != null && (n.sources = i.sources.join(
      a.csv
    )), i.boundaryGid != null && (n["boundary.gid"] = i.boundaryGid), i.boundaryCountry != null && (n["boundary.country"] = i.boundaryCountry.join(a.csv)), i.boundaryRectMinLat != null && (n["boundary.rect.min_lat"] = i.boundaryRectMinLat), i.boundaryRectMinLon != null && (n["boundary.rect.min_lon"] = i.boundaryRectMinLon), i.boundaryRectMaxLat != null && (n["boundary.rect.max_lat"] = i.boundaryRectMaxLat), i.boundaryRectMaxLon != null && (n["boundary.rect.max_lon"] = i.boundaryRectMaxLon), i.boundaryCircleLat != null && (n["boundary.circle.lat"] = i.boundaryCircleLat), i.boundaryCircleLon != null && (n["boundary.circle.lon"] = i.boundaryCircleLon), i.boundaryCircleRadius != null && (n["boundary.circle.radius"] = i.boundaryCircleRadius), i.size != null && (n.size = i.size), i.lang != null && (n.lang = i.lang);
    const r = {};
    this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/geocoding/v2/autocomplete",
        method: "GET",
        headers: r,
        query: n
      },
      t
    );
    return new u(
      o,
      (c) => T(c)
    );
  }
  /**
   */
  async autocompleteV2(i, t) {
    return await (await this.autocompleteV2Raw(
      i,
      t
    )).value();
  }
  /**
   * Many search result components include an associated GID field (for example, an address may have a `localadmin_gid`). The place endpoint lets you look up these places directly by ID. Note that GIDs are not stable for all sources. See the [online documentation](https://docs.stadiamaps.com/geocoding-search-autocomplete/place-lookup/) for details.
   * Retrieve details of a place using its GID.
   */
  async placeDetailsRaw(i, t) {
    if (i.ids == null)
      throw new s(
        "ids",
        'Required parameter "ids" was null or undefined when calling placeDetails().'
      );
    const n = {};
    i.ids != null && (n.ids = i.ids.join(
      a.csv
    )), i.lang != null && (n.lang = i.lang);
    const r = {};
    this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/geocoding/v1/place",
        method: "GET",
        headers: r,
        query: n
      },
      t
    );
    return new u(
      o,
      (c) => O(c)
    );
  }
  /**
   * Many search result components include an associated GID field (for example, an address may have a `localadmin_gid`). The place endpoint lets you look up these places directly by ID. Note that GIDs are not stable for all sources. See the [online documentation](https://docs.stadiamaps.com/geocoding-search-autocomplete/place-lookup/) for details.
   * Retrieve details of a place using its GID.
   */
  async placeDetails(i, t) {
    return await (await this.placeDetailsRaw(
      i,
      t
    )).value();
  }
  /**
   */
  async placeDetailsV2Raw(i, t) {
    if (i.ids == null)
      throw new s(
        "ids",
        'Required parameter "ids" was null or undefined when calling placeDetailsV2().'
      );
    const n = {};
    i.ids != null && (n.ids = i.ids.join(
      a.csv
    )), i.lang != null && (n.lang = i.lang);
    const r = {};
    this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/geocoding/v2/place_details",
        method: "GET",
        headers: r,
        query: n
      },
      t
    );
    return new u(
      o,
      (c) => T(c)
    );
  }
  /**
   */
  async placeDetailsV2(i, t) {
    return await (await this.placeDetailsV2Raw(
      i,
      t
    )).value();
  }
  /**
   * Reverse geocoding and search finds places and addresses near any geographic coordinates.
   * Find places and addresses near geographic coordinates (reverse geocoding).
   */
  async reverseRaw(i, t) {
    if (i.pointLat == null)
      throw new s(
        "pointLat",
        'Required parameter "pointLat" was null or undefined when calling reverse().'
      );
    if (i.pointLon == null)
      throw new s(
        "pointLon",
        'Required parameter "pointLon" was null or undefined when calling reverse().'
      );
    const n = {};
    i.pointLat != null && (n["point.lat"] = i.pointLat), i.pointLon != null && (n["point.lon"] = i.pointLon), i.boundaryCircleRadius != null && (n["boundary.circle.radius"] = i.boundaryCircleRadius), i.layers != null && (n.layers = i.layers.join(
      a.csv
    )), i.sources != null && (n.sources = i.sources.join(
      a.csv
    )), i.boundaryCountry != null && (n["boundary.country"] = i.boundaryCountry.join(a.csv)), i.boundaryGid != null && (n["boundary.gid"] = i.boundaryGid), i.size != null && (n.size = i.size), i.lang != null && (n.lang = i.lang);
    const r = {};
    this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/geocoding/v1/reverse",
        method: "GET",
        headers: r,
        query: n
      },
      t
    );
    return new u(
      o,
      (c) => O(c)
    );
  }
  /**
   * Reverse geocoding and search finds places and addresses near any geographic coordinates.
   * Find places and addresses near geographic coordinates (reverse geocoding).
   */
  async reverse(i, t) {
    return await (await this.reverseRaw(i, t)).value();
  }
  /**
   */
  async reverseV2Raw(i, t) {
    if (i.pointLat == null)
      throw new s(
        "pointLat",
        'Required parameter "pointLat" was null or undefined when calling reverseV2().'
      );
    if (i.pointLon == null)
      throw new s(
        "pointLon",
        'Required parameter "pointLon" was null or undefined when calling reverseV2().'
      );
    const n = {};
    i.pointLat != null && (n["point.lat"] = i.pointLat), i.pointLon != null && (n["point.lon"] = i.pointLon), i.layers != null && (n.layers = i.layers.join(
      a.csv
    )), i.sources != null && (n.sources = i.sources.join(
      a.csv
    )), i.boundaryGid != null && (n["boundary.gid"] = i.boundaryGid), i.boundaryCountry != null && (n["boundary.country"] = i.boundaryCountry.join(a.csv)), i.boundaryCircleRadius != null && (n["boundary.circle.radius"] = i.boundaryCircleRadius), i.size != null && (n.size = i.size), i.lang != null && (n.lang = i.lang);
    const r = {};
    this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/geocoding/v2/reverse",
        method: "GET",
        headers: r,
        query: n
      },
      t
    );
    return new u(
      o,
      (c) => T(c)
    );
  }
  /**
   */
  async reverseV2(i, t) {
    return await (await this.reverseV2Raw(i, t)).value();
  }
  /**
   * The search endpoint lets you search for addresses, points of interest, and administrative areas. This is most commonly used for forward geocoding applications where you need to find the geographic coordinates of an address.
   * Search for location and other info using a place name or address (forward geocoding).
   */
  async searchRaw(i, t) {
    if (i.text == null)
      throw new s(
        "text",
        'Required parameter "text" was null or undefined when calling search().'
      );
    const n = {};
    i.text != null && (n.text = i.text), i.focusPointLat != null && (n["focus.point.lat"] = i.focusPointLat), i.focusPointLon != null && (n["focus.point.lon"] = i.focusPointLon), i.boundaryRectMinLat != null && (n["boundary.rect.min_lat"] = i.boundaryRectMinLat), i.boundaryRectMaxLat != null && (n["boundary.rect.max_lat"] = i.boundaryRectMaxLat), i.boundaryRectMinLon != null && (n["boundary.rect.min_lon"] = i.boundaryRectMinLon), i.boundaryRectMaxLon != null && (n["boundary.rect.max_lon"] = i.boundaryRectMaxLon), i.boundaryCircleLat != null && (n["boundary.circle.lat"] = i.boundaryCircleLat), i.boundaryCircleLon != null && (n["boundary.circle.lon"] = i.boundaryCircleLon), i.boundaryCircleRadius != null && (n["boundary.circle.radius"] = i.boundaryCircleRadius), i.boundaryCountry != null && (n["boundary.country"] = i.boundaryCountry.join(a.csv)), i.boundaryGid != null && (n["boundary.gid"] = i.boundaryGid), i.layers != null && (n.layers = i.layers.join(
      a.csv
    )), i.sources != null && (n.sources = i.sources.join(
      a.csv
    )), i.size != null && (n.size = i.size), i.lang != null && (n.lang = i.lang);
    const r = {};
    this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/geocoding/v1/search",
        method: "GET",
        headers: r,
        query: n
      },
      t
    );
    return new u(
      o,
      (c) => O(c)
    );
  }
  /**
   * The search endpoint lets you search for addresses, points of interest, and administrative areas. This is most commonly used for forward geocoding applications where you need to find the geographic coordinates of an address.
   * Search for location and other info using a place name or address (forward geocoding).
   */
  async search(i, t) {
    return await (await this.searchRaw(i, t)).value();
  }
  /**
   * The batch endpoint lets you specify many search or structured search requests at once. Once received, all requests will be processed internally on our infrastructure, improving throughput when you need to do a lot of queries.
   * Quickly run a batch of geocoding queries against the search or structured search endpoints.
   */
  async searchBulkRaw(i, t) {
    const n = {}, r = {};
    r["Content-Type"] = "application/json", this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/geocoding/v1/search/bulk",
        method: "POST",
        headers: r,
        query: n,
        body: i.bulkRequest.map(Wn)
      },
      t
    );
    return new u(
      o,
      (c) => c.map(ht)
    );
  }
  /**
   * The batch endpoint lets you specify many search or structured search requests at once. Once received, all requests will be processed internally on our infrastructure, improving throughput when you need to do a lot of queries.
   * Quickly run a batch of geocoding queries against the search or structured search endpoints.
   */
  async searchBulk(i = {}, t) {
    return await (await this.searchBulkRaw(i, t)).value();
  }
  /**
   * The structured search endpoint lets you search for addresses, points of interest, and administrative areas. Rather than a single string which the API must infer meaning from, the structured search endpoint allows you to specify the known components upfront, which is useful in many forward geocoding workflows.
   * Find locations matching components (structured forward geocoding).
   */
  async searchStructuredRaw(i, t) {
    const n = {};
    i.address != null && (n.address = i.address), i.neighbourhood != null && (n.neighbourhood = i.neighbourhood), i.borough != null && (n.borough = i.borough), i.locality != null && (n.locality = i.locality), i.county != null && (n.county = i.county), i.region != null && (n.region = i.region), i.postalcode != null && (n.postalcode = i.postalcode), i.country != null && (n.country = i.country), i.focusPointLat != null && (n["focus.point.lat"] = i.focusPointLat), i.focusPointLon != null && (n["focus.point.lon"] = i.focusPointLon), i.boundaryRectMinLat != null && (n["boundary.rect.min_lat"] = i.boundaryRectMinLat), i.boundaryRectMaxLat != null && (n["boundary.rect.max_lat"] = i.boundaryRectMaxLat), i.boundaryRectMinLon != null && (n["boundary.rect.min_lon"] = i.boundaryRectMinLon), i.boundaryRectMaxLon != null && (n["boundary.rect.max_lon"] = i.boundaryRectMaxLon), i.boundaryCircleLat != null && (n["boundary.circle.lat"] = i.boundaryCircleLat), i.boundaryCircleLon != null && (n["boundary.circle.lon"] = i.boundaryCircleLon), i.boundaryCircleRadius != null && (n["boundary.circle.radius"] = i.boundaryCircleRadius), i.boundaryCountry != null && (n["boundary.country"] = i.boundaryCountry.join(a.csv)), i.boundaryGid != null && (n["boundary.gid"] = i.boundaryGid), i.layers != null && (n.layers = i.layers.join(
      a.csv
    )), i.sources != null && (n.sources = i.sources.join(
      a.csv
    )), i.size != null && (n.size = i.size), i.lang != null && (n.lang = i.lang);
    const r = {};
    this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/geocoding/v1/search/structured",
        method: "GET",
        headers: r,
        query: n
      },
      t
    );
    return new u(
      o,
      (c) => O(c)
    );
  }
  /**
   * The structured search endpoint lets you search for addresses, points of interest, and administrative areas. Rather than a single string which the API must infer meaning from, the structured search endpoint allows you to specify the known components upfront, which is useful in many forward geocoding workflows.
   * Find locations matching components (structured forward geocoding).
   */
  async searchStructured(i = {}, t) {
    return await (await this.searchStructuredRaw(
      i,
      t
    )).value();
  }
  /**
   */
  async searchV2Raw(i, t) {
    if (i.text == null)
      throw new s(
        "text",
        'Required parameter "text" was null or undefined when calling searchV2().'
      );
    const n = {};
    i.text != null && (n.text = i.text), i.focusPointLat != null && (n["focus.point.lat"] = i.focusPointLat), i.focusPointLon != null && (n["focus.point.lon"] = i.focusPointLon), i.layers != null && (n.layers = i.layers.join(
      a.csv
    )), i.sources != null && (n.sources = i.sources.join(
      a.csv
    )), i.boundaryGid != null && (n["boundary.gid"] = i.boundaryGid), i.boundaryCountry != null && (n["boundary.country"] = i.boundaryCountry.join(a.csv)), i.boundaryRectMinLat != null && (n["boundary.rect.min_lat"] = i.boundaryRectMinLat), i.boundaryRectMinLon != null && (n["boundary.rect.min_lon"] = i.boundaryRectMinLon), i.boundaryRectMaxLat != null && (n["boundary.rect.max_lat"] = i.boundaryRectMaxLat), i.boundaryRectMaxLon != null && (n["boundary.rect.max_lon"] = i.boundaryRectMaxLon), i.boundaryCircleLat != null && (n["boundary.circle.lat"] = i.boundaryCircleLat), i.boundaryCircleLon != null && (n["boundary.circle.lon"] = i.boundaryCircleLon), i.boundaryCircleRadius != null && (n["boundary.circle.radius"] = i.boundaryCircleRadius), i.size != null && (n.size = i.size), i.lang != null && (n.lang = i.lang);
    const r = {};
    this.configuration && this.configuration.apiKey && (n.api_key = await this.configuration.apiKey("api_key"));
    const o = await this.request(
      {
        path: "/geocoding/v2/search",
        method: "GET",
        headers: r,
        query: n
      },
      t
    );
    return new u(
      o,
      (c) => T(c)
    );
  }
  /**
   */
  async searchV2(i, t) {
    return await (await this.searchV2Raw(i, t)).value();
  }
};
class Zp extends ku {
  constructor() {
    super(...arguments), this.cache = /* @__PURE__ */ new Map();
  }
  /**
   * Autocomplete enables interactive search-as-you-type user experiences, suggesting places as you type, along with information that will help your users find the correct place quickly.
   *
   * To ensure a snappy user experience, recent successful searches are cached automatically.
   * We also recommend throttling (ex: via lodash) for most interactive applications.
   */
  async autocomplete(i, t) {
    let n = t === null ? "null" : typeof t == "function" ? t.toString() : JSON.stringify(t);
    const r = JSON.stringify(i) + n;
    if (this.cache.has(r))
      return this.cache.get(r);
    let o = await super.autocomplete(i, t);
    if (this.cache.size >= 20) {
      const c = this.cache.keys().next().value;
      this.cache.delete(c);
    }
    return this.cache.set(r, o), o;
  }
}
export {
  li as AccessFromJSON,
  si as AccessFromJSONTyped,
  fi as AccessToJSON,
  pi as AccessToJSONTyped,
  Oe as AddendumV2FromJSON,
  vi as AddendumV2FromJSONTyped,
  be as AddendumV2ToJSON,
  ki as AddendumV2ToJSONTyped,
  Se as AddressComponentsV2FromJSON,
  Di as AddressComponentsV2FromJSONTyped,
  Te as AddressComponentsV2ToJSON,
  Mi as AddressComponentsV2ToJSONTyped,
  Ne as AdminRegionFromJSON,
  Li as AdminRegionFromJSONTyped,
  we as AdminRegionToJSON,
  Ii as AdminRegionToJSONTyped,
  Ei as AdministrativeFromJSON,
  Ai as AdministrativeFromJSONTyped,
  Gi as AdministrativeToJSON,
  Bi as AdministrativeToJSONTyped,
  Qu as AnnotationFiltersActionEnum,
  $u as AnnotationFiltersAttributesEnum,
  C as AnnotationFiltersFromJSON,
  Pi as AnnotationFiltersFromJSONTyped,
  F as AnnotationFiltersToJSON,
  Vi as AnnotationFiltersToJSONTyped,
  v as AutoCostingOptionsFromJSON,
  Hi as AutoCostingOptionsFromJSONTyped,
  k as AutoCostingOptionsToJSON,
  Wi as AutoCostingOptionsToJSONTyped,
  ti as BASE_PATH,
  b as BaseAPI,
  qu as BaseCostingOptionsFromJSON,
  zi as BaseCostingOptionsFromJSONTyped,
  ju as BaseCostingOptionsToJSON,
  Ui as BaseCostingOptionsToJSONTyped,
  Nd as BaseTraceRequestDirectionsTypeEnum,
  Jd as BaseTraceRequestFromJSON,
  Jn as BaseTraceRequestFromJSONTyped,
  wd as BaseTraceRequestShapeMatchEnum,
  xd as BaseTraceRequestToJSON,
  xn as BaseTraceRequestToJSONTyped,
  cd as BicycleCostingOptionsBicycleTypeEnum,
  an as BicycleCostingOptionsFromJSON,
  un as BicycleCostingOptionsFromJSONTyped,
  dn as BicycleCostingOptionsToJSON,
  ln as BicycleCostingOptionsToJSONTyped,
  Cn as BikeNetworkFromJSON,
  Fn as BikeNetworkFromJSONTyped,
  vn as BikeNetworkToJSON,
  kn as BikeNetworkToJSONTyped,
  Eu as BlobApiResponse,
  Ed as BulkRequestEndpointEnum,
  Gd as BulkRequestFromJSON,
  Hn as BulkRequestFromJSONTyped,
  Gn as BulkRequestQueryFromJSON,
  Bn as BulkRequestQueryFromJSONTyped,
  Pn as BulkRequestQueryToJSON,
  Vn as BulkRequestQueryToJSONTyped,
  Wn as BulkRequestToJSON,
  zn as BulkRequestToJSONTyped,
  ht as BulkSearchResponseFromJSON,
  Ot as BulkSearchResponseFromJSONTyped,
  Yd as BulkSearchResponseToJSON,
  bt as BulkSearchResponseToJSONTyped,
  a as COLLECTION_FORMATS,
  ri as Configuration,
  De as ContextFromJSON,
  xt as ContextFromJSONTyped,
  Me as ContextToJSON,
  Ct as ContextToJSONTyped,
  Ft as ContourFromJSON,
  vt as ContourFromJSONTyped,
  kt as ContourToJSON,
  Dt as ContourToJSONTyped,
  _ as CoordinateFromJSON,
  Mt as CoordinateFromJSONTyped,
  h as CoordinateToJSON,
  Lt as CoordinateToJSONTyped,
  G as CostingModel,
  Le as CostingModelFromJSON,
  It as CostingModelFromJSONTyped,
  rl as CostingModelToJSON,
  ol as CostingModelToJSONTyped,
  g as CostingOptionsFromJSON,
  On as CostingOptionsFromJSONTyped,
  y as CostingOptionsToJSON,
  bn as CostingOptionsToJSONTyped,
  oi as DefaultConfig,
  cl as DirectionsOptionsDirectionsTypeEnum,
  ul as DirectionsOptionsFromJSON,
  Et as DirectionsOptionsFromJSONTyped,
  dl as DirectionsOptionsToJSON,
  At as DirectionsOptionsToJSONTyped,
  L as DistanceUnit,
  m as DistanceUnitFromJSON,
  Tn as DistanceUnitFromJSONTyped,
  md as DistanceUnitToJSON,
  _d as DistanceUnitToJSONTyped,
  Gt as EdgeSignFromJSON,
  Bt as EdgeSignFromJSONTyped,
  Pt as EdgeSignToJSON,
  Vt as EdgeSignToJSONTyped,
  B as EdgeUse,
  Ie as EdgeUseFromJSON,
  Ht as EdgeUseFromJSONTyped,
  fl as EdgeUseToJSON,
  pl as EdgeUseToJSONTyped,
  Xt as EndNodeFromJSON,
  Yt as EndNodeFromJSONTyped,
  qt as EndNodeToJSON,
  jt as EndNodeToJSONTyped,
  Rl as ExtendedDirectionsOptionsFormatEnum,
  xl as ExtendedDirectionsOptionsFromJSON,
  er as ExtendedDirectionsOptionsFromJSONTyped,
  Cl as ExtendedDirectionsOptionsToJSON,
  ir as ExtendedDirectionsOptionsToJSONTyped,
  gr as FeaturePropertiesV2FromJSON,
  yr as FeaturePropertiesV2FromJSONTyped,
  lr as FeaturePropertiesV2PropertiesFromJSON,
  sr as FeaturePropertiesV2PropertiesFromJSONTyped,
  fr as FeaturePropertiesV2PropertiesToJSON,
  pr as FeaturePropertiesV2PropertiesToJSONTyped,
  mr as FeaturePropertiesV2ToJSON,
  _r as FeaturePropertiesV2ToJSONTyped,
  di as FetchError,
  gi as FoursquareAddendumFromJSON,
  yi as FoursquareAddendumFromJSONTyped,
  mi as FoursquareAddendumToJSON,
  _i as FoursquareAddendumToJSONTyped,
  hr as GeoAttributesFromJSON,
  Or as GeoAttributesFromJSONTyped,
  br as GeoAttributesToJSON,
  Sr as GeoAttributesToJSONTyped,
  Hl as GeoJSONGeometryBaseFromJSON,
  Tr as GeoJSONGeometryBaseFromJSONTyped,
  Wl as GeoJSONGeometryBaseToJSON,
  Nr as GeoJSONGeometryBaseToJSONTyped,
  Pl as GeoJSONGeometryBaseTypeEnum,
  Zn as GeoJSONPointFromJSON,
  Xn as GeoJSONPointFromJSONTyped,
  Yn as GeoJSONPointToJSON,
  qn as GeoJSONPointToJSONTyped,
  Pd as GeoJSONPointTypeEnum,
  T as GeocodeResponseEnvelopePropertiesV2FromJSON,
  Cr as GeocodeResponseEnvelopePropertiesV2FromJSONTyped,
  Kl as GeocodeResponseEnvelopePropertiesV2ToJSON,
  Fr as GeocodeResponseEnvelopePropertiesV2ToJSONTyped,
  O as GeocodeResponseFromJSON,
  yt as GeocodeResponseFromJSONTyped,
  mt as GeocodeResponseToJSON,
  _t as GeocodeResponseToJSONTyped,
  Zp as GeocodingApi,
  st as GeocodingGeoJSONFeatureFromJSON,
  ft as GeocodingGeoJSONFeatureFromJSONTyped,
  pt as GeocodingGeoJSONFeatureToJSON,
  gt as GeocodingGeoJSONFeatureToJSONTyped,
  Qd as GeocodingGeoJSONFeatureTypeEnum,
  zd as GeocodingGeoJSONPropertiesAccuracyEnum,
  tt as GeocodingGeoJSONPropertiesAddendumFromJSON,
  rt as GeocodingGeoJSONPropertiesAddendumFromJSONTyped,
  jn as GeocodingGeoJSONPropertiesAddendumOsmFromJSON,
  et as GeocodingGeoJSONPropertiesAddendumOsmFromJSONTyped,
  it as GeocodingGeoJSONPropertiesAddendumOsmToJSON,
  nt as GeocodingGeoJSONPropertiesAddendumOsmToJSONTyped,
  ot as GeocodingGeoJSONPropertiesAddendumToJSON,
  ct as GeocodingGeoJSONPropertiesAddendumToJSONTyped,
  at as GeocodingGeoJSONPropertiesFromJSON,
  ut as GeocodingGeoJSONPropertiesFromJSONTyped,
  Ud as GeocodingGeoJSONPropertiesMatchTypeEnum,
  dt as GeocodingGeoJSONPropertiesToJSON,
  lt as GeocodingGeoJSONPropertiesToJSONTyped,
  A as GeocodingLayer,
  xe as GeocodingLayerFromJSON,
  Mn as GeocodingLayerFromJSONTyped,
  Ce as GeocodingLayerToJSON,
  Dd as GeocodingLayerToJSONTyped,
  wr as GeocodingMetaFromJSON,
  Rr as GeocodingMetaFromJSONTyped,
  Jr as GeocodingMetaToJSON,
  xr as GeocodingMetaToJSONTyped,
  Un as GeocodingObjectFromJSON,
  Kn as GeocodingObjectFromJSONTyped,
  Qn as GeocodingObjectToJSON,
  $n as GeocodingObjectToJSONTyped,
  E as GeocodingSource,
  Re as GeocodingSourceFromJSON,
  Dn as GeocodingSourceFromJSONTyped,
  Je as GeocodingSourceToJSON,
  vd as GeocodingSourceToJSONTyped,
  Ji as GeonamesAddendumFromJSON,
  xi as GeonamesAddendumFromJSONTyped,
  Ci as GeonamesAddendumToJSON,
  Fi as GeonamesAddendumToJSONTyped,
  Kp as GeospatialApi,
  Zl as HeightRequestFromJSON,
  vr as HeightRequestFromJSONTyped,
  Ql as HeightRequestShapeFormatEnum,
  kr as HeightRequestToJSON,
  Dr as HeightRequestToJSONTyped,
  Mr as HeightResponseFromJSON,
  Lr as HeightResponseFromJSONTyped,
  Yl as HeightResponseToJSON,
  Ir as HeightResponseToJSONTyped,
  es as HighwayClassificationClassificationEnum,
  Er as HighwayClassificationFromJSON,
  Ar as HighwayClassificationFromJSONTyped,
  ql as HighwayClassificationSurfaceEnum,
  Gr as HighwayClassificationToJSON,
  Br as HighwayClassificationToJSONTyped,
  jl as HighwayClassificationUseEnum,
  Ut as IntersectingEdgeFromJSON,
  Kt as IntersectingEdgeFromJSONTyped,
  Qt as IntersectingEdgeToJSON,
  $t as IntersectingEdgeToJSONTyped,
  U as IsochroneCostingModel,
  Pr as IsochroneCostingModelFromJSON,
  Vr as IsochroneCostingModelFromJSONTyped,
  ts as IsochroneCostingModelToJSON,
  rs as IsochroneCostingModelToJSONTyped,
  Kr as IsochroneFeatureFromJSON,
  Qr as IsochroneFeatureFromJSONTyped,
  $r as IsochroneFeatureToJSON,
  Zr as IsochroneFeatureToJSONTyped,
  as as IsochroneFeatureTypeEnum,
  Hr as IsochronePropertiesFromJSON,
  Wr as IsochronePropertiesFromJSONTyped,
  os as IsochronePropertiesMetricEnum,
  zr as IsochronePropertiesToJSON,
  Ur as IsochronePropertiesToJSONTyped,
  ls as IsochroneRequestFromJSON,
  Xr as IsochroneRequestFromJSONTyped,
  Yr as IsochroneRequestToJSON,
  qr as IsochroneRequestToJSONTyped,
  jr as IsochroneResponseFromJSON,
  eo as IsochroneResponseFromJSONTyped,
  ps as IsochroneResponseToJSON,
  io as IsochroneResponseToJSONTyped,
  ss as IsochroneResponseTypeEnum,
  u as JSONApiResponse,
  K as LayerId,
  ys as LayerIdFromJSON,
  no as LayerIdFromJSONTyped,
  ms as LayerIdToJSON,
  _s as LayerIdToJSONTyped,
  Ns as LocateDetailedEdgeCycleLaneEnum,
  fo as LocateDetailedEdgeFromJSON,
  po as LocateDetailedEdgeFromJSONTyped,
  Ts as LocateDetailedEdgeSacScaleEnum,
  go as LocateDetailedEdgeToJSON,
  yo as LocateDetailedEdgeToJSONTyped,
  bo as LocateEdgeFromJSON,
  So as LocateEdgeFromJSONTyped,
  mo as LocateEdgeInfoFromJSON,
  _o as LocateEdgeInfoFromJSONTyped,
  ho as LocateEdgeInfoToJSON,
  Oo as LocateEdgeInfoToJSONTyped,
  Js as LocateEdgeSideOfStreetEnum,
  To as LocateEdgeToJSON,
  No as LocateEdgeToJSONTyped,
  wo as LocateNodeFromJSON,
  Ro as LocateNodeFromJSONTyped,
  Cs as LocateNodeIntersectionTypeEnum,
  Jo as LocateNodeToJSON,
  xo as LocateNodeToJSONTyped,
  Co as LocateObjectFromJSON,
  Fo as LocateObjectFromJSONTyped,
  ks as LocateObjectToJSON,
  vo as LocateObjectToJSONTyped,
  sn as LowSpeedVehicleCostingOptionsFromJSON,
  fn as LowSpeedVehicleCostingOptionsFromJSONTyped,
  pn as LowSpeedVehicleCostingOptionsToJSON,
  gn as LowSpeedVehicleCostingOptionsToJSONTyped,
  ud as LowSpeedVehicleCostingOptionsVehicleTypeEnum,
  N as ManeuverSignElementFromJSON,
  ko as ManeuverSignElementFromJSONTyped,
  w as ManeuverSignElementToJSON,
  Do as ManeuverSignElementToJSONTyped,
  Mo as ManeuverSignFromJSON,
  Lo as ManeuverSignFromJSONTyped,
  Io as ManeuverSignToJSON,
  Eo as ManeuverSignToJSONTyped,
  M as MapMatchCostingModel,
  ie as MapMatchCostingModelFromJSON,
  Sn as MapMatchCostingModelFromJSONTyped,
  pd as MapMatchCostingModelToJSON,
  gd as MapMatchCostingModelToJSONTyped,
  Es as MapMatchRequestDirectionsTypeEnum,
  As as MapMatchRequestFormatEnum,
  Bs as MapMatchRequestFromJSON,
  Vo as MapMatchRequestFromJSONTyped,
  Is as MapMatchRequestShapeMatchEnum,
  Ho as MapMatchRequestToJSON,
  Wo as MapMatchRequestToJSONTyped,
  lc as MapMatchRouteResponseFromJSON,
  sc as MapMatchRouteResponseFromJSONTyped,
  tf as MapMatchRouteResponseToJSON,
  fc as MapMatchRouteResponseToJSONTyped,
  Ao as MapMatchTraceOptionsFromJSON,
  Go as MapMatchTraceOptionsFromJSONTyped,
  Bo as MapMatchTraceOptionsToJSON,
  Po as MapMatchTraceOptionsToJSONTyped,
  ne as MapMatchWaypointFromJSON,
  wn as MapMatchWaypointFromJSONTyped,
  te as MapMatchWaypointToJSON,
  Rn as MapMatchWaypointToJSONTyped,
  Sd as MapMatchWaypointTypeEnum,
  W as MatchType,
  Ae as MatchTypeFromJSON,
  cr as MatchTypeFromJSONTyped,
  kl as MatchTypeToJSON,
  Dl as MatchTypeToJSONTyped,
  Ke as MatchedPointFromJSON,
  pc as MatchedPointFromJSONTyped,
  Qe as MatchedPointToJSON,
  gc as MatchedPointToJSONTyped,
  rf as MatchedPointTypeEnum,
  Y as MatrixCostingModel,
  $e as MatrixCostingModelFromJSON,
  yc as MatrixCostingModelFromJSONTyped,
  af as MatrixCostingModelToJSON,
  uf as MatrixCostingModelToJSONTyped,
  lf as MatrixDistanceFromJSON,
  mc as MatrixDistanceFromJSONTyped,
  sf as MatrixDistanceToJSON,
  _c as MatrixDistanceToJSONTyped,
  pf as MatrixRequestDirectionsTypeEnum,
  yf as MatrixRequestFromJSON,
  bc as MatrixRequestFromJSONTyped,
  Sc as MatrixRequestToJSON,
  Tc as MatrixRequestToJSONTyped,
  xc as MatrixResponseFromJSON,
  Cc as MatrixResponseFromJSONTyped,
  hf as MatrixResponseToJSON,
  Fc as MatrixResponseToJSONTyped,
  le as MatrixWaypointFromJSON,
  hc as MatrixWaypointFromJSONTyped,
  se as MatrixWaypointToJSON,
  Oc as MatrixWaypointToJSONTyped,
  Ki as MotorScooterCostingOptionsFromJSON,
  Qi as MotorScooterCostingOptionsFromJSONTyped,
  $i as MotorScooterCostingOptionsToJSON,
  Zi as MotorScooterCostingOptionsToJSONTyped,
  yn as MotorcycleCostingOptionsFromJSON,
  mn as MotorcycleCostingOptionsFromJSONTyped,
  _n as MotorcycleCostingOptionsToJSON,
  hn as MotorcycleCostingOptionsToJSONTyped,
  Of as NearestRoadsRequestDirectionsTypeEnum,
  Sf as NearestRoadsRequestFromJSON,
  vc as NearestRoadsRequestFromJSONTyped,
  kc as NearestRoadsRequestToJSON,
  Dc as NearestRoadsRequestToJSONTyped,
  re as NodeIdFromJSON,
  ao as NodeIdFromJSONTyped,
  oe as NodeIdToJSON,
  uo as NodeIdToJSONTyped,
  H as NodeType,
  Ee as NodeTypeFromJSON,
  Zt as NodeTypeFromJSONTyped,
  Tl as NodeTypeToJSON,
  Nl as NodeTypeToJSONTyped,
  Ti as OpenStreetMapAddendumFromJSON,
  Ni as OpenStreetMapAddendumFromJSONTyped,
  wi as OpenStreetMapAddendumToJSON,
  Ri as OpenStreetMapAddendumToJSONTyped,
  Tf as OptimizedRouteRequestDirectionsTypeEnum,
  Nf as OptimizedRouteRequestFormatEnum,
  Rf as OptimizedRouteRequestFromJSON,
  Mc as OptimizedRouteRequestFromJSONTyped,
  Lc as OptimizedRouteRequestToJSON,
  Ic as OptimizedRouteRequestToJSONTyped,
  Ec as OsrmAdminFromJSON,
  Ac as OsrmAdminFromJSONTyped,
  Gc as OsrmAdminToJSON,
  Bc as OsrmAdminToJSONTyped,
  zc as OsrmAnnotationFromJSON,
  Uc as OsrmAnnotationFromJSONTyped,
  Kc as OsrmAnnotationToJSON,
  Qc as OsrmAnnotationToJSONTyped,
  $c as OsrmBannerComponentFromJSON,
  Zc as OsrmBannerComponentFromJSONTyped,
  Xc as OsrmBannerComponentToJSON,
  Yc as OsrmBannerComponentToJSONTyped,
  vf as OsrmBannerComponentTypeEnum,
  fe as OsrmBannerContentFromJSON,
  jc as OsrmBannerContentFromJSONTyped,
  pe as OsrmBannerContentToJSON,
  ea as OsrmBannerContentToJSONTyped,
  If as OsrmBannerContentTypeEnum,
  ia as OsrmBannerInstructionFromJSON,
  na as OsrmBannerInstructionFromJSONTyped,
  ta as OsrmBannerInstructionToJSON,
  ra as OsrmBannerInstructionToJSONTyped,
  Gf as OsrmBaseApiResponseCodeEnum,
  Pf as OsrmBaseApiResponseFromJSON,
  oa as OsrmBaseApiResponseFromJSONTyped,
  Vf as OsrmBaseApiResponseToJSON,
  ca as OsrmBaseApiResponseToJSONTyped,
  q as OsrmGuidanceModifier,
  Ze as OsrmGuidanceModifierFromJSON,
  qc as OsrmGuidanceModifierFromJSONTyped,
  Mf as OsrmGuidanceModifierToJSON,
  Lf as OsrmGuidanceModifierToJSONTyped,
  zf as OsrmIntersectionClassesEnum,
  sa as OsrmIntersectionFromJSON,
  fa as OsrmIntersectionFromJSONTyped,
  pa as OsrmIntersectionToJSON,
  ga as OsrmIntersectionToJSONTyped,
  aa as OsrmLaneFromJSON,
  ua as OsrmLaneFromJSONTyped,
  Hf as OsrmLaneIndicationsEnum,
  da as OsrmLaneToJSON,
  la as OsrmLaneToJSONTyped,
  Ia as OsrmRouteFromJSON,
  Ea as OsrmRouteFromJSONTyped,
  ka as OsrmRouteLegFromJSON,
  Da as OsrmRouteLegFromJSONTyped,
  Ma as OsrmRouteLegToJSON,
  La as OsrmRouteLegToJSONTyped,
  np as OsrmRouteResponseCodeEnum,
  tp as OsrmRouteResponseFromJSON,
  Ye as OsrmRouteResponseFromJSONTyped,
  Wa as OsrmRouteResponseToJSON,
  za as OsrmRouteResponseToJSONTyped,
  Xf as OsrmRouteStepDrivingSideEnum,
  xa as OsrmRouteStepFromJSON,
  Ca as OsrmRouteStepFromJSONTyped,
  Yf as OsrmRouteStepSpeedLimitSignEnum,
  Fa as OsrmRouteStepToJSON,
  va as OsrmRouteStepToJSONTyped,
  Aa as OsrmRouteToJSON,
  Ga as OsrmRouteToJSONTyped,
  Pc as OsrmSpeedLimitFromJSON,
  Vc as OsrmSpeedLimitFromJSONTyped,
  Hc as OsrmSpeedLimitToJSON,
  Wc as OsrmSpeedLimitToJSONTyped,
  xf as OsrmSpeedLimitUnitEnum,
  Oa as OsrmStepManeuverFromJSON,
  ba as OsrmStepManeuverFromJSONTyped,
  Sa as OsrmStepManeuverToJSON,
  Ta as OsrmStepManeuverToJSONTyped,
  Qf as OsrmStepManeuverTypeEnum,
  ya as OsrmViaWaypointFromJSON,
  ma as OsrmViaWaypointFromJSONTyped,
  _a as OsrmViaWaypointToJSON,
  ha as OsrmViaWaypointToJSONTyped,
  Na as OsrmVoiceInstructionFromJSON,
  wa as OsrmVoiceInstructionFromJSONTyped,
  Ra as OsrmVoiceInstructionToJSON,
  Ja as OsrmVoiceInstructionToJSONTyped,
  Ba as OsrmWaypointFromJSON,
  Pa as OsrmWaypointFromJSONTyped,
  Va as OsrmWaypointToJSON,
  Ha as OsrmWaypointToJSONTyped,
  qi as PedestrianCostingOptionsFromJSON,
  ji as PedestrianCostingOptionsFromJSONTyped,
  en as PedestrianCostingOptionsToJSON,
  nn as PedestrianCostingOptionsToJSONTyped,
  D as PedestrianType,
  Xi as PedestrianTypeFromJSON,
  Yi as PedestrianTypeFromJSONTyped,
  nd as PedestrianTypeToJSON,
  td as PedestrianTypeToJSONTyped,
  nr as PointFromJSON,
  tr as PointFromJSONTyped,
  rr as PointToJSON,
  or as PointToJSONTyped,
  z as Precision,
  Pe as PrecisionFromJSON,
  dr as PrecisionFromJSONTyped,
  Il as PrecisionToJSON,
  El as PrecisionToJSONTyped,
  op as PropertiesV2FromJSON,
  Ua as PropertiesV2FromJSONTyped,
  cp as PropertiesV2ToJSON,
  Ka as PropertiesV2ToJSONTyped,
  s as RequiredError,
  ui as ResponseError,
  Q as RestrictionsFromJSON,
  lo as RestrictionsFromJSONTyped,
  $ as RestrictionsToJSON,
  so as RestrictionsToJSONTyped,
  V as RoadClass,
  J as RoadClassFromJSON,
  zt as RoadClassFromJSONTyped,
  hl as RoadClassToJSON,
  Ol as RoadClassToJSONTyped,
  ge as Route200ResponseFromJSON,
  Za as Route200ResponseFromJSONTyped,
  up as Route200ResponseToJSON,
  Xa as Route200ResponseToJSONTyped,
  nc as RouteLegFromJSON,
  tc as RouteLegFromJSONTyped,
  rc as RouteLegToJSON,
  oc as RouteLegToJSONTyped,
  Xs as RouteManeuverBssManeuverTypeEnum,
  qo as RouteManeuverFromJSON,
  jo as RouteManeuverFromJSONTyped,
  ec as RouteManeuverToJSON,
  ic as RouteManeuverToJSONTyped,
  Zs as RouteManeuverTravelTypeEnum,
  pp as RouteRequestDirectionsTypeEnum,
  gp as RouteRequestFormatEnum,
  mp as RouteRequestFromJSON,
  tu as RouteRequestFromJSONTyped,
  ru as RouteRequestToJSON,
  ou as RouteRequestToJSONTyped,
  ze as RouteResponseAlternatesInnerFromJSON,
  uc as RouteResponseAlternatesInnerFromJSONTyped,
  Ue as RouteResponseAlternatesInnerToJSON,
  dc as RouteResponseAlternatesInnerToJSONTyped,
  ap as RouteResponseFromJSON,
  je as RouteResponseFromJSONTyped,
  Qa as RouteResponseToJSON,
  $a as RouteResponseToJSONTyped,
  Ve as RouteSummaryFromJSON,
  $o as RouteSummaryFromJSONTyped,
  He as RouteSummaryToJSON,
  Zo as RouteSummaryToJSONTyped,
  ae as RouteTripFromJSON,
  cc as RouteTripFromJSONTyped,
  ue as RouteTripToJSON,
  ac as RouteTripToJSONTyped,
  Qp as RoutingApi,
  I as RoutingLanguages,
  p as RoutingLanguagesFromJSON,
  Nn as RoutingLanguagesFromJSONTyped,
  Od as RoutingLanguagesToJSON,
  bd as RoutingLanguagesToJSONTyped,
  Z as RoutingLongUnits,
  ce as RoutingLongUnitsFromJSON,
  Xo as RoutingLongUnitsFromJSONTyped,
  zs as RoutingLongUnitsToJSON,
  Us as RoutingLongUnitsToJSONTyped,
  zo as RoutingResponseWaypointFromJSON,
  Uo as RoutingResponseWaypointFromJSONTyped,
  Ko as RoutingResponseWaypointToJSON,
  Qo as RoutingResponseWaypointToJSONTyped,
  Ps as RoutingResponseWaypointTypeEnum,
  Ya as RoutingWaypointAllOfSearchFilterFromJSON,
  qa as RoutingWaypointAllOfSearchFilterFromJSONTyped,
  ja as RoutingWaypointAllOfSearchFilterToJSON,
  eu as RoutingWaypointAllOfSearchFilterToJSONTyped,
  ye as RoutingWaypointFromJSON,
  iu as RoutingWaypointFromJSONTyped,
  sp as RoutingWaypointPreferredSideEnum,
  me as RoutingWaypointToJSON,
  nu as RoutingWaypointToJSONTyped,
  lp as RoutingWaypointTypeEnum,
  Md as SearchQueryFromJSON,
  ve as SearchQueryFromJSONTyped,
  Ln as SearchQueryToJSON,
  In as SearchQueryToJSONTyped,
  Id as SearchStructuredQueryFromJSON,
  ke as SearchStructuredQueryFromJSONTyped,
  En as SearchStructuredQueryToJSON,
  An as SearchStructuredQueryToJSONTyped,
  Op as SimpleRoutingWaypointFromJSON,
  cu as SimpleRoutingWaypointFromJSONTyped,
  bp as SimpleRoutingWaypointToJSON,
  au as SimpleRoutingWaypointToJSONTyped,
  _p as SimpleRoutingWaypointTypeEnum,
  Ge as SourceAttributionFromJSON,
  ar as SourceAttributionFromJSONTyped,
  Be as SourceAttributionToJSON,
  ur as SourceAttributionToJSONTyped,
  j as SourceId,
  Tp as SourceIdFromJSON,
  uu as SourceIdFromJSONTyped,
  Np as SourceIdToJSON,
  wp as SourceIdToJSONTyped,
  to as SpeedsFromJSON,
  ro as SpeedsFromJSONTyped,
  oo as SpeedsToJSON,
  co as SpeedsToJSONTyped,
  hs as SpeedsTypeEnum,
  Au as TextApiResponse,
  xp as TraceAttributeFilterOptionsActionEnum,
  fu as TraceAttributeFilterOptionsFromJSON,
  pu as TraceAttributeFilterOptionsFromJSONTyped,
  gu as TraceAttributeFilterOptionsToJSON,
  yu as TraceAttributeFilterOptionsToJSONTyped,
  ee as TraceAttributeKey,
  du as TraceAttributeKeyFromJSON,
  lu as TraceAttributeKeyFromJSONTyped,
  su as TraceAttributeKeyToJSON,
  Jp as TraceAttributeKeyToJSONTyped,
  hu as TraceAttributesBaseResponseFromJSON,
  Ou as TraceAttributesBaseResponseFromJSONTyped,
  bu as TraceAttributesBaseResponseToJSON,
  Su as TraceAttributesBaseResponseToJSONTyped,
  Bp as TraceAttributesRequestDirectionsTypeEnum,
  Vp as TraceAttributesRequestFromJSON,
  Tu as TraceAttributesRequestFromJSONTyped,
  Gp as TraceAttributesRequestShapeMatchEnum,
  Nu as TraceAttributesRequestToJSON,
  wu as TraceAttributesRequestToJSONTyped,
  Ru as TraceAttributesResponseFromJSON,
  Ju as TraceAttributesResponseFromJSONTyped,
  Wp as TraceAttributesResponseToJSON,
  xu as TraceAttributesResponseToJSONTyped,
  Dp as TraceEdgeBicycleTypeEnum,
  Lp as TraceEdgeCycleLaneEnum,
  ei as TraceEdgeFromJSON,
  mu as TraceEdgeFromJSONTyped,
  kp as TraceEdgePedestrianTypeEnum,
  Ip as TraceEdgeSidewalkEnum,
  Fp as TraceEdgeSurfaceEnum,
  ii as TraceEdgeToJSON,
  _u as TraceEdgeToJSONTyped,
  Mp as TraceEdgeTransitTypeEnum,
  vp as TraceEdgeVehicleTypeEnum,
  X as TravelMode,
  We as TravelModeFromJSON,
  Yo as TravelModeFromJSONTyped,
  Qs as TravelModeToJSON,
  $s as TravelModeToJSONTyped,
  P as Traversability,
  R as TraversabilityFromJSON,
  Wt as TraversabilityFromJSONTyped,
  yl as TraversabilityToJSON,
  ml as TraversabilityToJSONTyped,
  tn as TruckCostingOptionsFromJSON,
  rn as TruckCostingOptionsFromJSONTyped,
  on as TruckCostingOptionsToJSON,
  cn as TruckCostingOptionsToJSONTyped,
  Cu as TzResponseFromJSON,
  Fu as TzResponseFromJSONTyped,
  Up as TzResponseToJSON,
  vu as TzResponseToJSONTyped,
  Iu as VoidApiResponse,
  Nc as WarningFromJSON,
  wc as WarningFromJSONTyped,
  Rc as WarningToJSON,
  Jc as WarningToJSONTyped,
  hi as WhosOnFirstConcordancesFromJSON,
  Oi as WhosOnFirstConcordancesFromJSONTyped,
  bi as WhosOnFirstConcordancesToJSON,
  Si as WhosOnFirstConcordancesToJSONTyped,
  d as WofContextComponentFromJSON,
  St as WofContextComponentFromJSONTyped,
  l as WofContextComponentToJSON,
  Tt as WofContextComponentToJSONTyped,
  Nt as WofContextFromJSON,
  wt as WofContextFromJSONTyped,
  Rt as WofContextToJSON,
  Jt as WofContextToJSONTyped,
  Lu as canConsumeForm,
  Du as exists,
  Gu as instanceOfAccess,
  Wu as instanceOfAddendumV2,
  zu as instanceOfAddressComponentsV2,
  Uu as instanceOfAdminRegion,
  Ku as instanceOfAdministrative,
  Zu as instanceOfAnnotationFilters,
  Xu as instanceOfAutoCostingOptions,
  Yu as instanceOfBaseCostingOptions,
  Rd as instanceOfBaseTraceRequest,
  ad as instanceOfBicycleCostingOptions,
  Cd as instanceOfBikeNetwork,
  Ad as instanceOfBulkRequest,
  Xd as instanceOfBulkSearchResponse,
  el as instanceOfContext,
  il as instanceOfContour,
  nl as instanceOfCoordinate,
  tl as instanceOfCostingModel,
  sd as instanceOfCostingOptions,
  al as instanceOfDirectionsOptions,
  yd as instanceOfDistanceUnit,
  ll as instanceOfEdgeSign,
  sl as instanceOfEdgeUse,
  wl as instanceOfEndNode,
  Jl as instanceOfExtendedDirectionsOptions,
  Gl as instanceOfFeaturePropertiesV2,
  Al as instanceOfFeaturePropertiesV2Properties,
  Bu as instanceOfFoursquareAddendum,
  Bl as instanceOfGeoAttributes,
  Vl as instanceOfGeoJSONGeometryBase,
  Vd as instanceOfGeoJSONPoint,
  Zd as instanceOfGeocodeResponse,
  Ul as instanceOfGeocodeResponseEnvelopePropertiesV2,
  $d as instanceOfGeocodingGeoJSONFeature,
  Kd as instanceOfGeocodingGeoJSONProperties,
  Wd as instanceOfGeocodingGeoJSONPropertiesAddendum,
  Hd as instanceOfGeocodingGeoJSONPropertiesAddendumOsm,
  kd as instanceOfGeocodingLayer,
  zl as instanceOfGeocodingMeta,
  Bd as instanceOfGeocodingObject,
  Fd as instanceOfGeocodingSource,
  Hu as instanceOfGeonamesAddendum,
  $l as instanceOfHeightRequest,
  Xl as instanceOfHeightResponse,
  is as instanceOfHighwayClassification,
  bl as instanceOfIntersectingEdge,
  ns as instanceOfIsochroneCostingModel,
  us as instanceOfIsochroneFeature,
  cs as instanceOfIsochroneProperties,
  ds as instanceOfIsochroneRequest,
  fs as instanceOfIsochroneResponse,
  gs as instanceOfLayerId,
  ws as instanceOfLocateDetailedEdge,
  xs as instanceOfLocateEdge,
  Rs as instanceOfLocateEdgeInfo,
  Fs as instanceOfLocateNode,
  vs as instanceOfLocateObject,
  dd as instanceOfLowSpeedVehicleCostingOptions,
  Ms as instanceOfManeuverSign,
  Ds as instanceOfManeuverSignElement,
  fd as instanceOfMapMatchCostingModel,
  Gs as instanceOfMapMatchRequest,
  nf as instanceOfMapMatchRouteResponse,
  Ls as instanceOfMapMatchTraceOptions,
  Td as instanceOfMapMatchWaypoint,
  vl as instanceOfMatchType,
  of as instanceOfMatchedPoint,
  cf as instanceOfMatrixCostingModel,
  df as instanceOfMatrixDistance,
  gf as instanceOfMatrixRequest,
  _f as instanceOfMatrixResponse,
  ff as instanceOfMatrixWaypoint,
  ed as instanceOfMotorScooterCostingOptions,
  ld as instanceOfMotorcycleCostingOptions,
  bf as instanceOfNearestRoadsRequest,
  bs as instanceOfNodeId,
  Sl as instanceOfNodeType,
  Vu as instanceOfOpenStreetMapAddendum,
  wf as instanceOfOptimizedRouteRequest,
  Jf as instanceOfOsrmAdmin,
  Ff as instanceOfOsrmAnnotation,
  kf as instanceOfOsrmBannerComponent,
  Ef as instanceOfOsrmBannerContent,
  Af as instanceOfOsrmBannerInstruction,
  Bf as instanceOfOsrmBaseApiResponse,
  Df as instanceOfOsrmGuidanceModifier,
  Uf as instanceOfOsrmIntersection,
  Wf as instanceOfOsrmLane,
  ep as instanceOfOsrmRoute,
  jf as instanceOfOsrmRouteLeg,
  Xe as instanceOfOsrmRouteResponse,
  qf as instanceOfOsrmRouteStep,
  Cf as instanceOfOsrmSpeedLimit,
  $f as instanceOfOsrmStepManeuver,
  Kf as instanceOfOsrmViaWaypoint,
  Zf as instanceOfOsrmVoiceInstruction,
  ip as instanceOfOsrmWaypoint,
  rd as instanceOfPedestrianCostingOptions,
  id as instanceOfPedestrianType,
  Fl as instanceOfPoint,
  Ll as instanceOfPrecision,
  rp as instanceOfPropertiesV2,
  Ss as instanceOfRestrictions,
  _l as instanceOfRoadClass,
  qs as instanceOfRouteLeg,
  Ys as instanceOfRouteManeuver,
  yp as instanceOfRouteRequest,
  qe as instanceOfRouteResponse,
  ef as instanceOfRouteResponseAlternatesInner,
  Hs as instanceOfRouteSummary,
  js as instanceOfRouteTrip,
  hd as instanceOfRoutingLanguages,
  Ws as instanceOfRoutingLongUnits,
  Vs as instanceOfRoutingResponseWaypoint,
  fp as instanceOfRoutingWaypoint,
  dp as instanceOfRoutingWaypointAllOfSearchFilter,
  Fe as instanceOfSearchQuery,
  Ld as instanceOfSearchStructuredQuery,
  hp as instanceOfSimpleRoutingWaypoint,
  Ml as instanceOfSourceAttribution,
  Sp as instanceOfSourceId,
  Os as instanceOfSpeeds,
  Cp as instanceOfTraceAttributeFilterOptions,
  Rp as instanceOfTraceAttributeKey,
  Ap as instanceOfTraceAttributesBaseResponse,
  Pp as instanceOfTraceAttributesRequest,
  Hp as instanceOfTraceAttributesResponse,
  Ep as instanceOfTraceEdge,
  Ks as instanceOfTravelMode,
  gl as instanceOfTraversability,
  od as instanceOfTruckCostingOptions,
  zp as instanceOfTzResponse,
  mf as instanceOfWarning,
  Pu as instanceOfWhosOnFirstConcordances,
  jd as instanceOfWofContext,
  qd as instanceOfWofContextComponent,
  Mu as mapValues,
  _e as querystring
};
//# sourceMappingURL=stadiamaps-api.mjs.map
